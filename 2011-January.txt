From twm at mail.berlios.de  Sat Jan 29 12:28:50 2011
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Sat, 29 Jan 2011 12:28:50 +0100
Subject: [Dzchart-svncheckins] r542 - utilities/dzLib/trunk/dbcreator
Message-ID: <20110129112850.6E880480F6B@sheep.berlios.de>

Author: twm
Date: 2011-01-29 12:28:50 +0100 (Sat, 29 Jan 2011)
New Revision: 542

Modified:
   utilities/dzLib/trunk/dbcreator/u_dzXmlWriter.pas
   utilities/dzLib/trunk/dbcreator/u_dzXmlWriterInterface.pas
Log:
TdzNameValueList -> TNameValueList

Modified: utilities/dzLib/trunk/dbcreator/u_dzXmlWriter.pas
===================================================================
--- utilities/dzLib/trunk/dbcreator/u_dzXmlWriter.pas	2010-12-01 10:38:55 UTC (rev 541)
+++ utilities/dzLib/trunk/dbcreator/u_dzXmlWriter.pas	2011-01-29 11:28:50 UTC (rev 542)
@@ -49,7 +49,7 @@
     function CreateAttribString(const _Attribs: array of string): string; overload;
     function CreateAttribString(_Attribs: TStrings): string; overload;
     ///<summary> @italic(Note: With this function, the attributes will always be sorted) </summary>
-    function CreateAttribString(_Attribs: TdzNameValueList): string; overload;
+    function CreateAttribString(_Attribs: TNameValueList): string; overload;
     ///<summary> same as CreateAttribString, but excpects the attributes to be stored as name=value pairs in the stringlist
     ///          @italic(Note: If you add a name with an empty value to a stringlist, the class will
     ///          ignore this entry or remove an existing entry, e.g.:
@@ -83,7 +83,7 @@
     ///                 ['name1', 'value1', 'name2', 'value2'] </summary>
     procedure StartEntity(const _Name: string; const _Attribs: array of string); overload;
     ///<summary> @italic(Note: With this function, the attributes will always be sorted) </summary>
-    procedure StartEntity(const _Name: string; _Attribs: TdzNameValueList); overload;
+    procedure StartEntity(const _Name: string; _Attribs: TNameValueList); overload;
     ///<summary> Same as StartEntity but excpects the attributes to be stored as name=value pairs in the stringlist
     ///          @italic(Note: If you add a name with an empty value to a stringlist, the class will
     ///          ignore this entry or remove an existing entry, e.g.:
@@ -103,7 +103,7 @@
     ///                 name and the value of attributes like this:
     ///                 ['name1', 'value1', 'name2', 'value2'] </summary>
     procedure WriteEntity(const _Name: string; const _Attribs: array of string); overload;
-    procedure WriteEntity(const _Name: string; _Attribs: TdzNameValueList); overload;
+    procedure WriteEntity(const _Name: string; _Attribs: TNameValueList); overload;
     ///<summary> Same as WriteEntity but excpects the attributes to be stored as name=value pairs in the stringlist
     ///          @italic(Note: If you add a name with an empty value to a stringlist, the class will
     ///          ignore this entry or remove an existing entry, e.g.:
@@ -198,7 +198,7 @@
   end;
 end;
 
-function TdzXmlWriter.CreateAttribString(_Attribs: TdzNameValueList): string;
+function TdzXmlWriter.CreateAttribString(_Attribs: TNameValueList): string;
 var
   i: integer;
   Name, Value: string;
@@ -230,7 +230,7 @@
   Inc(FIndent, FDelta);
 end;
 
-procedure TdzXmlWriter.StartEntity(const _Name: string; _Attribs: TdzNameValueList);
+procedure TdzXmlWriter.StartEntity(const _Name: string; _Attribs: TNameValueList);
 begin
   WriteLineFmt('<%s %s>', [_Name, CreateAttribString(_Attribs)]);
   Inc(FIndent, FDelta);
@@ -253,7 +253,7 @@
   WriteLineFmt('<%s %s/>', [_Name, CreateAttribString(_Attribs)]);
 end;
 
-procedure TdzXmlWriter.WriteEntity(const _Name: string; _Attribs: TdzNameValueList);
+procedure TdzXmlWriter.WriteEntity(const _Name: string; _Attribs: TNameValueList);
 begin
   WriteLineFmt('<%s %s/>', [_Name, CreateAttribString(_Attribs)]);
 end;

Modified: utilities/dzLib/trunk/dbcreator/u_dzXmlWriterInterface.pas
===================================================================
--- utilities/dzLib/trunk/dbcreator/u_dzXmlWriterInterface.pas	2010-12-01 10:38:55 UTC (rev 541)
+++ utilities/dzLib/trunk/dbcreator/u_dzXmlWriterInterface.pas	2011-01-29 11:28:50 UTC (rev 542)
@@ -20,7 +20,7 @@
     ///                 name and the value of attributes like this:
     ///                 ['name1', 'value1', 'name2', 'value2'] </summary>
     procedure StartEntity(const _Name: string; const _Attribs: array of string); overload;
-    procedure StartEntity(const _Name: string; _Attribs: TdzNameValueList); overload;
+    procedure StartEntity(const _Name: string; _Attribs: TNameValueList); overload;
     ///<summary> Same as StartEntity but excpects the attributes to be stored as
     ///          name=value pairs in the stringlist
     ///          @bold(If you add a name with an empty value to a stringlist, the class will
@@ -41,7 +41,7 @@
     ///                 name and the value of attributes like this:
     ///                 ['name1', 'value1', 'name2', 'value2'] </summary>
     procedure WriteEntity(const _Name: string; const _Attribs: array of string); overload;
-    procedure WriteEntity(const _Name: string; _Attribs: TdzNameValueList); overload;
+    procedure WriteEntity(const _Name: string; _Attribs: TNameValueList); overload;
     ///<summary> Same as WriteEntity but excpects the attributes to be stored as name=value pairs in the stringlist
     ///          @bold(If you add a name with an empty value to a stringlist, the class will
     ///                ignore this entry or remove an existing entry, e.g.:



From twm at mail.berlios.de  Sat Jan 29 12:30:23 2011
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Sat, 29 Jan 2011 12:30:23 +0100
Subject: [Dzchart-svncheckins] r543 - in utilities/dzLib/trunk: forms src
Message-ID: <20110129113023.854DB4812C3@sheep.berlios.de>

Author: twm
Date: 2011-01-29 12:30:23 +0100 (Sat, 29 Jan 2011)
New Revision: 543

Modified:
   utilities/dzLib/trunk/forms/w_dzProgress.pas
   utilities/dzLib/trunk/src/u_dzProgress.pas
Log:
Removed Abort parameter of Progress. Calls SysUtils.Abort instead now

Modified: utilities/dzLib/trunk/forms/w_dzProgress.pas
===================================================================
--- utilities/dzLib/trunk/forms/w_dzProgress.pas	2011-01-29 11:28:50 UTC (rev 542)
+++ utilities/dzLib/trunk/forms/w_dzProgress.pas	2011-01-29 11:30:23 UTC (rev 543)
@@ -66,8 +66,8 @@
     property Action: string read FAction write SetAction;
     property IsCancelVisible: boolean read FIsCancelVisible write SetIsCancelVisible;
     property IsActionVisible: boolean read FIsActionVisible write SetIsActionVisible;
-    procedure Progress(_Position: integer; const _Action: string; var _Abort: boolean); overload;
-    procedure Progress(_Position: integer; var _Abort: boolean); overload;
+    procedure Progress(_Position: integer; const _Action: string {; var _Abort: boolean}); overload;
+    procedure Progress(_Position: integer {; var _Abort: boolean}); overload;
     property ProgressTimeInterval: Cardinal read FProgressTimeInterval write FProgressTimeInterval;
   end;
 
@@ -127,7 +127,7 @@
   end;
 end;
 
-procedure Tf_dzProgress.Progress(_Position: integer; var _Abort: boolean);
+procedure Tf_dzProgress.Progress(_Position: integer {; var _Abort: boolean});
 var
   NextTickCount: Int64;
 begin
@@ -143,17 +143,18 @@
     pb_Progress.Position := _Position;
     InternalSetCaption;
     Application.ProcessMessages;
-  _Abort := FCancelPressed;
+    if FCancelPressed then
+      Abort;
+    //_Abort := FCancelPressed;
     FLastTickCount := GetTickCount;
   end;
 end;
 
-procedure Tf_dzProgress.Progress(_Position: integer; const _Action: string;
-  var _Abort: boolean);
+procedure Tf_dzProgress.Progress(_Position: integer; const _Action: string {;var _Abort: boolean});
 begin
   FAction := _Action;
   l_Action.Caption := _Action;
-  Progress(_Position, _Abort);
+  Progress(_Position {, _Abort});
 end;
 
 function Tf_dzProgress.AnalyseCaption(const _Caption: string; var _ParamCount: integer;

Modified: utilities/dzLib/trunk/src/u_dzProgress.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzProgress.pas	2011-01-29 11:28:50 UTC (rev 542)
+++ utilities/dzLib/trunk/src/u_dzProgress.pas	2011-01-29 11:30:23 UTC (rev 543)
@@ -25,8 +25,8 @@
     property Action: string read GetAction write SetAction;
     property IsCancelVisible: boolean read GetIsCancelVisible write SetIsCancelVisible;
     property IsActionVisible: boolean read GetIsActionVisible write SetIsActionVisible;
-    procedure Progress(_Position: integer; const _Action: string; var _Abort: boolean); overload;
-    procedure Progress(_Position: integer; var _Abort: boolean); overload;
+    procedure Progress(_Position: integer; const _Action: string {; var _Abort: boolean}); overload;
+    procedure Progress(_Position: integer {; var _Abort: boolean}); overload;
   end;
 
 type
@@ -44,8 +44,8 @@
     procedure SetIsCancelVisible(const _Value: boolean);
     procedure SetProgressMax(const _Value: integer);
     procedure SetProgressPos(const _Value: integer);
-    procedure Progress(_Position: integer; const _Action: string; var _Abort: boolean); overload;
-    procedure Progress(_Position: integer; var _Abort: boolean); overload;
+    procedure Progress(_Position: integer; const _Action: string {; var _Abort: boolean}); overload;
+    procedure Progress(_Position: integer {; var _Abort: boolean}); overload;
   public
     constructor Create(_Owner: TWinControl; const _Caption: string);
     destructor Destroy; override;
@@ -98,14 +98,14 @@
   Result := FForm.ProgressPos;
 end;
 
-procedure TdzProgress.Progress(_Position: integer; const _Action: string; var _Abort: boolean);
+procedure TdzProgress.Progress(_Position: integer; const _Action: string {; var _Abort: boolean});
 begin
-  FForm.Progress(_Position, _Action, _Abort);
+  FForm.Progress(_Position, _Action {, _Abort});
 end;
 
-procedure TdzProgress.Progress(_Position: integer; var _Abort: boolean);
+procedure TdzProgress.Progress(_Position: integer {; var _Abort: boolean});
 begin
-  FForm.Progress(_Position, _Abort);
+  FForm.Progress(_Position {, _Abort});
 end;
 
 procedure TdzProgress.SetAction(const _Value: string);



From twm at mail.berlios.de  Sat Jan 29 12:30:55 2011
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Sat, 29 Jan 2011 12:30:55 +0100
Subject: [Dzchart-svncheckins] r544 - utilities/dzLib/trunk/src
Message-ID: <20110129113055.2CF944812C3@sheep.berlios.de>

Author: twm
Date: 2011-01-29 12:30:54 +0100 (Sat, 29 Jan 2011)
New Revision: 544

Modified:
   utilities/dzLib/trunk/src/u_dzFileStreams.pas
Log:
Filename property is now readonly

Modified: utilities/dzLib/trunk/src/u_dzFileStreams.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzFileStreams.pas	2011-01-29 11:30:23 UTC (rev 543)
+++ utilities/dzLib/trunk/src/u_dzFileStreams.pas	2011-01-29 11:30:54 UTC (rev 544)
@@ -82,8 +82,6 @@
     procedure SetFileAttributes(_FileAttributes: DWORD);
     ///<summary> Set method for FileFlags property </summary>
     procedure SetFileFlags(_FileFlags: DWORD);
-    ///<summary> Set method for Filename property </summary>
-    procedure SetFilename(const _Filename: string);
   public
     ///<summary> Creates a TdzFile object.
     ///          @param Filename is a string containing the name of the file to open </summary>
@@ -107,7 +105,7 @@
     ///<summary> returns true if Position = Size </summary>
     function EOF: boolean;
     ///<summary> The file's name as passed to the Create constructor. </summary>
-    property Filename: string read FFilename write SetFilename;
+    property Filename: string read FFilename;
     ///<summary> The file's access mode.
     ///          Can be set to [faRead], [faWrite] or [faRead, faWrite]. </summary>
     property AccessMode: TFileAccessModeSet read FAccessMode write FAccessMode;
@@ -320,6 +318,11 @@
   FFileFlags := _FileFlags;
 end;
 
+function TdzFile.EOF: boolean;
+begin
+  Result := Position = Size;
+end;
+
 { TdzTempFile }
 
 constructor TdzTempFile.Create(_Directory: string; const _Prefix: string; _Unique: word);
@@ -332,17 +335,5 @@
   FileFlags := FILE_FLAG_DELETE_ON_CLOSE;
 end;
 
-procedure TdzFile.SetFilename(const _Filename: string);
-begin
-  if Int64(Self.Handle) <> Int64(INVALID_HANDLE_VALUE) then
-    raise EdzFile.Create(_('Cannot change filename when file is open.'));
-  FFilename := _Filename;
-end;
-
-function TdzFile.EOF: boolean;
-begin
-  Result := Position = Size;
-end;
-
 end.
 



From twm at mail.berlios.de  Sat Jan 29 12:31:31 2011
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Sat, 29 Jan 2011 12:31:31 +0100
Subject: [Dzchart-svncheckins] r545 - utilities/dzLib/trunk/src
Message-ID: <20110129113131.30BD94812C3@sheep.berlios.de>

Author: twm
Date: 2011-01-29 12:31:30 +0100 (Sat, 29 Jan 2011)
New Revision: 545

Modified:
   utilities/dzLib/trunk/src/u_dzVclUtils.pas
Log:
new procedure TGrid_SetNonfixedRowCount

Modified: utilities/dzLib/trunk/src/u_dzVclUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzVclUtils.pas	2011-01-29 11:30:54 UTC (rev 544)
+++ utilities/dzLib/trunk/src/u_dzVclUtils.pas	2011-01-29 11:31:30 UTC (rev 545)
@@ -3,7 +3,7 @@
 ///          @author        twm </summary>
 unit u_dzVclUtils;
 
-{$include jedi.inc}
+{$INCLUDE jedi.inc}
 
 interface
 
@@ -130,6 +130,10 @@
 ///          @returns the new RowCount </summary>
 function TGrid_SetRowCount(_Grid: TCustomGrid; _RowCount: integer): integer;
 
+///<summary> sets the nonfixd row count
+///          @returns the new RowCount </summary>
+function TGrid_SetNonfixedRowCount(_Grid: TCustomGrid; _RowCount: integer): integer;
+
 ///<summary> sets the column count, taking the fixed columns into account
 ///          @returns the new ColCount </summary>
 function TGrid_SetColCount(_Grid: TCustomGrid; _ColCount: integer): integer;
@@ -753,6 +757,15 @@
   Grid.ColCount := Result;
 end;
 
+function TGrid_SetNonfixedRowCount(_Grid: TCustomGrid; _RowCount: integer): integer;
+var
+  Grid: TGridHack;
+begin
+  Grid := TGridHack(_Grid);
+  Result := Grid.FixedRows + _RowCount;
+  Grid.RowCount := Result;
+end;
+
 procedure TStringGrid_SetRowCount(_Grid: TCustomGrid; _RowCount: integer);
 begin
   TGrid_SetRowCount(_Grid, _RowCount);



From twm at mail.berlios.de  Sat Jan 29 12:33:06 2011
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Sat, 29 Jan 2011 12:33:06 +0100
Subject: [Dzchart-svncheckins] r546 - utilities/dzLib/trunk/src
Message-ID: <20110129113306.7B8A3480F6B@sheep.berlios.de>

Author: twm
Date: 2011-01-29 12:33:06 +0100 (Sat, 29 Jan 2011)
New Revision: 546

Modified:
   utilities/dzLib/trunk/src/u_dzFileUtils.pas
Log:
* Bugfix TFilesystem.RemoveFileExtFull did not work correctly with filenames without extensions
* new class functions TFilesystem.GetVolumeName, .GetRemoteVolumeName and .GetLocalVolumeNames

Modified: utilities/dzLib/trunk/src/u_dzFileUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzFileUtils.pas	2011-01-29 11:31:30 UTC (rev 545)
+++ utilities/dzLib/trunk/src/u_dzFileUtils.pas	2011-01-29 11:33:06 UTC (rev 546)
@@ -676,6 +676,9 @@
     /// Returns the free space (in bytes) on the disk with the given drive letter
     /// </summary>
     class function DiskFree(_DriveLetter: AnsiChar): Int64;
+    class function GetVolumeName(_DriveLetter: AnsiChar): string;
+    class function GetRemoteVolumeName(const _Share: string): string;
+    class procedure GetLocalVolumeNames(_sl: TStrings; _HdOnly: boolean = False; _IgnoreEmpty: Boolean = True);
 
     ///<summary> changes the "full" file extension where "full" means it handles multiple
     ///          extensions like .doc.exe </summary>
@@ -930,6 +933,60 @@
   SetLength(Result, Res);
 end;
 
+// declared wrongly in WINDOWS
+
+function GetVolumeInformation(lpRootPathName: PChar;
+  lpVolumeNameBuffer: PChar; nVolumeNameSize: DWORD; lpVolumeSerialNumber: PDWORD;
+  lpMaximumComponentLength, lpFileSystemFlags: LPDWORD;
+  lpFileSystemNameBuffer: PChar; nFileSystemNameSize: DWORD): BOOL; stdcall; external kernel32 name 'GetVolumeInformationA';
+
+class function TFileSystem.GetVolumeName(_DriveLetter: AnsiChar): string;
+begin
+  Result := GetRemoteVolumeName(_DriveLetter + ':\');
+end;
+
+class function TFileSystem.GetRemoteVolumeName(const _Share: string): string;
+var
+  Res: LongBool;
+begin
+  SetLength(Result, MAX_PATH + 1);
+  Res := GetVolumeInformation(PChar(itpd(_Share)), PChar(Result), Length(Result), nil, nil, nil, nil, 0);
+  if Res then begin
+    Result := PChar(Result);
+  end else
+    Result := '';
+end;
+
+class procedure TFileSystem.GetLocalVolumeNames(_sl: TStrings; _HdOnly: boolean = False; _IgnoreEmpty: Boolean = True);
+type
+  TDriveType = (dtUnknown, dtNoDrive, dtFloppy, dtFixed, dtNetwork, dtCDROM, dtRAM);
+var
+  DriveBits: set of 0..25;
+  DriveNum: Integer;
+  DriveChar: Char;
+  DriveType: TDriveType;
+  s: string;
+begin
+  Integer(DriveBits) := Windows.GetLogicalDrives;
+  for DriveNum := 0 to 25 do begin
+    if not (DriveNum in DriveBits) then
+      Continue;
+    DriveChar := Char(DriveNum + Ord('a'));
+    DriveType := TDriveType(Windows.GetDriveType(PChar(DriveChar + ':\')));
+    if not _HdOnly or (DriveType = dtFixed) then begin
+      s := GetVolumeName(DriveChar);
+      if s <> '' then begin
+        _sl.AddObject(s, Pointer(DriveNum));
+      end else begin
+        if not _IgnoreEmpty then begin
+          s := _('<no volume name>');
+          _sl.AddObject(s, Pointer(DriveNum));
+        end;
+      end;
+    end;
+  end;
+end;
+
 class function TFileSystem.CreateDir(const _DirectoryName: string;
   _RaiseException: boolean = true): boolean;
 var
@@ -1646,7 +1703,7 @@
   fn := ExtractFileName(_Filename);
   p := Pos('.', fn);
   if p = 0 then
-    Result := ''
+    Result := fn
   else
     Result := LeftStr(fn, p - 1);
 



From twm at mail.berlios.de  Sat Jan 29 12:34:01 2011
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Sat, 29 Jan 2011 12:34:01 +0100
Subject: [Dzchart-svncheckins] r547 - utilities/dzLib/trunk/src
Message-ID: <20110129113401.6D62B480F6B@sheep.berlios.de>

Author: twm
Date: 2011-01-29 12:34:01 +0100 (Sat, 29 Jan 2011)
New Revision: 547

Modified:
   utilities/dzLib/trunk/src/u_dzLogging.pas
Log:
new method LogCallstack using a globel callback gblOnGetCurrentCallstack to retrieve it (e.g. via jcldebug)

Modified: utilities/dzLib/trunk/src/u_dzLogging.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzLogging.pas	2011-01-29 11:33:06 UTC (rev 546)
+++ utilities/dzLib/trunk/src/u_dzLogging.pas	2011-01-29 11:34:01 UTC (rev 547)
@@ -29,6 +29,7 @@
     function LogLevel2Str(_Level: TLogLevel): string;
     procedure LogLine(const _s: string; _Level: TLogLevel = llDump); deprecated; // use Log method instead
     procedure LogException(_e: exception; const _Where: string = ''; _IncludeCallstack: boolean = true);
+    procedure LogCallstack(_Level: TLogLevel);
     procedure LogError(const _s: string);
     procedure LogWarning(const _s: string);
     procedure LogInfo(const _s: string);
@@ -84,6 +85,7 @@
        @param Level is the log level, defaults to llDump }
     procedure LogLine(const _s: string; _Level: TLogLevel = llDump); virtual; deprecated; // use Log method instead
     procedure LogException(_e: exception; const _Where: string = ''; _IncludeCallstack: boolean = true);
+    procedure LogCallstack(_Level: TLogLevel);
     {: Logs a string at error level }
     procedure LogError(const _s: string); deprecated;
     {: Logs a string at warning level }
@@ -186,6 +188,7 @@
   TOnGetCallstack = procedure(_sl: TStrings);
 const
   gblOnGetCallstack: TOnGetCallstack = nil;
+  gblOnGetCurrentCallstack: TOnGetCallstack = nil;
 
 implementation
 
@@ -336,6 +339,25 @@
   end;
 end;
 
+procedure TAbstractLogger.LogCallstack(_Level: TLogLevel);
+var
+  sl: TStringList;
+  s: string;
+begin
+  if Assigned(gblOnGetCurrentCallstack) then begin
+    sl := TStringList.Create;
+    try
+      Log('<begin call stack>', _Level);
+      gblOnGetCurrentCallstack(sl);
+      for s in sl do
+        Log(s, _Level);
+      Log('<end call stack>', _Level);
+    finally
+      sl.Free;
+    end;
+  end;
+end;
+
 function TAbstractLogger.CreateSession(const _SessionName: string): ILogger;
 begin
   // The default implementation does not distinguish between sessions



