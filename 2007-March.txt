From twm at mail.berlios.de  Sun Mar 18 19:02:23 2007
From: twm at mail.berlios.de (twm at BerliOS)
Date: Sun, 18 Mar 2007 19:02:23 +0100
Subject: [Dzchart-svncheckins] r135 - utilities
Message-ID: <200703181802.l2II2NDq026328@sheep.berlios.de>

Author: twm
Date: 2007-03-18 19:02:21 +0100 (Sun, 18 Mar 2007)
New Revision: 135

Added:
   utilities/dzLib/
Log:
Created folder remotely



From twm at mail.berlios.de  Sun Mar 18 19:04:48 2007
From: twm at mail.berlios.de (twm at BerliOS)
Date: Sun, 18 Mar 2007 19:04:48 +0100
Subject: [Dzchart-svncheckins] r136 - in utilities/dzLib: . trunk
Message-ID: <200703181804.l2II4mOf028652@sheep.berlios.de>

Author: twm
Date: 2007-03-18 19:04:39 +0100 (Sun, 18 Mar 2007)
New Revision: 136

Added:
   utilities/dzLib/trunk/
   utilities/dzLib/trunk/u_dzNamedThread.pas
Log:
initial import

Added: utilities/dzLib/trunk/u_dzNamedThread.pas
===================================================================
--- utilities/dzLib/trunk/u_dzNamedThread.pas	2007-03-18 18:02:21 UTC (rev 135)
+++ utilities/dzLib/trunk/u_dzNamedThread.pas	2007-03-18 18:04:39 UTC (rev 136)
@@ -0,0 +1,76 @@
+{: If this unit is included in a multithreaded program, it will set the
+   name for the main thread to 'Main' (also does this for single threaded
+   programs but it doesn't make that much sense there).
+   Also it declares a TNamedThread type that uses its class name for the thread
+   name. Make sure to override this if there are multiple instances of this class.
+   If you do not want to derive from TNamedThread, just call SetThreadName from
+   your thread's execute procedure. }
+unit u_dzNamedThread;
+
+interface
+
+uses
+  Classes,
+  Windows;
+
+type
+  {: This record must be filled to set the name of a thread }
+  TThreadNameInfo = record
+    FType: LongWord;     // must be 0x1000
+    FName: PChar;        // pointer to name (in user address space)
+    FThreadID: LongWord; // thread ID (-1 indicates caller thread)
+    FFlags: LongWord;    // reserved for future use, must be zero
+  end;
+
+{: Set the name for the current thread to
+   @param Name is a string with the name to use }
+procedure SetThreadName(const _Name: string);
+
+type
+  {: A TThread that sets its name to its class name. Make sure you call
+     inherited Execute in descendants! }
+  TNamedThread = class(TThread)
+  protected
+    {: Calls SetThreadName with the given name or the class name if empty
+       @param Name is the name to use, if empty, the class name will be used }
+    procedure SetName(_Name: string = ''); virtual;
+    {: Calls SetName }
+    procedure Execute; override;
+  end;
+
+implementation
+
+procedure SetThreadName(const _Name: string);
+var
+  ThreadNameInfo: TThreadNameInfo;
+begin
+  ThreadNameInfo.FType:= $1000;
+  ThreadNameInfo.FName:= PChar(_Name);
+  ThreadNameInfo.FThreadID:= $FFFFFFFF;
+  ThreadNameInfo.FFlags:= 0;
+  try
+    RaiseException($406D1388, 0, SizeOf(ThreadNameInfo) div SizeOf(LongWord), @ThreadNameInfo );
+  except
+    // ignore
+  end;
+end;
+
+{ TNamedThread }
+
+procedure TNamedThread.Execute;
+begin
+  SetName();
+end;
+
+procedure TNamedThread.SetName(_Name: string = '');
+begin
+  if _Name = '' then
+    _Name := ClassName;
+  SetThreadName(_Name);
+end;
+
+initialization
+  // set the name for the main thread to 'Main'
+  SetThreadName('Main');
+end.
+



