From twm at mail.berlios.de  Thu Nov  1 14:52:53 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 14:52:53 +0100
Subject: [Dzchart-svncheckins] r230 - in utilities/dzPrepBuild/trunk: .
	buildtools src
Message-ID: <200711011352.lA1Dqriu011151@sheep.berlios.de>

Author: twm
Date: 2007-11-01 14:52:18 +0100 (Thu, 01 Nov 2007)
New Revision: 230

Added:
   utilities/dzPrepBuild/trunk/buildtools/
   utilities/dzPrepBuild/trunk/buildtools/PrepBuild.exe
Modified:
   utilities/dzPrepBuild/trunk/prep.cmd
   utilities/dzPrepBuild/trunk/src/PrepBuild.dproj
   utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini
   utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini
   utilities/dzPrepBuild/trunk/src/u_PrepBuildMain.pas
Log:
minor changes

Added: utilities/dzPrepBuild/trunk/buildtools/PrepBuild.exe
===================================================================
(Binary files differ)


Property changes on: utilities/dzPrepBuild/trunk/buildtools/PrepBuild.exe
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: utilities/dzPrepBuild/trunk/prep.cmd
===================================================================
--- utilities/dzPrepBuild/trunk/prep.cmd	2007-09-30 16:38:53 UTC (rev 229)
+++ utilities/dzPrepBuild/trunk/prep.cmd	2007-11-01 13:52:18 UTC (rev 230)
@@ -21,5 +21,5 @@
 echo Comments=%dzVersion.Comments%
 
 @echo on
-PrepBuild --writerc=%dzProject%_Version.rc --updateini=%dzProject% --MajorVer=%dzVersion.MajorVer% --MinorVer=%dzVersion.MinorVer% --Release=%dzVersion.Release% --Build=%dzVersion.Build% --FileDesc="%dzVersion.FileDesc%" --InternalName="%dzVersion.InternalName%" --OriginalName="%dzVersion.OriginalName%" --Product="%dzVersion.Product%" --ProductVersion="%dzDate%" --Company="%dzVersion.Company%" --Copyright="%dzVersion.Copyright%" --Trademark="%dzVersion.Trademark%" --Comments="%dzVersion.Comments%"
+..\buildtools\PrepBuild --writerc=%dzProject%_Version.rc --updateini=%dzProject% --MajorVer=%dzVersion.MajorVer% --MinorVer=%dzVersion.MinorVer% --Release=%dzVersion.Release% --Build=%dzVersion.Build% --FileDesc="%dzVersion.FileDesc%" --InternalName="%dzVersion.InternalName%" --OriginalName="%dzVersion.OriginalName%" --Product="%dzVersion.Product%" --ProductVersion="%dzDate%" --Company="%dzVersion.Company%" --Copyright="%dzVersion.Copyright%" --Trademark="%dzVersion.Trademark%" --Comments="%dzVersion.Comments%"
 brcc32 %dzProject%_Version.rc

Modified: utilities/dzPrepBuild/trunk/src/PrepBuild.dproj
===================================================================
--- utilities/dzPrepBuild/trunk/src/PrepBuild.dproj	2007-09-30 16:38:53 UTC (rev 229)
+++ utilities/dzPrepBuild/trunk/src/PrepBuild.dproj	2007-11-01 13:52:18 UTC (rev 230)
@@ -37,39 +37,18 @@
     <Borland.Personality>Delphi.Personality</Borland.Personality>
     <Borland.ProjectType />
     <BorlandProject>
-<BorlandProject><Delphi.Personality><Parameters><Parameters Name="UseLauncher">False</Parameters><Parameters Name="LoadAllSymbols">True</Parameters><Parameters Name="LoadUnspecifiedSymbols">False</Parameters><Parameters Name="RunParams">--incbuild --readini=src\prepbuild --exec=prep.cmd</Parameters></Parameters><VersionInfo><VersionInfo Name="IncludeVerInfo">False</VersionInfo><VersionInfo Name="AutoIncBuild">False</VersionInfo>  <VersionInfo Name="MajorVer">1</VersionInfo>
-      <VersionInfo Name="MinorVer">0</VersionInfo>
-      <VersionInfo Name="Release">0</VersionInfo>
-      <VersionInfo Name="Build">0</VersionInfo>
-      <VersionInfo Name="Debug">False</VersionInfo>
-      <VersionInfo Name="PreRelease">False</VersionInfo>
-      <VersionInfo Name="Special">False</VersionInfo>
-      <VersionInfo Name="Private">False</VersionInfo>
-      <VersionInfo Name="DLL">False</VersionInfo>
-      <VersionInfo Name="Locale">2057</VersionInfo>
-      <VersionInfo Name="CodePage">1252</VersionInfo>
-    </VersionInfo><Excluded_Packages>
+<BorlandProject><Delphi.Personality><Parameters><Parameters Name="UseLauncher">False</Parameters><Parameters Name="LoadAllSymbols">True</Parameters><Parameters Name="LoadUnspecifiedSymbols">False</Parameters><Parameters Name="RunParams">--incbuild --readini=src\prepbuild --exec=prep.cmd</Parameters></Parameters><VersionInfo><VersionInfo Name="IncludeVerInfo">False</VersionInfo><VersionInfo Name="AutoIncBuild">False</VersionInfo><VersionInfo Name="MajorVer">1</VersionInfo><VersionInfo Name="MinorVer">0</VersionInfo><VersionInfo Name="Release">0</VersionInfo><VersionInfo Name="Build">0</VersionInfo><VersionInfo Name="Debug">False</VersionInfo><VersionInfo Name="PreRelease">False</VersionInfo><VersionInfo Name="Special">False</VersionInfo><VersionInfo Name="Private">False</VersionInfo><VersionInfo Name="DLL">False</VersionInfo><VersionInfo Name="Locale">2057</VersionInfo><VersionInfo Name="CodePage">1252</VersionInfo></VersionInfo><Excluded_Packages>
       
       
+      
+      
       <Excluded_Packages Name="$(BDS)\bin\dclofficexp100.bpl">Microsoft Office XP Sample Automation Server Wrapper Components</Excluded_Packages>
       <Excluded_Packages Name="$(BDS)\bin\dcloffice2k100.bpl">Microsoft Office 2000 Sample Automation Server Wrapper Components</Excluded_Packages>
-    </Excluded_Packages><Source><Source Name="MainSource">PrepBuild.dpr</Source></Source>  <VersionInfoKeys>
-      <VersionInfoKeys Name="CompanyName"></VersionInfoKeys>
-      <VersionInfoKeys Name="FileDescription"></VersionInfoKeys>
-      <VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys>
-      <VersionInfoKeys Name="InternalName"></VersionInfoKeys>
-      <VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys>
-      <VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys>
-      <VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys>
-      <VersionInfoKeys Name="ProductName"></VersionInfoKeys>
-      <VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys>
-      <VersionInfoKeys Name="Comments"></VersionInfoKeys>
-    </VersionInfoKeys>
-  </Delphi.Personality><ModelSupport>False</ModelSupport></BorlandProject></BorlandProject>
+    </Excluded_Packages><Source><Source Name="MainSource">PrepBuild.dpr</Source></Source><VersionInfoKeys><VersionInfoKeys Name="CompanyName"></VersionInfoKeys><VersionInfoKeys Name="FileDescription"></VersionInfoKeys><VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="InternalName"></VersionInfoKeys><VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys><VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys><VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys><VersionInfoKeys Name="ProductName"></VersionInfoKeys><VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="Comments"></VersionInfoKeys></VersionInfoKeys></Delphi.Personality><ModelSupport>False</ModelSupport></BorlandProject></BorlandProject>
   </ProjectExtensions>
   <Import Project="$(MSBuildBinPath)\Borland.Delphi.Targets" />
   <PropertyGroup>
-    <PreBuildEvent>prepbuild.exe --incbuild --readini=$(PROJECTPATH) --exec=..\prep.cmd</PreBuildEvent>
+    <PreBuildEvent>..\buildtools\prepbuild.exe --incbuild --readini=$(PROJECTPATH) --exec=..\prep.cmd $(SAVE)</PreBuildEvent>
   </PropertyGroup>
   <ItemGroup>
     <DelphiCompile Include="PrepBuild.dpr">
@@ -78,6 +57,7 @@
     <DCCReference Include="..\libs\dzlib\src\u_dzDefaultMain.pas" />
     <DCCReference Include="d_BdsProjVersionInfo.pas">
       <Form>dm_BdsProjVersionInfo</Form>
+      <DesignClass>TDataModule</DesignClass>
     </DCCReference>
     <DCCReference Include="i_VersionInfo.pas" />
     <DCCReference Include="u_AbstractVersionInfo.pas" />

Modified: utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini
===================================================================
--- utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini	2007-09-30 16:38:53 UTC (rev 229)
+++ utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini	2007-11-01 13:52:18 UTC (rev 230)
@@ -1,3 +1,3 @@
 [Version Info]
-Build=101
+Build=104
 

Modified: utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini
===================================================================
--- utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini	2007-09-30 16:38:53 UTC (rev 229)
+++ utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini	2007-11-01 13:52:18 UTC (rev 230)
@@ -16,12 +16,12 @@
 [Version Info Keys]
 CompanyName=dummzeuch.de
 FileDescription=commandline and IDE prebuild tool
-FileVersion=1.1.0.101
+FileVersion=1.1.0.104
 InternalName=PrepBuild
 LegalCopyright=Copyright 2002-2007 by Thomas Mueller
 LegalTrademarks=
 OriginalFilename=PrepBuild.exe
 ProductName=PrepBuild
-ProductVersion=2007-07-28
+ProductVersion=2007-11-01
 Comments=Use at your own risk
 

Modified: utilities/dzPrepBuild/trunk/src/u_PrepBuildMain.pas
===================================================================
--- utilities/dzPrepBuild/trunk/src/u_PrepBuildMain.pas	2007-09-30 16:38:53 UTC (rev 229)
+++ utilities/dzPrepBuild/trunk/src/u_PrepBuildMain.pas	2007-11-01 13:52:18 UTC (rev 230)
@@ -174,6 +174,8 @@
   IconFile: string;
   Project: string;
 begin
+  WriteLn('dzPrepBuild');
+
   if FGetOpt.OptionsFoundList.Count = 0 then
     Usage(_('You must supply some options.'));
 



From twm at mail.berlios.de  Thu Nov  1 15:06:02 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 15:06:02 +0100
Subject: [Dzchart-svncheckins] r231 - utilities/dzLib/trunk/src
Message-ID: <200711011406.lA1E62aR013419@sheep.berlios.de>

Author: twm
Date: 2007-11-01 15:05:57 +0100 (Thu, 01 Nov 2007)
New Revision: 231

Modified:
   utilities/dzLib/trunk/src/u_dzConvertUtils.pas
   utilities/dzLib/trunk/src/u_dzFileUtils.pas
   utilities/dzLib/trunk/src/u_dzTranslator.pas
   utilities/dzLib/trunk/src/u_dzVclUtils.pas
Log:
* u_dzConvertUtils: added OneKibiByte constant and friends
* u_dzConvertUtils: added FileSizeToHumanReadableString
* u_dzConvertUtils: added SecondsToHumanReadableString
* extended TDirectorySync
* added cond. NO_TRANSLATION_HINT to u_dzTranslator, so you can now get rid of the hint if you don't want any translation
* u_VclUtils: Added 3 overloaded TListBox_DeleteSelected functions

Modified: utilities/dzLib/trunk/src/u_dzConvertUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzConvertUtils.pas	2007-11-01 13:52:18 UTC (rev 230)
+++ utilities/dzLib/trunk/src/u_dzConvertUtils.pas	2007-11-01 14:05:57 UTC (rev 231)
@@ -185,31 +185,6 @@
    @returns a string representation of the floating point value }
 function Float2Str(_flt: extended; _Decimals: integer): string; overload;
 
-// these contants refer to the "Xx binary byte" units as defined by the
-// International Electronical Commission (IEC) and endorsed by the
-// IEE and CiPM
-const
-  OneKibiByte = Int64(1024);
-  OneMebiByte = Int64(1024) * OneKibiByte;
-  OneGibiByte = Int64(1024) * OneMebiByte;
-  OneTebiByte = Int64(1024) * OneGibiByte;
-  OnePebiByte = Int64(1024) * OneTebiByte;
-  OneExbiByte = Int64(1024) * OnePebiByte;
-
-{: Converts a file size to a human readable string, e.g. 536870912000 = 5.00 GiB (gibibyte) }
-function FileSizeToHumanReadableString(_FileSize: Int64): string;
-
-const
-  SecondsPerMinute = 60;
-  MinutesPerHour = 60;
-  SecondsPerHour = SecondsPerMinute * MinutesPerHour;
-  HoursPerDay = 24;
-  MinutesPerDay = HoursPerDay * MinutesPerHour;
-  SecondsPerDay = MinutesPerDay * SecondsPerMinute;
-
-{: returns a human readable string of the form '5d 23h' or '25h 15m' or '20m 21s' }
-function SecondsToHumanReadableString(_Seconds: Int64): string;
-
 implementation
 
 uses
@@ -547,36 +522,6 @@
     raise EStringConvertError.CreateFmt(STR_X_IS_NOT_A_VALID_FLOAT_VALUE_SS, [_s, _Source]);
 end;
 
-function FileSizeToHumanReadableString(_FileSize: Int64): string;
-begin
-  if _FileSize > 5 * OneExbiByte then
-    Result := Format(_('%.2f EiB'), [_FileSize / OneExbiByte])
-  else if _FileSize > 5 * OnePebiByte then
-    Result := Format(_('%.2f PiB'), [_FileSize / OnePebiByte])
-  else if _FileSize > 5 * OneTebiByte then
-    Result := Format(_('%.2f TiB'), [_FileSize / OneTebiByte])
-  else if _FileSize > 5 * OneGibiByte then
-    Result := Format(_('%.2f GiB'), [_FileSize / OneGibiByte])
-  else if _FileSize > 5 * OneMebiByte then
-    Result := Format(_('%.2f MiB'), [_FileSize / OneMebiByte])
-  else if _FileSize > 5 * OneKibiByte then
-    Result := Format(_('%.2f KiB'), [_FileSize / OneKibiByte])
-  else
-    Result := Format(_('%d Bytes'), [_FileSize]);
-end;
-
-function SecondsToHumanReadableString(_Seconds: Int64): string;
-begin
-  if _Seconds > SecondsPerDay then
-    Result := Format('%dd %dh', [_Seconds div SecondsPerDay, (_Seconds div SecondsPerHour) mod HoursPerDay])
-  else if _Seconds > Round(1.5 * SecondsPerHour) then
-    Result := Format('%dh %dm', [_Seconds div SecondsPerHour, (_Seconds div SecondsPerMinute) mod MinutesPerHour])
-  else if _Seconds > Round(1.5 * SecondsPerMinute) then
-    Result := Format('%dm %ds', [_Seconds div SecondsPerMinute, _Seconds mod SecondsPerMinute])
-  else
-    Result := Format('%ds', [_Seconds]);
-end;
-
 initialization
   DZ_FORMAT_DECIMAL_POINT := GetUserDefaultLocaleSettings;
   DZ_FORMAT_DECIMAL_POINT.DecimalSeparator := '.';

Modified: utilities/dzLib/trunk/src/u_dzFileUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzFileUtils.pas	2007-11-01 13:52:18 UTC (rev 230)
+++ utilities/dzLib/trunk/src/u_dzFileUtils.pas	2007-11-01 14:05:57 UTC (rev 231)
@@ -154,25 +154,21 @@
   {: defines the action to take if a file already exists but has a different content }
   TFileExistsAction = (feaIgnore, feaOverwrite);
   TOnSyncing = procedure(_Sender: TObject; const _SrcDir, _DstDir: string) of object;
-  TOnSyncingFile = procedure(_Sender: TObject; const _SrcDir, _DstDir: string; _Total, _Done: Int64) of object;
   {: called if a destination file already exists
      @param Action is the action to take, default is feaIgnore }
   TOnFileExists = procedure(_Sender: TObject; const _SrcFile, _DstFile: TFileInfoRec; var _Action: TFileExistsAction) of object;
   {: Synchronizes two directories }
   TDirectorySync = class
   private
-    FCurrentSource: string;
-    FCurrentDest: string;
     FOnSyncingDir: TOnSyncing;
-    FOnSyncingFile: TOnSyncingFile;
+    FOnSyncingFile: TOnSyncing;
     FOnFileExists: TOnFileExists;
 //    FOnDifferentFileExists: TOnDifferentFileExists;
 //    FCheckContent: boolean;
 //    procedure doOnDifferentFileExists(const _Filename: string; var _Action: TFileExistsAction);
     procedure doOnSyncingDir(const _SrcDir, _DstDir: string);
-    procedure doOnSyncingFile(const _SrcFile, _DstFile: string; _Total, _Done: Int64);
+    procedure doOnSyncingFile(const _SrcFile, _DstFile: string);
     function doOnFileExists(const _SrcDir, _DstDir, _Filename: string): TFileExistsAction;
-    procedure ProgressStatusCallback(_Status: TCopyProgressStatus; var _Continue: TCopyProgressStatus.TProgressResult);
   public
     {: Checks if there are files in the source directory that are already in
        the destination directory, for each file that exists, the OnFileExists
@@ -180,11 +176,8 @@
     procedure CheckOneWay(const _SrcDir, _DstDir: string);
     {: copies all files from DirA to DirB if they don't already exists
        (not implemented: if CheckContent=true, the content existing files will be checked and if
-                         it doesn't match, OnDifferentFileExists is called )
-       @param FlattenDirHierarchy determines whether all files should be copied
-                                  directly DstDir or if subdirectories should
-                                  be created, default is false }
-    procedure SyncOneWay(const _SrcDir, _DstDir: string; _FlattenDirHierarchy: boolean = false);
+                         it doesn't match, OnDifferentFileExists is called ) }
+    procedure SyncOneWay(const _SrcDir, _DstDir: string);
     {: calls SyncOneWay(DirA, DirB) and SyncOneWay(DirB, DirA)
        (not implemented: if CheckContent=true, the content existing files will be checked and if
                          it doesn't match, OnDifferentFileExists is called ) }
@@ -198,7 +191,7 @@
     property OnSyncingDir: TOnSyncing read FOnSyncingDir write FOnSyncingDir;
     {: called when a file is being copied, to abort synchronization,
       raise an exception (e.g. SysUtils.Abort), and catch it in the calling method }
-    property OnSyncingFile: TOnSyncingFile read FOnSyncingFile write FOnSyncingFile;
+    property OnSyncingFile: TOnSyncing read FOnSyncingFile write FOnSyncingFile;
     {: called from CheckOneWay if a destination file already exists }
     property OnFileExists: TOnFileExists read FOnFileExists write FOnFileExists;
   end;
@@ -1312,23 +1305,12 @@
     FOnSyncingDir(Self, _SrcDir, _DstDir);
 end;
 
-procedure TDirectorySync.doOnSyncingFile(const _SrcFile, _DstFile: string; _Total, _Done: Int64);
+procedure TDirectorySync.doOnSyncingFile(const _SrcFile, _DstFile: string);
 begin
   if Assigned(FOnSyncingFile) then
-    FOnSyncingFile(self, _SrcFile, _DstFile, _Total, _Done);
+    FOnSyncingFile(self, _SrcFile, _DstFile);
 end;
 
-procedure TDirectorySync.ProgressStatusCallback(_Status: TCopyProgressStatus;
-  var _Continue: TCopyProgressStatus.TProgressResult);
-begin
-  try
-    doOnSyncingFile(FCurrentSource, FCurrentDest, _Status.TotalFileSize.QuadPart, _Status.TotalBytesTransferred.QuadPart);
-  except
-    on e: EAbort do
-      _Continue := prCancel;
-  end;
-end;
-
 procedure TDirectorySync.CheckOneWay(const _SrcDir, _DstDir: string);
 var
   Filename: string;
@@ -1343,11 +1325,12 @@
   try
     while EnumA.FindNext(Filename) do begin
       if (EnumA.Sr.Attr and SysUtils.faDirectory) <> 0 then begin
-        CheckOneWay(SrcDirBS + Filename, DstDirBS + Filename);
+        if DirectoryExists(DstDirBS + Filename) then
+          CheckOneWay(SrcDirBS + Filename, DstDirBS + Filename);
       end else if FileExists(DstDirBS + Filename) then begin
         doOnFileExists(SrcDirBS, DstDirBS, Filename);
       end else begin
-        doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename, EnumA.Sr.Size, 0);
+        doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename);
       end;
     end;
   finally
@@ -1355,7 +1338,7 @@
   end;
 end;
 
-procedure TDirectorySync.SyncOneWay(const _SrcDir, _DstDir: string; _FlattenDirHierarchy: boolean = false);
+procedure TDirectorySync.SyncOneWay(const _SrcDir, _DstDir: string);
 var
   Filename: string;
   EnumA: TSimpleDirEnumerator;
@@ -1368,27 +1351,18 @@
   EnumA := TSimpleDirEnumerator.Create(SrcDirBS + '*.*');
   try
     while EnumA.FindNext(Filename) do begin
-      FCurrentSource := SrcDirBS + Filename;
       if (EnumA.Sr.Attr and SysUtils.faDirectory) <> 0 then begin
-        if _FlattenDirHierarchy then
-          FCurrentDest := _DstDir
-        else begin
-          FCurrentDest := DstDirBS + Filename;
-          if not DirectoryExists(FCurrentDest) then
-            TFileSystem.CreateDir(FCurrentDest);
+        if not DirectoryExists(DstDirBS + Filename) then
+          TFileSystem.CreateDir(DstDirBS + Filename);
+        SyncOneWay(SrcDirBS + Filename, DstDirBS + Filename);
+      end else if FileExists(DstDirBS + Filename) then begin
+        if doOnFileExists(SrcDirBS, DstDirBS, Filename) = feaOverwrite then begin
+          doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename);
+          TFileSystem.CopyFile(SrcDirBS + Filename, DstDirBS + Filename, false, true);
         end;
-        SyncOneWay(FCurrentSource, FCurrentDest, _FlattenDirHierarchy);
       end else begin
-        FCurrentDest := DstDirBS + Filename;
-        if FileExists(FCurrentDest) then begin
-          if doOnFileExists(SrcDirBS, DstDirBS, Filename) = feaOverwrite then begin
-            if cfwOK <> TFileSystem.CopyFileWithProgress(FCurrentSource, FCurrentDest, ProgressStatusCallback, [cfwRaiseException]) then
-              SysUtils.Abort;
-          end;
-        end else begin
-          if cfwOK <> TFileSystem.CopyFileWithProgress(FCurrentSource, FCurrentDest, ProgressStatusCallback, [cfwRaiseException, cfwFailIfExists]) then
-            SysUtils.Abort;
-        end;
+        doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename);
+        TFileSystem.CopyFile(SrcDirBS + Filename, DstDirBS + Filename, true, true);
       end;
     end;
   finally

Modified: utilities/dzLib/trunk/src/u_dzTranslator.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzTranslator.pas	2007-11-01 13:52:18 UTC (rev 230)
+++ utilities/dzLib/trunk/src/u_dzTranslator.pas	2007-11-01 14:05:57 UTC (rev 231)
@@ -7,10 +7,8 @@
 // for now uses gnugettext
 {$DEFINE gnugettext}
 {$ELSE}
-{$IFNDEF NO_TRANSLATION_HINT}
 {$MESSAGE HINT 'translation is turned off, remove NO_TRANSLATION define to turn it on'}
 {$ENDIF}
-{$ENDIF}
 
 interface
 
@@ -141,21 +139,7 @@
 {$IFDEF gnugettext}
 initialization
   // translate runtime library
-{$IFDEF DELPHI6}
-  AddDomainForResourceString('delphi6');
-{$ELSE}{$IFDEF DELPHI7}
-  AddDomainForResourceString('delphi7');
-{$ELSE}{$IFDEF DELPHI10}
-  AddDomainForResourceString('delphi2006');
-{$ELSE}{$IFDEF DELPHI11}
-  // currently we don't have translations for Delphi2007, so we use the ones from Delphi2006 and pray... ;-)
-  AddDomainForResourceString('delphi2006');
-{$ELSE}
-  'unknown Delphi version!'
-{$ENDIF}
-{$ENDIF}
-{$ENDIF}
-{$ENDIF}
+  AddDomainForResourceString('delphi');
 
   // ignore these VCL properties / classes
   TP_GlobalIgnoreClassProperty(TControl, 'ImeName');

Modified: utilities/dzLib/trunk/src/u_dzVclUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzVclUtils.pas	2007-11-01 13:52:18 UTC (rev 230)
+++ utilities/dzLib/trunk/src/u_dzVclUtils.pas	2007-11-01 14:05:57 UTC (rev 231)
@@ -242,22 +242,13 @@
 function TComboBox_Select(_cmb: TCustomComboBox; const _Item: string; _DefaultIdx: integer = -1): integer;
 
 {: Gets the object pointer of the selected listbox item
-   @param lst is the TCustomListbox (descendant) to read from
+   @param cmb is the TCustomListbox (descendant) to read from
    @param Idx is the listbox's ItemIndex, only valid if the function returns true
    @param Obj is the value of the object pointer of the selected item, only valid
           if the function returns true
    @returns true, if these values are valid }
 function TListBox_GetSelectedObject(_lst: TCustomListbox; out _Idx: integer; out _Obj: pointer): boolean;
 
-{: Deletes the selected listbox item
-   @param lst is the TCustomListbox (descendant) to read from
-   @param Idx is the listbox's ItemIndex, only valid if the function returns true
-          if the function returns true
-   @returns true, if these values are valid }
-function TListBox_DeleteSelected(_lst: TCustomListbox; out _Idx: integer): boolean; overload;
-function TListBox_DeleteSelected(_lst: TCustomListbox): boolean; overload;
-function TListBox_DeleteSelected(_lst: TCustomListBox; out _s: string): boolean; overload;
-
 {: Gets the caption of the given or selected item in the RadioGroup
    @param rg is the TCustomRadioGroup descendant to read
    @param Caption returns a string with the requested caption with
@@ -848,33 +839,6 @@
     _Obj := _lst.Items.Objects[_Idx];
 end;
 
-function TListBox_DeleteSelected(_lst: TCustomListbox; out _Idx: integer): boolean;
-begin
-  _Idx := _lst.ItemIndex;
-  Result := _Idx <> -1;
-  if Result then
-    _lst.Items.Delete(_Idx);
-end;
-
-function TListBox_DeleteSelected(_lst: TCustomListBox; out _s: string): boolean; overload;
-var
-  Idx: Integer;
-begin
-  Idx := _lst.ItemIndex;
-  Result := Idx <> -1;
-  if Result then begin
-    _s := _lst.Items[Idx];
-    _lst.Items.Delete(Idx);
-  end;
-end;
-
-function TListBox_DeleteSelected(_lst: TCustomListbox): boolean;
-var
-  Idx: integer;
-begin
-  Result := TListBox_DeleteSelected(_lst, Idx);
-end;
-
 function TComboBox_Select(_cmb: TCustomComboBox; const _Item: string; _DefaultIdx: integer = -1): integer;
 begin
   Result := _Cmb.Items.IndexOf(_Item);



From twm at mail.berlios.de  Thu Nov  1 15:19:18 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 15:19:18 +0100
Subject: [Dzchart-svncheckins] r233 - in utilities/dzCmdLineParser/trunk: .
	src tests
Message-ID: <200711011419.lA1EJIkl014029@sheep.berlios.de>

Author: twm
Date: 2007-11-01 15:19:11 +0100 (Thu, 01 Nov 2007)
New Revision: 233

Added:
   utilities/dzCmdLineParser/trunk/tests/
   utilities/dzCmdLineParser/trunk/tests/CmdLineParserTest.dpr
   utilities/dzCmdLineParser/trunk/tests/CmdLineParserTest.dproj
   utilities/dzCmdLineParser/trunk/tests/u_dzCmdLineParser_UnitTest.pas
   utilities/dzCmdLineParser/trunk/tests/u_dzGetOpt_UnitTest.pas
Removed:
   utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dpr
   utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dproj
   utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser_UnitTest.pas
   utilities/dzCmdLineParser/trunk/src/u_dzGetOpt_UnitTest.pas
Log:
moved test code to subdir tests

Deleted: utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dpr
===================================================================
--- utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dpr	2007-11-01 14:12:16 UTC (rev 232)
+++ utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dpr	2007-11-01 14:19:11 UTC (rev 233)
@@ -1,41 +0,0 @@
-program CmdLineParserTest;
-{
-
-  Delphi DUnit Test Project
-  -------------------------
-  This project contains the DUnit test framework and the GUI/Console test runners.
-  Add "CONSOLE_TESTRUNNER" to the conditional defines entry in the project options 
-  to use the console test runner.  Otherwise the GUI test runner will be used by 
-  default.
-
-}
-
-{$IFDEF CONSOLE_TESTRUNNER}
-{$APPTYPE CONSOLE}
-{$ENDIF}
-
-uses
-  Forms,
-  TestFramework,
-  GUITestRunner,
-  TextTestRunner,
-  u_dzCmdLineParser_UnitTest in 'u_dzCmdLineParser_UnitTest.pas',
-  u_dzCmdLineParser in 'u_dzCmdLineParser.pas',
-  u_dzGetOpt in 'u_dzGetOpt.pas',
-  u_dzOptionDescList in 'u_dzOptionDescList.pas',
-  u_dzParamDescList in 'u_dzParamDescList.pas',
-  u_dzParamFoundList in 'u_dzParamFoundList.pas',
-  u_dzOptionNameList in 'u_dzOptionNameList.pas',
-  u_dzOptionFoundList in 'u_dzOptionFoundList.pas',
-  u_dzGetOpt_UnitTest in 'u_dzGetOpt_UnitTest.pas';
-
-{$R *.RES}
-
-begin
-  Application.Initialize;
-  if IsConsole then
-    TextTestRunner.RunRegisteredTests
-  else
-    GUITestRunner.RunRegisteredTests;
-end.
-

Deleted: utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dproj
===================================================================
--- utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dproj	2007-11-01 14:12:16 UTC (rev 232)
+++ utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dproj	2007-11-01 14:19:11 UTC (rev 233)
@@ -1,121 +0,0 @@
-?<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <PropertyGroup>
-    <ProjectGuid>{ff87c54f-7bb3-4fb0-8be9-da726c81d33c}</ProjectGuid>
-    <MainSource>CmdLineParserTest.dpr</MainSource>
-    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
-    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <DCC_DCCCompiler>DCC32</DCC_DCCCompiler>
-    <DCC_DependencyCheckOutputName>..\CmdLineParserTest.exe</DCC_DependencyCheckOutputName>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
-    <Version>7.0</Version>
-    <DCC_DebugInformation>False</DCC_DebugInformation>
-    <DCC_LocalDebugSymbols>False</DCC_LocalDebugSymbols>
-    <DCC_Optimize>False</DCC_Optimize>
-    <DCC_SymbolReferenceInfo>0</DCC_SymbolReferenceInfo>
-    <DCC_ImageBase>700000</DCC_ImageBase>
-    <DCC_UnitSearchPath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_UnitSearchPath>
-    <DCC_ResourcePath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_ResourcePath>
-    <DCC_ObjPath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_ObjPath>
-    <DCC_IncludePath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_IncludePath>
-    <DCC_Define>_CONSOLE_TESTRUNNER;RELEASE</DCC_Define>
-    <DCC_SYMBOL_PLATFORM>False</DCC_SYMBOL_PLATFORM>
-    <DCC_UNIT_PLATFORM>False</DCC_UNIT_PLATFORM>
-    <DCC_Description>RTS Highlighter Extensions</DCC_Description>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <Version>7.0</Version>
-    <DCC_Optimize>False</DCC_Optimize>
-    <DCC_Define>_CONSOLE_TESTRUNNER;DEBUG</DCC_Define>
-    <DCC_SYMBOL_PLATFORM>False</DCC_SYMBOL_PLATFORM>
-    <DCC_UNIT_PLATFORM>False</DCC_UNIT_PLATFORM>
-    <DCC_Description>RTS Highlighter Extensions</DCC_Description>
-    <DCC_UnitSearchPath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_UnitSearchPath>
-    <DCC_ResourcePath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_ResourcePath>
-    <DCC_ObjPath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_ObjPath>
-    <DCC_IncludePath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_IncludePath>
-    <DCC_ExeOutput>..</DCC_ExeOutput>
-    <DCC_DcuOutput>..\dcu</DCC_DcuOutput>
-    <DCC_ObjOutput>..\dcu</DCC_ObjOutput>
-    <DCC_HppOutput>..\dcu</DCC_HppOutput>
-  </PropertyGroup>
-  <ProjectExtensions>
-    <Borland.Personality>Delphi.Personality</Borland.Personality>
-    <Borland.ProjectType />
-    <BorlandProject>
-<BorlandProject><Delphi.Personality><Parameters><Parameters Name="HostApplication">C:\Delphi7\Bin\delphi32.exe</Parameters><Parameters Name="UseLauncher">False</Parameters><Parameters Name="LoadAllSymbols">True</Parameters><Parameters Name="LoadUnspecifiedSymbols">False</Parameters></Parameters><Language><Language Name="RootDir">C:\Delphi7\Bin\</Language></Language><VersionInfo><VersionInfo Name="IncludeVerInfo">True</VersionInfo><VersionInfo Name="AutoIncBuild">False</VersionInfo><VersionInfo Name="MajorVer">1</VersionInfo><VersionInfo Name="MinorVer">0</VersionInfo><VersionInfo Name="Release">0</VersionInfo><VersionInfo Name="Build">0</VersionInfo><VersionInfo Name="Debug">False</VersionInfo><VersionInfo Name="PreRelease">False</VersionInfo><VersionInfo Name="Special">False</VersionInfo><VersionInfo Name="Private">False</VersionInfo><VersionInfo Name="DLL">True</VersionInfo><VersionInfo Name="Locale">4105</VersionInfo><VersionInfo Name="CodePage">1252</VersionInfo></Versi!
 onInfo><VersionInfoKeys><VersionInfoKeys Name="CompanyName"></VersionInfoKeys><VersionInfoKeys Name="FileDescription"></VersionInfoKeys><VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="InternalName"></VersionInfoKeys><VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys><VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys><VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys><VersionInfoKeys Name="ProductName"></VersionInfoKeys><VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="Comments"></VersionInfoKeys></VersionInfoKeys><Excluded_Packages>
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcldb100.bpl">Borland Database Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\bin\dclado100.bpl">Borland ADO DB Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcldbx100.bpl">Borland dbExpress Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclib100.bpl">Borland InterBase Express Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclnet100.bpl">Borland Internet Components</Excluded_Packages>
-      <Excluded_Packages Name="C:\Program Files\Borland\BDS\4.0\Bin\dclIndyCore100.bpl">Indy 10 Core Design Time</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclIndyProtocols100.bpl">Indy 10 Protocols Design Time</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclmid100.bpl">Borland MyBase DataAccess Components</Excluded_Packages>
-      <Excluded_Packages Name="C:\Program Files\Borland\BDS\4.0\Bin\dclbde100.bpl">Borland BDE DB Components</Excluded_Packages>
-      <Excluded_Packages Name="C:\Program Files\Borland\BDS\4.0\Bin\dbx100.bpl">Borland SQL Explorer UI Package</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\applet100.bpl">Borland Control Panel Applet Package</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclact100.bpl">Borland ActionBar Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclsoap100.bpl">Borland SOAP Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\bcbie100.bpl">Borland C++Builder Internet Explorer 5 Components Package</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcltee100.bpl">TeeChart Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcldbxcds100.bpl">Borland SimpleDataset Component (DBX)</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclIntraweb_80_100.bpl">Intraweb 8.0 Design Package for Borland Development Studio 2006</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcloffice2k100.bpl">Microsoft Office 2000 Sample Automation Server Wrapper Components</Excluded_Packages>
-      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclie100.bpl">Internet Explorer Components</Excluded_Packages>
-    </Excluded_Packages><Source><Source Name="MainSource">CmdLineParserTest.dpr</Source></Source></Delphi.Personality></BorlandProject></BorlandProject>
-  </ProjectExtensions>
-  <Import Project="$(MSBuildBinPath)\Borland.Delphi.Targets" />
-  <ItemGroup>
-    <DelphiCompile Include="CmdLineParserTest.dpr">
-      <MainSource>MainSource</MainSource>
-    </DelphiCompile>
-    <DCCReference Include="u_dzCmdLineParser.pas" />
-    <DCCReference Include="u_dzCmdLineParser_UnitTest.pas" />
-    <DCCReference Include="u_dzGetOpt.pas" />
-    <DCCReference Include="u_dzGetOpt_UnitTest.pas" />
-    <DCCReference Include="u_dzOptionDescList.pas" />
-    <DCCReference Include="u_dzOptionFoundList.pas" />
-    <DCCReference Include="u_dzOptionNameList.pas" />
-    <DCCReference Include="u_dzParamDescList.pas" />
-    <DCCReference Include="u_dzParamFoundList.pas" />
-  </ItemGroup>
-</Project>
\ No newline at end of file

Deleted: utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser_UnitTest.pas
===================================================================
--- utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser_UnitTest.pas	2007-11-01 14:12:16 UTC (rev 232)
+++ utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser_UnitTest.pas	2007-11-01 14:19:11 UTC (rev 233)
@@ -1,1006 +0,0 @@
-{: Unit tests for the TCmdLineParser and the state machine it uses.
-   @author Thomas Mueller <http://www.dummzeuch.de> }
-unit u_dzCmdLineParser_UnitTest;
-
-interface
-
-uses
-  SysUtils,
-  Classes,
-  TestFramework,
-  u_dzCmdLineParser;
-
-type
-  TEngineStateClass = TClass;
-  TCharSet = set of Char;
-
-type
-  ITestEngineContext = interface(IEngineContext)['{1680AC62-C4AE-4EF9-9B6F-07779E4B6D87}']
-    function GetOptionPart: string;
-    function GetParamPart: string;
-    function GetOption: string;
-    function GetParam: string;
-  end;
-
-type
-  TTestContext = class(TInterfacedObject, ITestEngineContext)
-  private
-    FInput: string;
-    FReadIdx: integer;
-    FOptionPart: string;
-    FParamPart: string;
-    FOption: string;
-    FParam: string;
-  public
-    constructor Create(const _Input: string);
-    function GetNextChar: char;
-    procedure AddToOption(_c: char);
-    procedure AddToParameter(_c: char);
-    procedure HandleCmdLinePart;
-    function GetOptionPart: string;
-    function GetParamPart: string;
-    function GetOption: string;
-    function GetParam: string;
-  end;
-
-type
-  TTestEngineState = class(TTestCase)
-  private
-    FState: IEngineState;
-    FContext: ITestEngineContext;
-  protected
-    procedure testChar(_c: char; _ExpectedState: TClass; const _ExpectedOptionPart: string = '';
-      const _ExpectedParamPart: string = ''; const _ExpectedOption: string = '';
-      const _ExpectedParam: string = '');
-  public
-  published
-    procedure testNUL; virtual;
-  end;
-
-  TTestEndState = class(TTestEngineState)
-  published
-    procedure testNUL; override;
-  end;
-
-  TTestSpaceState = class(TTestEngineState)
-  private
-  public
-    procedure SetUp; override;
-  published
-    procedure testDash;
-    procedure testParam;
-    procedure testQuote;
-    procedure testSpace;
-    procedure testNUL; override;
-  end;
-
-  TTestParamState = class(TTestEndState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testSpace;
-    procedure testQuote;
-  end;
-
-  TTestQuotedParamState = class(TTestEngineState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testNotQuote;
-    procedure testQuote;
-  end;
-
-  TTestDashState = class(TTestEngineState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testDash;
-    procedure testAlphanumeric;
-  end;
-
-  TTestDoubleDashState = class(TTestEngineState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testAlphanumeric;
-  end;
-
-  TTestShortOption = class(TTestEndState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testSwitch;
-    procedure testSpace;
-  end;
-
-  TTestShortSwitchState = class(TTestEndState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testSpace;
-  end;
-
-  TTestShortParamState = class(TTestEndState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testSpace;
-    procedure testQuote;
-    procedure testDash;
-  end;
-
-  TTestQuotedShortParamState = class(TTestEngineState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testQuote;
-  end;
-
-  TTestLongOptionState = class(TTestEndState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testEquals;
-    procedure testSpace;
-    procedure testError;
-    procedure testInLongOption;
-  end;
-
-  TTestLongParamState = class(TTestEndState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testQuote;
-    procedure testSpace;
-    procedure testInLongParam;
-  end;
-
-  TTestQuotedLongParamState = class(TTestEngineState)
-  public
-    procedure SetUp; override;
-  published
-    procedure testQuote;
-    procedure testInQuotedLongParam;
-  end;
-
-  TTestCmdlineParser = class(TTestCase)
-  private
-    FOptions: TStrings;
-    FParams: TStrings;
-  public
-    procedure SetUp; override;
-    procedure TearDown; override;
-  end;
-
-  TTestCmdLineParserParams = class(TTestCmdlineParser)
-  published
-    procedure testEmpty;
-    procedure testOneParam;
-    procedure testQuotedParam;
-    procedure testQuotedParamWithSpace;
-    procedure testEmbeddedQuote;
-    procedure testEmbeddedQuotedString;
-    procedure testEmbeddedUnquotedString;
-    procedure testEmbeddedDoubleQuote;
-    procedure testTwoParams;
-    procedure testTwoParamsMultipleSpaces;
-    procedure testTwoQuotedparams;
-    procedure testTwoQuotedparamsWithSpace;
-  end;
-
-  TTestCmdLineParserSwitches = class(TTestCmdlineParser)
-  published
-    procedure testOneSwitch;
-    procedure testTwoSwitches;
-    procedure testQuotedSwitch;
-  end;
-
-  TTestCmdLineParserShortOptions = class(TTestCmdlineParser)
-  published
-    procedure testOneShortOption;
-    procedure testTwoShortOptions;
-    procedure testShortOptionParam;
-    procedure testShortOptionQuotedParam;
-    procedure testShortOptionParamEmbeddedQuote;
-    procedure testShortOptionParamEmbeddedQuotedString;
-    procedure testShortOptionParamEmbeddedDoubleQuote;
-    procedure testTwoShortOptionParams;
-    procedure testOptionWithDash;
-  end;
-
-  TTestCmdLineParserLongOptions = class(TTestCmdlineParser)
-  published
-    procedure testOneLongOption;
-    procedure testTowLongOptions;
-    procedure testLongOptionParam;
-    procedure testLongOptionQuotedParam;
-    procedure testTwoLongOptionParams;
-  end;
-
-  TTestCmdLineParserMixed = class(TTestCmdlineParser)
-  published
-    procedure testLongShortOptions;
-    procedure testShortLongOptions;
-    procedure testParamShortOptions;
-    procedure testParamLongOptions;
-    procedure testShortOptionParam;
-    procedure testLongOptionParam;
-    procedure testLongOptionParamParam;
-  end;
-
-  TTestCmdLineParserDuplicates = class(TTestCmdlineParser)
-  published
-    procedure testDuplicateLongOptions;
-    procedure testDuplicateShortOptions;
-    procedure testDuplicateOptionValues;
-    procedure testDuplicateParams;
-  end;
-
-implementation
-
-{ TTestContext }
-
-constructor TTestContext.Create(const _Input: string);
-begin
-  inherited Create;
-  FInput := _Input;
-  FReadIdx := 0;
-end;
-
-procedure TTestContext.AddToOption(_c: char);
-begin
-  FOptionPart := FOptionPart + _c;
-end;
-
-procedure TTestContext.AddToParameter(_c: char);
-begin
-  FParamPart := FParamPart + _c;
-end;
-
-function TTestContext.GetNextChar: char;
-begin
-  if FReadIdx >= Length(FInput) then
-    Result := #0
-  else begin
-    Inc(FReadIdx);
-    Result := FInput[FReadIdx];
-  end;
-end;
-
-function TTestContext.GetOption: string;
-begin
-  Result := FOption;
-end;
-
-function TTestContext.GetOptionPart: string;
-begin
-  Result := FOptionPart;
-end;
-
-function TTestContext.GetParam: string;
-begin
-  Result := FParam;
-end;
-
-function TTestContext.GetParamPart: string;
-begin
-  Result := FParamPart;
-end;
-
-procedure TTestContext.HandleCmdLinePart;
-begin
-  if FOptionPart <> '' then
-    FOption := FOptionPart + '=' + FParamPart
-  else
-    FParam := FParamPart;
-  FOptionPart := '';
-  FParamPart := '';
-end;
-
-{ TTestEngineState }
-
-procedure TTestEngineState.testNUL;
-begin
-  testChar(#0, TEngineStateError);
-end;
-
-procedure TTestEngineState.testChar(_c: char; _ExpectedState: TClass; const _ExpectedOptionPart: string = '';
-  const _ExpectedParamPart: string = ''; const _ExpectedOption: string = '';
-  const _ExpectedParam: string = '');
-var
-  State: IEngineState;
-  s: string;
-begin
-  s := _c;
-  s := PChar(s);
-  FContext := TTestContext.Create(s);
-  State := FState.Execute(FContext);
-  CheckNotNull(State, Format('unexpected nil result parsing "%s" (#%.2d)', [s, Ord(_c)]));
-  CheckEquals(_ExpectedState.ClassName, State.GetClassName,
-    Format('unexpected class parsing "%s" (#%.2d)', [s, Ord(_c)]));
-  CheckEquals(#0, FContext.GetNextChar, 'state did not consume a char');
-  CheckEquals(_ExpectedOptionPart, FContext.GetOptionPart, 'OptionPart');
-  CheckEquals(_ExpectedParamPart, FContext.GetParamPart, 'ParamPart');
-  CheckEquals(_ExpectedOption, FContext.GetOption, 'Option');
-  CheckEquals(_ExpectedParam, FContext.GetParam, 'Param');
-end;
-
-{ TTestEndState }
-
-procedure TTestEndState.testNUL;
-begin
-  testChar(#0, TEngineStateSpace);
-end;
-
-{ TTestSpaceState }
-
-procedure TTestSpaceState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateSpace.Create;
-end;
-
-procedure TTestSpaceState.testDash;
-begin
-  testChar('-', TEngineStateDash);
-end;
-
-procedure TTestSpaceState.testNUL;
-var
-  State: IEngineState;
-begin
-  FContext := TTestContext.Create('');
-  State := FState.Execute(FContext);
-  CheckNull(State, 'end state expected');
-  CheckEquals('', FContext.GetOptionPart, 'OptionPart not empty');
-  CheckEquals('', FContext.GetParamPart, 'ParamPart not empty');
-  CheckEquals('', FContext.GetOption, 'Option not empty');
-  CheckEquals('', FContext.GetParam, 'Param not empty');
-end;
-
-procedure TTestSpaceState.testParam;
-const
-  CHARS_TO_TEST = ALLCHARS_BUT_NULL - ['-', '"', ' '];
-var
-  c: char;
-begin
-  for c in CHARS_TO_TEST do
-    testChar(c, TEngineStateParam, '', c);
-end;
-
-procedure TTestSpaceState.testQuote;
-begin
-  testChar('"', TEngineStateQuotedParam, '', '"');
-end;
-
-procedure TTestSpaceState.testSpace;
-begin
-  testChar(' ', TEngineStateSpace);
-end;
-
-{ TTestParamState }
-
-procedure TTestParamState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateParam.Create;
-end;
-
-procedure TTestParamState.testQuote;
-begin
-  testChar('"', TEngineStateQuotedParam, '', '"');
-end;
-
-procedure TTestParamState.testSpace;
-begin
-  testChar(' ', TEngineStateSpace);
-end;
-
-{ TTestQuotedParamState }
-
-procedure TTestQuotedParamState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateQuotedParam.Create;
-end;
-
-procedure TTestQuotedParamState.testNotQuote;
-const
-  CHARS_TO_TEST = ALLCHARS_BUT_NULL - ['"'];
-var
-  c: char;
-begin
-  for c in CHARS_TO_TEST do
-    testChar(c, TEngineStateQuotedParam, '', c);
-end;
-
-procedure TTestQuotedParamState.testQuote;
-begin
-  testChar('"', TEngineStateParam, '', '"');
-end;
-
-{ TTestDashState }
-
-procedure TTestDashState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateDash.Create;
-end;
-
-procedure TTestDashState.testAlphanumeric;
-const
-  CHARS_TO_TEST = ALPHANUMERIC_CHARS;
-var
-  c: char;
-begin
-  for c in CHARS_TO_TEST do
-    testChar(c, TEngineStateShortOption, c, '');
-end;
-
-procedure TTestDashState.testDash;
-begin
-  testChar('-', TEngineStateDoubleDash);
-end;
-
-{ TTestShortOption }
-
-procedure TTestShortOption.SetUp;
-begin
-  inherited;
-  FState := TEngineStateShortOption.Create;
-end;
-
-procedure TTestShortOption.testSpace;
-begin
-  testChar(' ', TEngineStateShortParam);
-end;
-
-procedure TTestShortOption.testSwitch;
-begin
-  testChar('-', TEngineStateShortSwitch, '', '-');
-  testChar('+', TEngineStateShortSwitch, '', '+');
-end;
-
-{ TTestShortSwitch }
-
-procedure TTestShortSwitchState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateShortSwitch.Create;
-end;
-
-procedure TTestShortSwitchState.testSpace;
-begin
-  testChar(' ', TEngineStateSpace);
-end;
-
-{ TTestShortParam }
-
-procedure TTestShortParamState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateShortParam.Create;
-end;
-
-procedure TTestShortParamState.testDash;
-begin
-  testChar('-', TEngineStateDash);
-end;
-
-procedure TTestShortParamState.testQuote;
-begin
-  testChar('"', TEngineStateQuotedShortParam, '', '"');
-end;
-
-procedure TTestShortParamState.testSpace;
-begin
-  testChar(' ', TEngineStateSpace);
-end;
-
-{ TTestQuotedShortParam }
-
-procedure TTestQuotedShortParamState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateQuotedShortParam.Create;
-end;
-
-procedure TTestQuotedShortParamState.testQuote;
-begin
-  testChar('"', TEngineStateShortParam, '', '"');
-end;
-
-{ TTestDoubleDashState }
-
-procedure TTestDoubleDashState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateDoubleDash.Create;
-end;
-
-procedure TTestDoubleDashState.testAlphanumeric;
-const
-  CHARS_TO_TEST = ALPHANUMERIC_CHARS;
-var
-  c: char;
-begin
-  for c in CHARS_TO_TEST do
-    testChar(c, TEngineStateLongOption, c);
-end;
-
-{ TTestLongOptionState }
-
-procedure TTestLongOptionState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateLongOption.Create;
-end;
-
-procedure TTestLongOptionState.testEquals;
-begin
-  testChar('=', TEngineStateLongParam);
-end;
-
-procedure TTestLongOptionState.testError;
-begin
-  testChar('"', TEngineStateError);
-  testChar('''', TEngineStateError);
-end;
-
-procedure TTestLongOptionState.testInLongOption;
-const
-  CHARS_TO_TEST = ALLCHARS_BUT_NULL - ['"', '''', ' ', '='];
-var
-  c: char;
-begin
-  for c in CHARS_TO_TEST do
-    testChar(c, TEngineStateLongOption, c);
-end;
-
-procedure TTestLongOptionState.testSpace;
-begin
-  testChar(' ', TEngineStateSpace);
-end;
-
-{ TTestLongParamState }
-
-procedure TTestLongParamState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateLongParam.Create;
-end;
-
-procedure TTestLongParamState.testInLongParam;
-const
-  CHARS_TO_TEST = ALLCHARS_BUT_NULL - [' ', '"'];
-var
-  c: char;
-begin
-  for c in CHARS_TO_TEST do
-    testChar(c, TEngineStateLongParam, '', c);
-end;
-
-procedure TTestLongParamState.testQuote;
-begin
-  testChar('"', TEngineStateQuotedLongParam, '', '"');
-end;
-
-procedure TTestLongParamState.testSpace;
-begin
-  testChar(' ', TEngineStateSpace);
-end;
-
-{ TTestQuotedLongParamState }
-
-procedure TTestQuotedLongParamState.SetUp;
-begin
-  inherited;
-  FState := TEngineStateQuotedLongParam.Create;
-end;
-
-procedure TTestQuotedLongParamState.testInQuotedLongParam;
-const
-  CHARS_TO_TEST = ALLCHARS_BUT_NULL - ['"'];
-var
-  c: char;
-begin
-  for c in CHARS_TO_TEST do
-    testChar(c, TEngineStateQuotedLongParam, '', c);
-end;
-
-procedure TTestQuotedLongParamState.testQuote;
-begin
-  testChar('"', TEngineStateLongParam, '', '"');
-end;
-
-{ TTestCmdlineParser }
-
-procedure TTestCmdlineParser.SetUp;
-begin
-  inherited;
-  FOptions := TStringList.Create;
-  FParams := TStringList.Create;
-end;
-
-procedure TTestCmdlineParser.TearDown;
-begin
-  inherited;
-  FParams.Free;
-  FOptions.Free;
-end;
-
-{ TTestCmdLineParserParams }
-
-procedure TTestCmdLineParserParams.testEmbeddedDoubleQuote;
-begin
-  TCmdLineParser.Execute('one""two', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('one""two', FParams[0]);
-end;
-
-procedure TTestCmdLineParserParams.testEmbeddedQuote;
-begin
-  TCmdLineParser.Execute('one"two"', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('one"two"', FParams[0]);
-end;
-
-procedure TTestCmdLineParserParams.testEmbeddedQuotedString;
-begin
-  TCmdLineParser.Execute('one"two"three', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('one"two"three', FParams[0]);
-end;
-
-procedure TTestCmdLineParserParams.testEmbeddedUnquotedString;
-begin
-  TCmdLineParser.Execute('"one"two"three"', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('"one"two"three"', FParams[0]);
-end;
-
-procedure TTestCmdLineParserParams.testEmpty;
-begin
-  TCmdLineParser.Execute('', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-end;
-
-procedure TTestCmdLineParserParams.testOneParam;
-begin
-  TCmdLineParser.Execute('one', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('one', FParams[0]);
-end;
-
-procedure TTestCmdLineParserParams.testQuotedParam;
-begin
-  TCmdLineParser.Execute('"one"', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('"one"', FParams[0]);
-end;
-
-procedure TTestCmdLineParserParams.testQuotedParamWithSpace;
-begin
-  TCmdLineParser.Execute('"one two"', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('"one two"', FParams[0]);
-end;
-
-procedure TTestCmdLineParserParams.testTwoParams;
-begin
-  TCmdLineParser.Execute('one two', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(2, FParams.Count);
-  CheckEquals('one', FParams[0]);
-  CheckEquals('two', FParams[1]);
-end;
-
-procedure TTestCmdLineParserParams.testTwoParamsMultipleSpaces;
-begin
-  TCmdLineParser.Execute('one    two', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(2, FParams.Count);
-  CheckEquals('one', FParams[0]);
-  CheckEquals('two', FParams[1]);
-end;
-
-procedure TTestCmdLineParserParams.testTwoQuotedparams;
-begin
-  TCmdLineParser.Execute('"one" "two"', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(2, FParams.Count);
-  CheckEquals('"one"', FParams[0]);
-  CheckEquals('"two"', FParams[1]);
-end;
-
-procedure TTestCmdLineParserParams.testTwoQuotedparamsWithSpace;
-begin
-  TCmdLineParser.Execute('"one" "two   three"', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(2, FParams.Count);
-  CheckEquals('"one"', FParams[0]);
-  CheckEquals('"two   three"', FParams[1]);
-end;
-
-{ TTestCmdLineParserSwitches }
-
-procedure TTestCmdLineParserSwitches.testOneSwitch;
-begin
-  TCmdLineParser.Execute('-a+', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=+', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserSwitches.testQuotedSwitch;
-begin
-  TCmdLineParser.Execute('"-a+"', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('"-a+"', FParams[0]);
-end;
-
-procedure TTestCmdLineParserSwitches.testTwoSwitches;
-begin
-  TCmdLineParser.Execute('-a+ -b-', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=+', FOptions[0]);
-  CheckEquals('b=-', FOptions[1]);
-end;
-
-{ TTestCmdLineParserShortOptions }
-
-procedure TTestCmdLineParserShortOptions.testOneShortOption;
-begin
-  TCmdLineParser.Execute('-a', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testOptionWithDash;
-begin
-  TCmdLineParser.Execute('--hallo-welt', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('hallo-welt=', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testShortOptionParam;
-begin
-  TCmdLineParser.Execute('-a one', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=one', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testShortOptionParamEmbeddedDoubleQuote;
-begin
-  TCmdLineParser.Execute('-a one""two', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=one""two', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testShortOptionParamEmbeddedQuote;
-begin
-  TCmdLineParser.Execute('-a one"two"', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=one"two"', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testShortOptionParamEmbeddedQuotedString;
-begin
-  TCmdLineParser.Execute('-a one"two"three', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=one"two"three', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testShortOptionQuotedParam;
-begin
-  TCmdLineParser.Execute('-a "one"', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a="one"', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testTwoShortOptions;
-begin
-  TCmdLineParser.Execute('-a -b', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=', FOptions[0]);
-  CheckEquals('b=', FOptions[1]);
-end;
-
-procedure TTestCmdLineParserShortOptions.testTwoShortOptionParams;
-begin
-  TCmdLineParser.Execute('-a one -b "two three"', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=one', FOptions[0]);
-  CheckEquals('b="two three"', FOptions[1]);
-end;
-
-{ TTestCmdLineParserLongOptions }
-
-procedure TTestCmdLineParserLongOptions.testLongOptionParam;
-begin
-  TCmdLineParser.Execute('--one=two', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('one=two', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserLongOptions.testLongOptionQuotedParam;
-begin
-  TCmdLineParser.Execute('--one="two"', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('one="two"', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserLongOptions.testOneLongOption;
-begin
-  TCmdLineParser.Execute('--one', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('one=', FOptions[0]);
-end;
-
-procedure TTestCmdLineParserLongOptions.testTowLongOptions;
-begin
-  TCmdLineParser.Execute('--one --two', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('one=', FOptions[0]);
-  CheckEquals('two=', FOptions[1]);
-end;
-
-procedure TTestCmdLineParserLongOptions.testTwoLongOptionParams;
-begin
-  TCmdLineParser.Execute('--one=two     --three=four', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('one=two', FOptions[0]);
-  CheckEquals('three=four', FOptions[1]);
-end;
-
-{ TTestCmdLineParserMixed }
-
-procedure TTestCmdLineParserMixed.testLongOptionParam;
-begin
-  TCmdLineParser.Execute('--one two', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('one=', FOptions[0]);
-  CheckEquals('two', FParams[0]);
-end;
-
-procedure TTestCmdLineParserMixed.testLongOptionParamParam;
-begin
-  TCmdLineParser.Execute('--one=two three', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('one=two', FOptions[0]);
-  CheckEquals('three', FParams[0]);
-end;
-
-procedure TTestCmdLineParserMixed.testLongShortOptions;
-begin
-  TCmdLineParser.Execute('--one -a', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('one=', FOptions[0]);
-  CheckEquals('a=', FOptions[1]);
-end;
-
-procedure TTestCmdLineParserMixed.testParamLongOptions;
-begin
-  TCmdLineParser.Execute('one --two', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('two=', FOptions[0]);
-  CheckEquals('one', FParams[0]);
-end;
-
-procedure TTestCmdLineParserMixed.testParamShortOptions;
-begin
-  TCmdLineParser.Execute('one -a', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('a=', FOptions[0]);
-  CheckEquals('one', FParams[0]);
-end;
-
-procedure TTestCmdLineParserMixed.testShortLongOptions;
-begin
-  TCmdLineParser.Execute('-a --one', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=', FOptions[0]);
-  CheckEquals('one=', FOptions[1]);
-end;
-
-procedure TTestCmdLineParserMixed.testShortOptionParam;
-begin
-  TCmdLineParser.Execute('-a one two', FOptions, FParams);
-  CheckEquals(1, FOptions.Count);
-  CheckEquals(1, FParams.Count);
-  CheckEquals('a=one', FOptions[0]);
-  CheckEquals('two', FParams[0]);
-end;
-
-{ TTestCmdLineParserDuplicates }
-
-procedure TTestCmdLineParserDuplicates.testDuplicateLongOptions;
-begin
-  TCmdLineParser.Execute('--one=two --one=three', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('one=two', FOptions[0]);
-  CheckEquals('one=three', FOptions[1]);
-end;
-
-procedure TTestCmdLineParserDuplicates.testDuplicateOptionValues;
-begin
-  TCmdLineParser.Execute('-a two -a three', FOptions, FParams);
-  CheckEquals(2, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=two', FOptions[0]);
-  CheckEquals('a=three', FOptions[1]);
-end;
-
-procedure TTestCmdLineParserDuplicates.testDuplicateParams;
-begin
-  TCmdLineParser.Execute('one one one', FOptions, FParams);
-  CheckEquals(0, FOptions.Count);
-  CheckEquals(3, FParams.Count);
-  CheckEquals('one', FParams[0]);
-  CheckEquals('one', FParams[1]);
-  CheckEquals('one', FParams[2]);
-end;
-
-procedure TTestCmdLineParserDuplicates.testDuplicateShortOptions;
-begin
-  TCmdLineParser.Execute('-a -a -a -a', FOptions, FParams);
-  CheckEquals(4, FOptions.Count);
-  CheckEquals(0, FParams.Count);
-  CheckEquals('a=', FOptions[0]);
-  CheckEquals('a=', FOptions[1]);
-  CheckEquals('a=', FOptions[2]);
-  CheckEquals('a=', FOptions[3]);
-end;
-
-initialization
-  RegisterTest('states', TTestSpaceState.Suite);
-  RegisterTest('states', TTestParamState.Suite);
-  RegisterTest('states', TTestQuotedParamState.Suite);
-  RegisterTest('states', TTestDashState.Suite);
-  RegisterTest('states', TTestShortOption.Suite);
-  RegisterTest('states', TTestShortSwitchState.Suite);
-  RegisterTest('states', TTestShortParamState.Suite);
-  RegisterTest('states', TTestQuotedShortParamState.Suite);
-  RegisterTest('states', TTestDoubleDashState.Suite);
-  RegisterTest('states', TTestLongOptionState.Suite);
-  RegisterTest('states', TTestLongParamState.Suite);
-  RegisterTest('states', TTestQuotedLongParamState.Suite);
-  RegisterTest('parser', TTestCmdLineParserParams.Suite);
-  RegisterTest('parser', TTestCmdLineParserSwitches.Suite);
-  RegisterTest('parser', TTestCmdLineParserShortOptions.Suite);
-  RegisterTest('parser', TTestCmdLineParserLongOptions.Suite);
-  RegisterTest('parser', TTestCmdLineParserMixed.Suite);
-  RegisterTest('parser', TTestCmdLineParserDuplicates.Suite);
-end.
-

Deleted: utilities/dzCmdLineParser/trunk/src/u_dzGetOpt_UnitTest.pas
===================================================================
--- utilities/dzCmdLineParser/trunk/src/u_dzGetOpt_UnitTest.pas	2007-11-01 14:12:16 UTC (rev 232)
+++ utilities/dzCmdLineParser/trunk/src/u_dzGetOpt_UnitTest.pas	2007-11-01 14:19:11 UTC (rev 233)
@@ -1,602 +0,0 @@
-{: Unit tests for the TGetOpt.
-   @author Thomas Mueller <http://www.dummzeuch.de> }
-unit u_dzGetOpt_UnitTest;
-
-interface
-
-uses
-  TestFramework,
-  u_dzGetOpt,
-  u_dzParamDescList,
-  u_dzOptionFoundList,
-  u_dzOptionDescList,
-  Classes,
-  u_dzParamFoundList,
-  SysUtils,
-  u_dzOptionNameList;
-
-type
-  TGetOptTest = class(TTestCase)
-  protected
-    FGetOpt: TGetOpt;
-    procedure ParseNone;
-    procedure ParseOne;
-    procedure ParseTwo;
-    procedure ParseThree;
-  public
-    procedure SetUp; override;
-    procedure TearDown; override;
-  end;
-
-type
-  TUnknownParamTest = class(TGetOptTest)
-  published
-    procedure testNoParamRegistered;
-    procedure testUnregisteredParam;
-    procedure testWindowsCmdLine;
-  end;
-
-type
-  TSingleParamTest = class(TGetOptTest)
-  public
-  published
-    procedure testParamGiven;
-    procedure testTwoParams;
-  end;
-
-type
-  TSingleRequiredParamTest = class(TSingleParamTest)
-  public
-    procedure SetUp; override;
-  published
-    procedure testParamMissing;
-  end;
-
-type
-  TSingleOptionalParamTest = class(TSingleParamTest)
-  public
-    procedure SetUp; override;
-  published
-    procedure testParamMissing;
-  end;
-
-type
-  TSingleParamMultipleTest = class(TGetOptTest)
-  private
-  public
-    procedure SetUp; override;
-  published
-    procedure testParamMissing;
-    procedure testOneParam;
-    procedure testTwoParams;
-    procedure testThreeParams;
-  end;
-
-type
-  TTwoParamsTest = class(TGetOptTest)
-  published
-    procedure testTwoParams;
-    procedure testThreeParams;
-  end;
-
-type
-  TTwoRequiredParamsTest = class(TTwoParamsTest)
-  public
-    procedure SetUp; override;
-  published
-    procedure testAllParamsMissing;
-    procedure testOneParam;
-  end;
-
-type
-  TTwoOptionalParamsTest = class(TTwoParamsTest)
-  public
-    procedure SetUp; override;
-  published
-    procedure testAllParamsMissing;
-    procedure testOneParam;
-  end;
-
-type
-  TRequiredAndOptionalParamTest = class(TTwoParamsTest)
-  public
-    procedure SetUp; override;
-  published
-    procedure testAllParamsMissing;
-    procedure testOneParam;
-  end;
-
-type
-  TOneParamRequiredTwice = class(TGetOptTest)
-  public
-    procedure SetUp; override;
-  published
-    procedure testAllParamsMissing;
-    procedure testOneParam;
-    procedure testTwoParams;
-    procedure testThreeParams;
-  end;
-
-type
-  TRegisterOptionTest = class(TGetOptTest)
-  private
-    FInvalidChar: char;
-    procedure RegisterEmpty;
-    procedure RegisterHallo;
-    procedure RegisterHalloHallo;
-    procedure RegisterWithChar;
-    procedure RegisterStartChar;
-  published
-    procedure testDuplicateOption;
-    procedure testDuplicateName;
-    procedure testDuplicateSecondaryName;
-    procedure testRegisterInvalidOptionNames;
-  end;
-
-type
-  TOneOptionTest = class(TGetOptTest)
-  private
-    procedure GetUnknownOption;
-  public
-    procedure SetUp; override;
-  published
-    procedure testNotGiven;
-    procedure testGivenOnce;
-    procedure testGivenTwice;
-    procedure testGivenThrice;
-    procedure testUnkownOption;
-  end;
-
-implementation
-
-{ TGetOptTest }
-
-procedure TGetOptTest.SetUp;
-begin
-  inherited;
-  FGetOpt := TGetOpt.Create;
-end;
-
-procedure TGetOptTest.TearDown;
-begin
-  FGetOpt.Free;
-  inherited;
-end;
-
-procedure TGetOptTest.ParseNone;
-begin
-  FGetOpt.Parse('');
-end;
-
-procedure TGetOptTest.ParseTwo;
-begin
-  FGetOpt.Parse('one two');
-end;
-
-procedure TGetOptTest.ParseOne;
-begin
-  FGetOpt.Parse('one');
-end;
-
-procedure TGetOptTest.ParseThree;
-begin
-  FGetOpt.Parse('one two three');
-end;
-
-{ TUnknownParamTest }
-
-procedure TUnknownParamTest.testNoParamRegistered;
-var
-  s: string;
-begin
-  CheckFalse(FGetOpt.ParamPassed('hallo', s), 'result of ParamPassed(hallo)');
-  CheckEquals(0, FGetOpt.ParamPassed('hallo', nil), 'result of ParamPassed(hallo)');
-end;
-
-procedure TUnknownParamTest.testUnregisteredParam;
-var
-  s: string;
-begin
-  FGetOpt.RegisterParam('welt', 'welt');
-  CheckFalse(FGetOpt.ParamPassed('hallo', s), 'result of ParamPassed(hallo)');
-  CheckEquals(0, FGetOpt.ParamPassed('hallo', nil), 'result of ParamPassed(hallo)');
-end;
-
-procedure TUnknownParamTest.testWindowsCmdLine;
-begin
-  FGetOpt.Parse;
-end;
-
-{ TSingleParamTest }
-
-procedure TSingleParamTest.testParamGiven;
-var
-  s: string;
-begin
-  FGetOpt.Parse('one');
-  CheckTrue(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound');
-  CheckEquals('one', s, 'value of param');
-  CheckEquals(1, FGetOpt.ParamPassed('hallo', nil), 'result of ParamFound');
-end;
-
-procedure TSingleParamTest.testTwoParams;
-begin
-  CheckException(ParseTwo, ETooManyParams);
-end;
-
-{ TSingleRequiredParamTest }
-
-procedure TSingleRequiredParamTest.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterParam('hallo', 'hallo', 1, 1);
-end;
-
-procedure TSingleRequiredParamTest.testParamMissing;
-begin
-  CheckException(ParseNone, ETooFewParams);
-end;
-
-{ TSingleOptionalParamTest }
-
-procedure TSingleOptionalParamTest.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterParam('hallo', 'hallo', 0, 1);
-end;
-
-procedure TSingleOptionalParamTest.testParamMissing;
-var
-  s: string;
-begin
-  FGetOpt.Parse('');
-  CheckFalse(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound');
-  CheckEquals(0, FGetOpt.ParamPassed('hallo', nil), 'result of ParamFound');
-end;
-
-{ TSingleParamMultipleTest }
-
-procedure TSingleParamMultipleTest.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterParam('hallo', 'hallo', 1, 2);
-end;
-
-procedure TSingleParamMultipleTest.testOneParam;
-var
-  s: string;
-begin
-  FGetOpt.Parse('one');
-  CheckTrue(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound');
-  CheckEquals('one', s, 'value of param');
-  CheckEquals(1, FGetOpt.ParamPassed('hallo', nil), 'result of ParamFound');
-end;
-
-procedure TSingleParamMultipleTest.testParamMissing;
-begin
-  CheckException(ParseNone, ETooFewParams);
-end;
-
-procedure TSingleParamMultipleTest.testThreeParams;
-begin
-  CheckException(ParseThree, ETooManyParams);
-end;
-
-procedure TSingleParamMultipleTest.testTwoParams;
-var
-  s: string;
-  sl: TStringList;
-begin
-  FGetOpt.Parse('one two');
-  CheckFalse(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound');
-  sl := TStringList.Create;
-  try
-    CheckEquals(2, FGetOpt.ParamPassed('hallo', sl), 'result of ParamFound');
-    CheckEquals(2, sl.Count, 'string list count');
-    CheckEquals('one', sl[0], 'param one');
-    CheckEquals('two', sl[1], 'param two');
-  finally
-    sl.Free;
-  end;
-end;
-
-{ TTwoParamsTest }
-
-procedure TTwoParamsTest.testThreeParams;
-begin
-  CheckException(ParseThree, ETooManyParams);
-end;
-
-procedure TTwoParamsTest.testTwoParams;
-var
-  s: string;
-begin
-  ParseTwo;
-  CheckTrue(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound(hallo)');
-  CheckEquals('one', s, 'value of param hallo');
-  CheckTrue(FGetOpt.ParamPassed('welt', s), 'result of ParamFound(welt)');
-  CheckEquals('two', s, 'value of param welt');
-end;
-
-{ TTwoRequiredParamsTest }
-
-procedure TTwoRequiredParamsTest.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterParam('hallo', 'hallo');
-  FGetOpt.RegisterParam('welt', 'welt');
-end;
-
-procedure TTwoRequiredParamsTest.testAllParamsMissing;
-begin
-  CheckException(ParseNone, ETooFewParams);
-end;
-
-procedure TTwoRequiredParamsTest.testOneParam;
-begin
-  CheckException(ParseOne, ETooFewParams);
-end;
-
-{ TTwoOptionalParamsTest }
-
-procedure TTwoOptionalParamsTest.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterParam('hallo', 'hallo', 0, 1);
-  FGetOpt.RegisterParam('welt', 'welt', 0, 1);
-end;
-
-procedure TTwoOptionalParamsTest.testAllParamsMissing;
-var
-  s: string;
-begin
-  ParseNone;
-  CheckFalse(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound(hallo)');
-  CheckEquals(0, FGetOpt.ParamPassed('hallo', nil), 'result of ParamFound(hallo)');
-  CheckFalse(FGetOpt.ParamPassed('welt', s), 'result of ParamFound(welt)');
-  CheckEquals(0, FGetOpt.ParamPassed('welt', nil), 'result of ParamFound(welt)');
-end;
-
-procedure TTwoOptionalParamsTest.testOneParam;
-var
-  s: string;
-begin
-  ParseOne;
-  CheckTrue(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound(hallo)');
-  CheckEquals('one', s, 'value of param hallo');
-  CheckFalse(FGetOpt.ParamPassed('welt', s), 'result of ParamFound(welt)');
-end;
-
-{ TRequiredAndOptionalParamTest }
-
-procedure TRequiredAndOptionalParamTest.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterParam('hallo', 'hallo');
-  FGetOpt.RegisterParam('welt', 'welt', 0, 1);
-end;
-
-procedure TRequiredAndOptionalParamTest.testAllParamsMissing;
-begin
-  CheckException(ParseNone, ETooFewParams);
-end;
-
-procedure TRequiredAndOptionalParamTest.testOneParam;
-var
-  s: string;
-begin
-  ParseOne;
-  CheckTrue(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound(hallo)');
-  CheckEquals('one', s, 'value of param hallo');
-  CheckFalse(FGetOpt.ParamPassed('welt', s), 'result of ParamFound(welt)');
-end;
-
-{ TOneParamRequiredTwice }
-
-procedure TOneParamRequiredTwice.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterParam('hallo', 'hallo', 2, 2);
-end;
-
-procedure TOneParamRequiredTwice.testAllParamsMissing;
-begin
-  CheckException(ParseNone, ETooFewParams);
-end;
-
-procedure TOneParamRequiredTwice.testOneParam;
-begin
-  CheckException(ParseOne, ETooFewParams);
-end;
-
-procedure TOneParamRequiredTwice.testThreeParams;
-begin
-  CheckException(ParseThree, ETooManyParams);
-end;
-
-procedure TOneParamRequiredTwice.testTwoParams;
-var
-  s: string;
-  sl: TStringList;
-begin
-  ParseTwo;
-  CheckFalse(FGetOpt.ParamPassed('hallo', s), 'result of ParamFound(hallo)');
-  sl := TStringList.Create;
-  try
-    CheckEquals(2, FGetOpt.ParamPassed('hallo', sl), 'result of ParamFound(hallo)');
-    CheckEquals('one', sl[0], '1st value of param hallo');
-    CheckEquals('two', sl[1], '2nd value of param hallo');
-  finally
-    sl.Free;
-  end;
-end;
-
-{ TRegisterOptionTest }
-
-procedure TRegisterOptionTest.RegisterEmpty;
-begin
-  FGetOpt.RegisterOption('', 'hallo');
-end;
-
-procedure TRegisterOptionTest.RegisterHallo;
-begin
-  FGetOpt.RegisterOption('hallo', 'hallo');
-end;
-
-procedure TRegisterOptionTest.RegisterHalloHallo;
-begin
-  FGetOpt.RegisterOption(['hallo', 'hallo'], 'hallo');
-end;
-
-procedure TRegisterOptionTest.RegisterStartChar;
-begin
-  FGetOpt.RegisterOption(FInvalidChar + 'hallo', 'hallo');
-end;
-
-procedure TRegisterOptionTest.RegisterWithChar;
-begin
-  FGetOpt.RegisterOption('hallo' + FInvalidChar + 'welt', 'hallo welt');
-end;
-
-procedure TRegisterOptionTest.testDuplicateName;
-begin
-  CheckException(RegisterHalloHallo, EListError);
-end;
-
-procedure TRegisterOptionTest.testDuplicateOption;
-begin
-  RegisterHallo;
-  CheckException(RegisterHallo, EListError);
-end;
-
-procedure TRegisterOptionTest.testDuplicateSecondaryName;
-begin
-  FGetOpt.RegisterOption(['welt', 'hallo'], 'hallo welt');
-  CheckException(RegisterHallo, EListError);
-end;
-
-procedure TRegisterOptionTest.testRegisterInvalidOptionNames;
-begin
-  CheckException(RegisterEmpty, EOptionName);
-
-  FInvalidChar := ' ';
-  CheckException(RegisterWithChar, EOptionName);
-  CheckException(RegisterStartChar, EOptionName);
-
-  FInvalidChar := '+';
-  CheckException(RegisterWithChar, EOptionName);
-  CheckException(RegisterStartChar, EOptionName);
-
-  FInvalidChar := #10;
-  CheckException(RegisterWithChar, EOptionName);
-  CheckException(RegisterStartChar, EOptionName);
-
-  FInvalidChar := '-';
-  RegisterWithChar;
-  CheckException(RegisterStartChar, EOptionName);
-
-  FInvalidChar := '_';
-  RegisterWithChar;
-  CheckException(RegisterStartChar, EOptionName);
-end;
-
-{ TOneOptionTest }
-
-procedure TOneOptionTest.GetUnknownOption;
-begin
-  CheckEquals(0, FGetOpt.OptionPassed('welt', nil), 'result of OptionPassed(welt)');
-end;
-
-procedure TOneOptionTest.SetUp;
-begin
-  inherited;
-  FGetOpt.RegisterOption('hallo', 'hallo');
-end;
-
-procedure TOneOptionTest.testGivenOnce;
-var
-  s: string;
-  sl: TStringList;
-begin
-  FGetOpt.Parse('--hallo');
-  CheckTrue(FGetOpt.OptionPassed('hallo'), 'OptionPassed(hallo):bool');
-  CheckTrue(FGetOpt.OptionPassed('hallo', s), 'OptionPassed(hallo):bool');
-  CheckEquals('', s, 'Value for option');
-  CheckEquals(1, FGetOpt.OptionPassed('hallo', nil), 'OptionPassed(hallo):bool');
-  sl := TStringList.Create;
-  try
-    CheckEquals(1, FGetOpt.OptionPassed('hallo', sl), 'OptionPassed(hallo):bool');
-    CheckEquals(1, sl.Count, 'sl.count');
-    CheckEquals('', sl[0], 'Value for option');
-  finally
-    sl.Free;
-  end;
-end;
-
-procedure TOneOptionTest.testGivenThrice;
-var
-  s: string;
-  sl: TStringList;
-begin
-  FGetOpt.Parse('--hallo --hallo --hallo');
-  CheckFalse(FGetOpt.OptionPassed('hallo'), 'OptionPassed(hallo):bool');
-  CheckFalse(FGetOpt.OptionPassed('hallo', s), 'OptionPassed(hallo):bool');
-  CheckEquals(3, FGetOpt.OptionPassed('hallo', nil), 'OptionPassed(hallo):bool');
-  sl := TStringList.Create;
-  try
-    CheckEquals(3, FGetOpt.OptionPassed('hallo', sl), 'OptionPassed(hallo):bool');
-    CheckEquals(3, sl.Count, 'sl.count');
-    CheckEquals('', sl[0], 'Value for option');
-    CheckEquals('', sl[1], 'Value for option');
-    CheckEquals('', sl[2], 'Value for option');
-  finally
-    sl.Free;
-  end;
-end;
-
-procedure TOneOptionTest.testGivenTwice;
-var
-  s: string;
-  sl: TStringList;
-begin
-  FGetOpt.Parse('--hallo --hallo');
-  CheckFalse(FGetOpt.OptionPassed('hallo'), 'OptionPassed(hallo):bool');
-  CheckFalse(FGetOpt.OptionPassed('hallo', s), 'OptionPassed(hallo):bool');
-  CheckEquals(2, FGetOpt.OptionPassed('hallo', nil), 'OptionPassed(hallo):bool');
-  sl := TStringList.Create;
-  try
-    CheckEquals(2, FGetOpt.OptionPassed('hallo', sl), 'OptionPassed(hallo):bool');
-    CheckEquals(2, sl.Count, 'sl.count');
-    CheckEquals('', sl[0], 'Value for option');
-    CheckEquals('', sl[1], 'Value for option');
-  finally
-    sl.Free;
-  end;
-end;
-
-procedure TOneOptionTest.testNotGiven;
-begin
-  ParseNone;
-  CheckFalse(FGetOpt.OptionPassed('hallo'), 'OptionPassed(hallo):bool')
-end;
-
-procedure TOneOptionTest.testUnkownOption;
-begin
-  ParseNone;
-  CheckException(GetUnknownOption, EUnknownOption);
-end;
-
-initialization
-  RegisterTest('getopt', TUnknownParamTest.Suite);
-  // do NOT register TSingleParamTest!
-  RegisterTest('getopt', TSingleRequiredParamTest.Suite);
-  RegisterTest('getopt', TSingleOptionalParamTest.Suite);
-  RegisterTest('getopt', TSingleParamMultipleTest.Suite);
-  RegisterTest('getopt', TTwoRequiredParamsTest.Suite);
-  RegisterTest('getopt', TTwoOptionalParamsTest.Suite);
-  RegisterTest('getopt', TRequiredAndOptionalParamTest.Suite);
-  RegisterTest('getopt', TOneParamRequiredTwice.Suite);
-  RegisterTest('getopt', TRegisterOptionTest.Suite);
-  RegisterTest('getopt', TOneOptionTest.Suite);
-end.
-


Property changes on: utilities/dzCmdLineParser/trunk/tests
___________________________________________________________________
Name: svn:ignore
   + CmdLineParserTest.res


Copied: utilities/dzCmdLineParser/trunk/tests/CmdLineParserTest.dpr (from rev 232, utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dpr)
===================================================================
--- utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dpr	2007-11-01 14:12:16 UTC (rev 232)
+++ utilities/dzCmdLineParser/trunk/tests/CmdLineParserTest.dpr	2007-11-01 14:19:11 UTC (rev 233)
@@ -0,0 +1,41 @@
+program CmdLineParserTest;
+{
+
+  Delphi DUnit Test Project
+  -------------------------
+  This project contains the DUnit test framework and the GUI/Console test runners.
+  Add "CONSOLE_TESTRUNNER" to the conditional defines entry in the project options 
+  to use the console test runner.  Otherwise the GUI test runner will be used by 
+  default.
+
+}
+
+{$IFDEF CONSOLE_TESTRUNNER}
+{$APPTYPE CONSOLE}
+{$ENDIF}
+
+uses
+  Forms,
+  TestFramework,
+  GUITestRunner,
+  TextTestRunner,
+  u_dzCmdLineParser_UnitTest in 'u_dzCmdLineParser_UnitTest.pas',
+  u_dzCmdLineParser in '..\src\u_dzCmdLineParser.pas',
+  u_dzGetOpt in '..\src\u_dzGetOpt.pas',
+  u_dzOptionDescList in '..\src\u_dzOptionDescList.pas',
+  u_dzParamDescList in '..\src\u_dzParamDescList.pas',
+  u_dzParamFoundList in '..\src\u_dzParamFoundList.pas',
+  u_dzOptionNameList in '..\src\u_dzOptionNameList.pas',
+  u_dzOptionFoundList in '..\src\u_dzOptionFoundList.pas',
+  u_dzGetOpt_UnitTest in 'u_dzGetOpt_UnitTest.pas';
+
+{$R *.RES}
+
+begin
+  Application.Initialize;
+  if IsConsole then
+    TextTestRunner.RunRegisteredTests
+  else
+    GUITestRunner.RunRegisteredTests;
+end.
+

Copied: utilities/dzCmdLineParser/trunk/tests/CmdLineParserTest.dproj (from rev 232, utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dproj)
===================================================================
--- utilities/dzCmdLineParser/trunk/src/CmdLineParserTest.dproj	2007-11-01 14:12:16 UTC (rev 232)
+++ utilities/dzCmdLineParser/trunk/tests/CmdLineParserTest.dproj	2007-11-01 14:19:11 UTC (rev 233)
@@ -0,0 +1,102 @@
+?<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <ProjectGuid>{ff87c54f-7bb3-4fb0-8be9-da726c81d33c}</ProjectGuid>
+    <MainSource>CmdLineParserTest.dpr</MainSource>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <DCC_DCCCompiler>DCC32</DCC_DCCCompiler>
+    <DCC_DependencyCheckOutputName>..\CmdLineParserTest.exe</DCC_DependencyCheckOutputName>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <Version>7.0</Version>
+    <DCC_DebugInformation>False</DCC_DebugInformation>
+    <DCC_LocalDebugSymbols>False</DCC_LocalDebugSymbols>
+    <DCC_Optimize>False</DCC_Optimize>
+    <DCC_SymbolReferenceInfo>0</DCC_SymbolReferenceInfo>
+    <DCC_ImageBase>700000</DCC_ImageBase>
+    <DCC_UnitSearchPath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_UnitSearchPath>
+    <DCC_ResourcePath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_ResourcePath>
+    <DCC_ObjPath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_ObjPath>
+    <DCC_IncludePath>$(BDS)\Source\DUnit\src;D:\source\berlios.dztemplates\Units;D:\source\berlios.dztemplates\Templates</DCC_IncludePath>
+    <DCC_Define>_CONSOLE_TESTRUNNER;RELEASE</DCC_Define>
+    <DCC_SYMBOL_PLATFORM>False</DCC_SYMBOL_PLATFORM>
+    <DCC_UNIT_PLATFORM>False</DCC_UNIT_PLATFORM>
+    <DCC_Description>RTS Highlighter Extensions</DCC_Description>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <Version>7.0</Version>
+    <DCC_Optimize>False</DCC_Optimize>
+    <DCC_Define>_CONSOLE_TESTRUNNER;DEBUG</DCC_Define>
+    <DCC_SYMBOL_PLATFORM>False</DCC_SYMBOL_PLATFORM>
+    <DCC_UNIT_PLATFORM>False</DCC_UNIT_PLATFORM>
+    <DCC_Description>RTS Highlighter Extensions</DCC_Description>
+    <DCC_UnitSearchPath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_UnitSearchPath>
+    <DCC_ResourcePath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_ResourcePath>
+    <DCC_ObjPath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_ObjPath>
+    <DCC_IncludePath>..\libs\dzTemplates\units;..\libs\dztemplates\templates</DCC_IncludePath>
+    <DCC_ExeOutput>..</DCC_ExeOutput>
+    <DCC_DcuOutput>..\dcu</DCC_DcuOutput>
+    <DCC_ObjOutput>..\dcu</DCC_ObjOutput>
+    <DCC_HppOutput>..\dcu</DCC_HppOutput>
+  </PropertyGroup>
+  <ProjectExtensions>
+    <Borland.Personality>Delphi.Personality</Borland.Personality>
+    <Borland.ProjectType />
+    <BorlandProject>
+<BorlandProject><Delphi.Personality><Parameters><Parameters Name="HostApplication">C:\Delphi7\Bin\delphi32.exe</Parameters><Parameters Name="UseLauncher">False</Parameters><Parameters Name="LoadAllSymbols">True</Parameters><Parameters Name="LoadUnspecifiedSymbols">False</Parameters></Parameters><Language><Language Name="RootDir">C:\Delphi7\Bin\</Language></Language><VersionInfo><VersionInfo Name="IncludeVerInfo">True</VersionInfo><VersionInfo Name="AutoIncBuild">False</VersionInfo><VersionInfo Name="MajorVer">1</VersionInfo><VersionInfo Name="MinorVer">0</VersionInfo><VersionInfo Name="Release">0</VersionInfo><VersionInfo Name="Build">0</VersionInfo><VersionInfo Name="Debug">False</VersionInfo><VersionInfo Name="PreRelease">False</VersionInfo><VersionInfo Name="Special">False</VersionInfo><VersionInfo Name="Private">False</VersionInfo><VersionInfo Name="DLL">True</VersionInfo><VersionInfo Name="Locale">4105</VersionInfo><VersionInfo Name="CodePage">1252</VersionInfo></Versi!
 onInfo><VersionInfoKeys><VersionInfoKeys Name="CompanyName"></VersionInfoKeys><VersionInfoKeys Name="FileDescription"></VersionInfoKeys><VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="InternalName"></VersionInfoKeys><VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys><VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys><VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys><VersionInfoKeys Name="ProductName"></VersionInfoKeys><VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="Comments"></VersionInfoKeys></VersionInfoKeys><Excluded_Packages>
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcldb100.bpl">Borland Database Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\bin\dclado100.bpl">Borland ADO DB Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcldbx100.bpl">Borland dbExpress Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclib100.bpl">Borland InterBase Express Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclnet100.bpl">Borland Internet Components</Excluded_Packages>
+      <Excluded_Packages Name="C:\Program Files\Borland\BDS\4.0\Bin\dclIndyCore100.bpl">Indy 10 Core Design Time</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclIndyProtocols100.bpl">Indy 10 Protocols Design Time</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclmid100.bpl">Borland MyBase DataAccess Components</Excluded_Packages>
+      <Excluded_Packages Name="C:\Program Files\Borland\BDS\4.0\Bin\dclbde100.bpl">Borland BDE DB Components</Excluded_Packages>
+      <Excluded_Packages Name="C:\Program Files\Borland\BDS\4.0\Bin\dbx100.bpl">Borland SQL Explorer UI Package</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\applet100.bpl">Borland Control Panel Applet Package</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclact100.bpl">Borland ActionBar Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclsoap100.bpl">Borland SOAP Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\bcbie100.bpl">Borland C++Builder Internet Explorer 5 Components Package</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcltee100.bpl">TeeChart Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcldbxcds100.bpl">Borland SimpleDataset Component (DBX)</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclIntraweb_80_100.bpl">Intraweb 8.0 Design Package for Borland Development Studio 2006</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dcloffice2k100.bpl">Microsoft Office 2000 Sample Automation Server Wrapper Components</Excluded_Packages>
+      <Excluded_Packages Name="c:\program files\borland\bds\4.0\Bin\dclie100.bpl">Internet Explorer Components</Excluded_Packages>
+    </Excluded_Packages><Source><Source Name="MainSource">CmdLineParserTest.dpr</Source></Source></Delphi.Personality></BorlandProject></BorlandProject>
+  </ProjectExtensions>
+  <Import Project="$(MSBuildBinPath)\Borland.Delphi.Targets" />
+  <ItemGroup>
+    <DelphiCompile Include="CmdLineParserTest.dpr">
+      <MainSource>MainSource</MainSource>
+    </DelphiCompile>
+    <DCCReference Include="..\src\u_dzCmdLineParser.pas" />
+    <DCCReference Include="..\src\u_dzGetOpt.pas" />
+    <DCCReference Include="..\src\u_dzOptionDescList.pas" />
+    <DCCReference Include="..\src\u_dzOptionFoundList.pas" />
+    <DCCReference Include="..\src\u_dzOptionNameList.pas" />
+    <DCCReference Include="..\src\u_dzParamDescList.pas" />
+    <DCCReference Include="..\src\u_dzParamFoundList.pas" />
+    <DCCReference Include="u_dzCmdLineParser_UnitTest.pas" />
+    <DCCReference Include="u_dzGetOpt_UnitTest.pas" />
+  </ItemGroup>
+</Project>
\ No newline at end of file

Copied: utilities/dzCmdLineParser/trunk/tests/u_dzCmdLineParser_UnitTest.pas (from rev 232, utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser_UnitTest.pas)

Copied: utilities/dzCmdLineParser/trunk/tests/u_dzGetOpt_UnitTest.pas (from rev 232, utilities/dzCmdLineParser/trunk/src/u_dzGetOpt_UnitTest.pas)



From twm at mail.berlios.de  Thu Nov  1 15:29:03 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 15:29:03 +0100
Subject: [Dzchart-svncheckins] r234 - utilities/dzLib/trunk/src
Message-ID: <200711011429.lA1ET342014492@sheep.berlios.de>

Author: twm
Date: 2007-11-01 15:28:59 +0100 (Thu, 01 Nov 2007)
New Revision: 234

Modified:
   utilities/dzLib/trunk/src/u_dzExecutor.pas
Log:
replaced unused CreateFmt with Create

Modified: utilities/dzLib/trunk/src/u_dzExecutor.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzExecutor.pas	2007-11-01 14:19:11 UTC (rev 233)
+++ utilities/dzLib/trunk/src/u_dzExecutor.pas	2007-11-01 14:28:59 UTC (rev 234)
@@ -290,7 +290,7 @@
 function TExecutor.Kill: boolean;
 begin
   case GetStatus of
-    esInvalid: raise ENoProcess.CreateFmt('Process has not yet been started'#13#10'%s', ['']);
+    esInvalid: raise ENoProcess.Create('Process has not yet been started');
     esRunning: Result := TerminateProcess(fProcessInfo.hProcess, $FFFFFFFF);
   else
     Result := true;



From twm at mail.berlios.de  Thu Nov  1 15:30:05 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 15:30:05 +0100
Subject: [Dzchart-svncheckins] r235 - utilities/dzLib/trunk/tests/dzfileutils
Message-ID: <200711011430.lA1EU5jC014553@sheep.berlios.de>

Author: twm
Date: 2007-11-01 15:30:01 +0100 (Thu, 01 Nov 2007)
New Revision: 235

Modified:
   utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr
   utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj
   utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas
Log:
additional unit tests for u_dzFileUtils

Modified: utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr	2007-11-01 14:28:59 UTC (rev 234)
+++ utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr	2007-11-01 14:30:01 UTC (rev 235)
@@ -25,9 +25,7 @@
   u_dzStringUtils in '..\..\src\u_dzStringUtils.pas',
   u_dzConvertUtils in '..\..\src\u_dzConvertUtils.pas',
   u_dzTranslator in '..\..\src\u_dzTranslator.pas',
-  u_dzDateUtils in '..\..\src\u_dzDateUtils.pas',
-  u_dzUnitTestUtils in '..\..\src\u_dzUnitTestUtils.pas',
-  u_dzVariantUtils in '..\..\src\u_dzVariantUtils.pas';
+  u_dzDateUtils in '..\..\src\u_dzDateUtils.pas';
 
 {$R *.RES}
 

Modified: utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj	2007-11-01 14:28:59 UTC (rev 234)
+++ utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj	2007-11-01 14:30:01 UTC (rev 235)
@@ -34,7 +34,45 @@
     <Borland.Personality>Delphi.Personality</Borland.Personality>
     <Borland.ProjectType />
     <BorlandProject>
-<BorlandProject><Delphi.Personality><Parameters><Parameters Name="UseLauncher">False</Parameters><Parameters Name="LoadAllSymbols">True</Parameters><Parameters Name="LoadUnspecifiedSymbols">False</Parameters></Parameters><VersionInfo><VersionInfo Name="IncludeVerInfo">False</VersionInfo><VersionInfo Name="AutoIncBuild">False</VersionInfo><VersionInfo Name="MajorVer">1</VersionInfo><VersionInfo Name="MinorVer">0</VersionInfo><VersionInfo Name="Release">0</VersionInfo><VersionInfo Name="Build">0</VersionInfo><VersionInfo Name="Debug">False</VersionInfo><VersionInfo Name="PreRelease">False</VersionInfo><VersionInfo Name="Special">False</VersionInfo><VersionInfo Name="Private">False</VersionInfo><VersionInfo Name="DLL">False</VersionInfo><VersionInfo Name="Locale">1033</VersionInfo><VersionInfo Name="CodePage">1252</VersionInfo></VersionInfo><VersionInfoKeys><VersionInfoKeys Name="CompanyName"></VersionInfoKeys><VersionInfoKeys Name="FileDescription"></VersionInfoKeys><VersionI!
 nfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="InternalName"></VersionInfoKeys><VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys><VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys><VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys><VersionInfoKeys Name="ProductName"></VersionInfoKeys><VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="Comments"></VersionInfoKeys></VersionInfoKeys><Source><Source Name="MainSource">DUnitTest_dzFileUtils.dpr</Source></Source></Delphi.Personality><UnitTesting><TestFramework>DUnit / Delphi Win32</TestFramework><TestRunner>GUI</TestRunner></UnitTesting></BorlandProject></BorlandProject>
+<BorlandProject xmlns=""> <Delphi.Personality>   <Parameters>
+      <Parameters Name="UseLauncher">False</Parameters>
+      <Parameters Name="LoadAllSymbols">True</Parameters>
+      <Parameters Name="LoadUnspecifiedSymbols">False</Parameters>
+    </Parameters>
+    <VersionInfo>
+      <VersionInfo Name="IncludeVerInfo">False</VersionInfo>
+      <VersionInfo Name="AutoIncBuild">False</VersionInfo>
+      <VersionInfo Name="MajorVer">1</VersionInfo>
+      <VersionInfo Name="MinorVer">0</VersionInfo>
+      <VersionInfo Name="Release">0</VersionInfo>
+      <VersionInfo Name="Build">0</VersionInfo>
+      <VersionInfo Name="Debug">False</VersionInfo>
+      <VersionInfo Name="PreRelease">False</VersionInfo>
+      <VersionInfo Name="Special">False</VersionInfo>
+      <VersionInfo Name="Private">False</VersionInfo>
+      <VersionInfo Name="DLL">False</VersionInfo>
+      <VersionInfo Name="Locale">1033</VersionInfo>
+      <VersionInfo Name="CodePage">1252</VersionInfo>
+    </VersionInfo>
+    <VersionInfoKeys>
+      <VersionInfoKeys Name="CompanyName"></VersionInfoKeys>
+      <VersionInfoKeys Name="FileDescription"></VersionInfoKeys>
+      <VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys>
+      <VersionInfoKeys Name="InternalName"></VersionInfoKeys>
+      <VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys>
+      <VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys>
+      <VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys>
+      <VersionInfoKeys Name="ProductName"></VersionInfoKeys>
+      <VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys>
+      <VersionInfoKeys Name="Comments"></VersionInfoKeys>
+    </VersionInfoKeys>
+    <Source>
+      <Source Name="MainSource">DUnitTest_dzFileUtils.dpr</Source>
+    </Source>
+  </Delphi.Personality>   <UnitTesting>   <TestFramework>DUnit / Delphi Win32</TestFramework>
+    <TestRunner>GUI</TestRunner>
+  </UnitTesting>
+</BorlandProject></BorlandProject>
   </ProjectExtensions>
   <Import Project="$(MSBuildBinPath)\Borland.Delphi.Targets" />
   <ItemGroup>
@@ -42,13 +80,10 @@
       <MainSource>MainSource</MainSource>
     </DelphiCompile>
     <DCCReference Include="..\..\src\u_dzConvertUtils.pas" />
-    <DCCReference Include="..\..\src\u_dzDateUtils.pas" />
     <DCCReference Include="..\..\src\u_dzFileUtils.pas" />
     <DCCReference Include="..\..\src\u_dzMiscUtils.pas" />
     <DCCReference Include="..\..\src\u_dzStringUtils.pas" />
     <DCCReference Include="..\..\src\u_dzTranslator.pas" />
-    <DCCReference Include="..\..\src\u_dzUnitTestUtils.pas" />
-    <DCCReference Include="..\..\src\u_dzVariantUtils.pas" />
     <DCCReference Include="Testu_dzFileUtils.pas" />
   </ItemGroup>
 </Project>
\ No newline at end of file

Modified: utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas	2007-11-01 14:28:59 UTC (rev 234)
+++ utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas	2007-11-01 14:30:01 UTC (rev 235)
@@ -7,11 +7,10 @@
   Classes,
   SysUtils,
   TestFramework,
-  u_dzFileUtils,
-  u_dzUnitTestUtils;
+  u_dzFileUtils;
 
 type
-  TFileSystemTestCase = class(TdzTestCase)
+  TFileSystemTestCase = class(TTestCase)
   protected
     FTestDir: string;
     procedure SetUp; override;
@@ -42,7 +41,6 @@
 
   TestTDirectorySync = class(TFileSystemTestCase)
   private
-    FLargeContent: string;
     FDirA: string;
     FDirB: string;
     FSync: TDirectorySync;
@@ -57,9 +55,8 @@
     FCallbacks: TStringList;
     FExistingFiles: TStringList;
     procedure OnSyncDirAbort(_Sender: TObject; const _Src, _Dst: string);
-    procedure OnDirSyncCallback(_Sender: TObject; const _Src, _Dst: string);
-    procedure OnFileSyncCallback(_Sender: TObject; const _Src, _Dst: string; _Total, _Done: Int64);
-    procedure OnFileExistsCallback(_Sender: TObject; const _SrcFile, _DstFile: TFileInfoRec; var _Action: TFileExistsAction);
+    procedure OnSyncCallback(_Sender: TObject; const _Src, _Dst: string);
+    procedure OnFileExistsCallback(_Sender: TObject; const _Src, _Dst: TFileInfoRec);
     procedure CheckSameText(const _Expected, _Actual, _Msg: string);
   protected
     procedure SetUp; override;
@@ -575,11 +572,9 @@
   TFileSystem.CreateDir(FDirA);
   TFileSystem.CreateDir(FDirB);
 
-  FLargeContent := StringOfChar('a', 5 * 1024 * 1024);
-
   FFile1 := CreateTestfile('a\file1.txt', 'File1');
   FFile2 := CreateTestfile('a\.txt', 'File2');
-  FFile3 := CreateTestfile('a\file3', FLargeContent);
+  FFile3 := CreateTestfile('a\file3', 'File3');
   TFileSystem.CreateDir(FDirA + '\Sub1');
   TFileSystem.CreateDir(FDirA + '\Sub2');
   FFile4 := CreateTestfile('a\Sub2\file4.txt', 'File4');
@@ -627,7 +622,7 @@
   CheckEquals(10, cnt, 'number of files and subdirs');
   CheckTestfile('b\' + ExtractFileName(FFile1), 'File1');
   CheckTestfile('b\' + ExtractFileName(FFile2), 'File2');
-  CheckTestfile('b\' + ExtractFileName(FFile3), FLargeContent);
+  CheckTestfile('b\' + ExtractFileName(FFile3), 'File3');
   CheckSubdirExists('b\Sub1');
   CheckSubdirExists('b\Sub2');
   CheckTestfile('b\Sub2\' + ExtractFileName(FFile4), 'File4');
@@ -642,46 +637,27 @@
 end;
 
 procedure TestTDirectorySync.TestSyncOneWayCallback;
-var
-  Expected: TStringList;
-  i: Integer;
 begin
-  FSync.OnSyncingDir := OnDirSyncCallback;
-  FSync.OnSyncingFile := OnFileSyncCallback;
+  FSync.OnSyncingDir := OnSyncCallback;
+  FSync.OnSyncingFile := OnSyncCallback;
   FSync.SyncOneWay(FDirA, FDirB);
-
-  Expected := TStringList.Create;
-  try
-    Expected.Add(FDirA + ' -> ' + FDirB);
-    Expected.Add(FDirA + '.txt -> ' + FDirB + '.txt (0 of 7)');
-    Expected.Add(FDirA + '.txt -> ' + FDirB + '.txt (7 of 7)');
-    Expected.Add(FDirA + 'file1.txt -> ' + FDirB + 'file1.txt (0 of 7)');
-    Expected.Add(FDirA + 'file1.txt -> ' + FDirB + 'file1.txt (7 of 7)');
-    for i := 0 to 80 do
-      Expected.Add(FDirA + 'file3 -> ' + FDirB + Format('file3 (%d of 5242882)', [i * 65536]));
-    Expected.Add(FDirA + 'file3 -> ' + FDirB + 'file3 (5242882 of 5242882)');
-    Expected.Add(FDirA + 'Sub1 -> ' + FDirB + 'Sub1');
-    Expected.Add(FDirA + 'Sub2 -> ' + FDirB + 'Sub2');
-    Expected.Add(FDirA + 'Sub2\file4.txt -> ' + FDirB + 'Sub2\file4.txt (0 of 7)');
-    Expected.Add(FDirA + 'Sub2\file4.txt -> ' + FDirB + 'Sub2\file4.txt (7 of 7)');
-    Expected.Add(FDirA + 'Sub5 -> ' + FDirB + 'Sub5');
-    Expected.Add(FDirA + 'Sub6 -> ' + FDirB + 'Sub6');
-    CheckEqualsMultiline(Expected.Text, FCallbacks.Text);
-  finally
-    Expected.Free;
-  end;
+  CheckEquals(9, FCallbacks.Count, 'callback count');
+  CheckEquals(FDirA + ' -> ' + FDirB, FCallbacks[0], 'callback 0');
+  CheckEquals(FDirA + '.txt -> ' + FDirB + '.txt', FCallbacks[1], 'callback 1');
+  CheckEquals(FDirA + 'file1.txt -> ' + FDirB + 'file1.txt', FCallbacks[2], 'callback 2');
+  CheckEquals(FDirA + 'file3 -> ' + FDirB + 'file3', FCallbacks[3], 'callback 3');
+  CheckEquals(FDirA + 'Sub1 -> ' + FDirB + 'Sub1', FCallbacks[4], 'callback 4');
+  CheckEquals(FDirA + 'Sub2 -> ' + FDirB + 'Sub2', FCallbacks[5], 'callback 5');
+  CheckEquals(FDirA + 'Sub2\file4.txt -> ' + FDirB + 'Sub2\file4.txt', FCallbacks[6], 'callback 6');
+  CheckEquals(FDirA + 'Sub5 -> ' + FDirB + 'Sub5', FCallbacks[7], 'callback 7');
+  CheckEquals(FDirA + 'Sub6 -> ' + FDirB + 'Sub6', FCallbacks[8], 'callback 8');
 end;
 
-procedure TestTDirectorySync.OnDirSyncCallback(_Sender: TObject; const _Src, _Dst: string);
+procedure TestTDirectorySync.OnSyncCallback(_Sender: TObject; const _Src, _Dst: string);
 begin
   FCallbacks.Add(_Src + ' -> ' + _Dst);
 end;
 
-procedure TestTDirectorySync.OnFileSyncCallback(_Sender: TObject; const _Src, _Dst: string; _Total, _Done: Int64);
-begin
-  FCallbacks.Add(_Src + ' -> ' + _Dst + ' (' + IntToStr(_Done) + ' of ' + IntToStr(_Total) + ')');
-end;
-
 procedure TestTDirectorySync.OnSyncDirAbort(_Sender: TObject; const _Src, _Dst: string);
 begin
   SysUtils.Abort;
@@ -693,11 +669,11 @@
     FailNotEquals(_Expected, _Actual, _Msg);
 end;
 
-procedure TestTDirectorySync.OnFileExistsCallback(_Sender: TObject; const _SrcFile, _DstFile: TFileInfoRec; var _Action: TFileExistsAction);
+procedure TestTDirectorySync.OnFileExistsCallback(_Sender: TObject; const _Src, _Dst: TFileInfoRec);
 begin
-  FExistingFiles.Add(_SrcFile.Filename + ' <> ' + _DstFile.Filename);
-  CheckEquals(_SrcFile.Size, _DstFile.Size, 'Size');
-  CheckEquals(_SrcFile.Timestamp, _DstFile.Timestamp, 'Timestamp');
+  FExistingFiles.Add(_Src.Filename + ' <> ' + _Dst.Filename);
+  CheckEquals(_Src.Size, _Dst.Size, 'Size');
+  CheckEquals(_Src.Timestamp, _Dst.Timestamp, 'Timestamp');
 end;
 
 procedure TestTDirectorySync.TestCheckOneWay;
@@ -755,7 +731,7 @@
   CheckEquals(10, cnt, 'number of files and subdirs');
   CheckTestfile('b\' + ExtractFileName(FFile1), 'File1');
   CheckTestfile('b\' + ExtractFileName(FFile2), 'File2');
-  CheckTestfile('b\' + ExtractFileName(FFile3), FLargeContent);
+  CheckTestfile('b\' + ExtractFileName(FFile3), 'File3');
   CheckSubdirExists('b\Sub1');
   CheckSubdirExists('b\Sub2');
   CheckTestfile('b\Sub2\' + ExtractFileName(FFile4), 'File4');
@@ -779,7 +755,7 @@
   CheckEquals(10, cnt, 'number of files and subdirs');
   CheckTestfile('a\' + ExtractFileName(FFile1), 'File1');
   CheckTestfile('a\' + ExtractFileName(FFile2), 'File2');
-  CheckTestfile('a\' + ExtractFileName(FFile3), FLargeContent);
+  CheckTestfile('a\' + ExtractFileName(FFile3), 'File3');
   CheckSubdirExists('a\Sub1');
   CheckSubdirExists('a\Sub2');
   CheckTestfile('a\Sub2\' + ExtractFileName(FFile4), 'File4');



From twm at mail.berlios.de  Thu Nov  1 15:54:12 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 15:54:12 +0100
Subject: [Dzchart-svncheckins] r236 - in utilities/dzLib/trunk: src
	tests/dzfileutils
Message-ID: <200711011454.lA1EsCHX016415@sheep.berlios.de>

Author: twm
Date: 2007-11-01 15:54:04 +0100 (Thu, 01 Nov 2007)
New Revision: 236

Modified:
   utilities/dzLib/trunk/src/u_dzConvertUtils.pas
   utilities/dzLib/trunk/src/u_dzFileUtils.pas
   utilities/dzLib/trunk/src/u_dzTranslator.pas
   utilities/dzLib/trunk/src/u_dzVclUtils.pas
   utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr
   utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj
   utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas
Log:
reverted to old versions, today's commits were old files :-(

Modified: utilities/dzLib/trunk/src/u_dzConvertUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzConvertUtils.pas	2007-11-01 14:30:01 UTC (rev 235)
+++ utilities/dzLib/trunk/src/u_dzConvertUtils.pas	2007-11-01 14:54:04 UTC (rev 236)
@@ -185,6 +185,31 @@
    @returns a string representation of the floating point value }
 function Float2Str(_flt: extended; _Decimals: integer): string; overload;
 
+// these contants refer to the "Xx binary byte" units as defined by the
+// International Electronical Commission (IEC) and endorsed by the
+// IEE and CiPM
+const
+  OneKibiByte = Int64(1024);
+  OneMebiByte = Int64(1024) * OneKibiByte;
+  OneGibiByte = Int64(1024) * OneMebiByte;
+  OneTebiByte = Int64(1024) * OneGibiByte;
+  OnePebiByte = Int64(1024) * OneTebiByte;
+  OneExbiByte = Int64(1024) * OnePebiByte;
+
+{: Converts a file size to a human readable string, e.g. 536870912000 = 5.00 GiB (gibibyte) }
+function FileSizeToHumanReadableString(_FileSize: Int64): string;
+
+const
+  SecondsPerMinute = 60;
+  MinutesPerHour = 60;
+  SecondsPerHour = SecondsPerMinute * MinutesPerHour;
+  HoursPerDay = 24;
+  MinutesPerDay = HoursPerDay * MinutesPerHour;
+  SecondsPerDay = MinutesPerDay * SecondsPerMinute;
+
+{: returns a human readable string of the form '5d 23h' or '25h 15m' or '20m 21s' }
+function SecondsToHumanReadableString(_Seconds: Int64): string;
+
 implementation
 
 uses
@@ -522,6 +547,36 @@
     raise EStringConvertError.CreateFmt(STR_X_IS_NOT_A_VALID_FLOAT_VALUE_SS, [_s, _Source]);
 end;
 
+function FileSizeToHumanReadableString(_FileSize: Int64): string;
+begin
+  if _FileSize > 5 * OneExbiByte then
+    Result := Format(_('%.2f EiB'), [_FileSize / OneExbiByte])
+  else if _FileSize > 5 * OnePebiByte then
+    Result := Format(_('%.2f PiB'), [_FileSize / OnePebiByte])
+  else if _FileSize > 5 * OneTebiByte then
+    Result := Format(_('%.2f TiB'), [_FileSize / OneTebiByte])
+  else if _FileSize > 5 * OneGibiByte then
+    Result := Format(_('%.2f GiB'), [_FileSize / OneGibiByte])
+  else if _FileSize > 5 * OneMebiByte then
+    Result := Format(_('%.2f MiB'), [_FileSize / OneMebiByte])
+  else if _FileSize > 5 * OneKibiByte then
+    Result := Format(_('%.2f KiB'), [_FileSize / OneKibiByte])
+  else
+    Result := Format(_('%d Bytes'), [_FileSize]);
+end;
+
+function SecondsToHumanReadableString(_Seconds: Int64): string;
+begin
+  if _Seconds > SecondsPerDay then
+    Result := Format('%dd %dh', [_Seconds div SecondsPerDay, (_Seconds div SecondsPerHour) mod HoursPerDay])
+  else if _Seconds > Round(1.5 * SecondsPerHour) then
+    Result := Format('%dh %dm', [_Seconds div SecondsPerHour, (_Seconds div SecondsPerMinute) mod MinutesPerHour])
+  else if _Seconds > Round(1.5 * SecondsPerMinute) then
+    Result := Format('%dm %ds', [_Seconds div SecondsPerMinute, _Seconds mod SecondsPerMinute])
+  else
+    Result := Format('%ds', [_Seconds]);
+end;
+
 initialization
   DZ_FORMAT_DECIMAL_POINT := GetUserDefaultLocaleSettings;
   DZ_FORMAT_DECIMAL_POINT.DecimalSeparator := '.';

Modified: utilities/dzLib/trunk/src/u_dzFileUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzFileUtils.pas	2007-11-01 14:30:01 UTC (rev 235)
+++ utilities/dzLib/trunk/src/u_dzFileUtils.pas	2007-11-01 14:54:04 UTC (rev 236)
@@ -154,21 +154,25 @@
   {: defines the action to take if a file already exists but has a different content }
   TFileExistsAction = (feaIgnore, feaOverwrite);
   TOnSyncing = procedure(_Sender: TObject; const _SrcDir, _DstDir: string) of object;
+  TOnSyncingFile = procedure(_Sender: TObject; const _SrcDir, _DstDir: string; _Total, _Done: Int64) of object;
   {: called if a destination file already exists
      @param Action is the action to take, default is feaIgnore }
   TOnFileExists = procedure(_Sender: TObject; const _SrcFile, _DstFile: TFileInfoRec; var _Action: TFileExistsAction) of object;
   {: Synchronizes two directories }
   TDirectorySync = class
   private
+    FCurrentSource: string;
+    FCurrentDest: string;
     FOnSyncingDir: TOnSyncing;
-    FOnSyncingFile: TOnSyncing;
+    FOnSyncingFile: TOnSyncingFile;
     FOnFileExists: TOnFileExists;
 //    FOnDifferentFileExists: TOnDifferentFileExists;
 //    FCheckContent: boolean;
 //    procedure doOnDifferentFileExists(const _Filename: string; var _Action: TFileExistsAction);
     procedure doOnSyncingDir(const _SrcDir, _DstDir: string);
-    procedure doOnSyncingFile(const _SrcFile, _DstFile: string);
+    procedure doOnSyncingFile(const _SrcFile, _DstFile: string; _Total, _Done: Int64);
     function doOnFileExists(const _SrcDir, _DstDir, _Filename: string): TFileExistsAction;
+    procedure ProgressStatusCallback(_Status: TCopyProgressStatus; var _Continue: TCopyProgressStatus.TProgressResult);
   public
     {: Checks if there are files in the source directory that are already in
        the destination directory, for each file that exists, the OnFileExists
@@ -176,8 +180,11 @@
     procedure CheckOneWay(const _SrcDir, _DstDir: string);
     {: copies all files from DirA to DirB if they don't already exists
        (not implemented: if CheckContent=true, the content existing files will be checked and if
-                         it doesn't match, OnDifferentFileExists is called ) }
-    procedure SyncOneWay(const _SrcDir, _DstDir: string);
+                         it doesn't match, OnDifferentFileExists is called )
+       @param FlattenDirHierarchy determines whether all files should be copied
+                                  directly DstDir or if subdirectories should
+                                  be created, default is false }
+    procedure SyncOneWay(const _SrcDir, _DstDir: string; _FlattenDirHierarchy: boolean = false);
     {: calls SyncOneWay(DirA, DirB) and SyncOneWay(DirB, DirA)
        (not implemented: if CheckContent=true, the content existing files will be checked and if
                          it doesn't match, OnDifferentFileExists is called ) }
@@ -191,7 +198,7 @@
     property OnSyncingDir: TOnSyncing read FOnSyncingDir write FOnSyncingDir;
     {: called when a file is being copied, to abort synchronization,
       raise an exception (e.g. SysUtils.Abort), and catch it in the calling method }
-    property OnSyncingFile: TOnSyncing read FOnSyncingFile write FOnSyncingFile;
+    property OnSyncingFile: TOnSyncingFile read FOnSyncingFile write FOnSyncingFile;
     {: called from CheckOneWay if a destination file already exists }
     property OnFileExists: TOnFileExists read FOnFileExists write FOnFileExists;
   end;
@@ -1305,12 +1312,23 @@
     FOnSyncingDir(Self, _SrcDir, _DstDir);
 end;
 
-procedure TDirectorySync.doOnSyncingFile(const _SrcFile, _DstFile: string);
+procedure TDirectorySync.doOnSyncingFile(const _SrcFile, _DstFile: string; _Total, _Done: Int64);
 begin
   if Assigned(FOnSyncingFile) then
-    FOnSyncingFile(self, _SrcFile, _DstFile);
+    FOnSyncingFile(self, _SrcFile, _DstFile, _Total, _Done);
 end;
 
+procedure TDirectorySync.ProgressStatusCallback(_Status: TCopyProgressStatus;
+  var _Continue: TCopyProgressStatus.TProgressResult);
+begin
+  try
+    doOnSyncingFile(FCurrentSource, FCurrentDest, _Status.TotalFileSize.QuadPart, _Status.TotalBytesTransferred.QuadPart);
+  except
+    on e: EAbort do
+      _Continue := prCancel;
+  end;
+end;
+
 procedure TDirectorySync.CheckOneWay(const _SrcDir, _DstDir: string);
 var
   Filename: string;
@@ -1325,12 +1343,11 @@
   try
     while EnumA.FindNext(Filename) do begin
       if (EnumA.Sr.Attr and SysUtils.faDirectory) <> 0 then begin
-        if DirectoryExists(DstDirBS + Filename) then
-          CheckOneWay(SrcDirBS + Filename, DstDirBS + Filename);
+        CheckOneWay(SrcDirBS + Filename, DstDirBS + Filename);
       end else if FileExists(DstDirBS + Filename) then begin
         doOnFileExists(SrcDirBS, DstDirBS, Filename);
       end else begin
-        doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename);
+        doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename, EnumA.Sr.Size, 0);
       end;
     end;
   finally
@@ -1338,7 +1355,7 @@
   end;
 end;
 
-procedure TDirectorySync.SyncOneWay(const _SrcDir, _DstDir: string);
+procedure TDirectorySync.SyncOneWay(const _SrcDir, _DstDir: string; _FlattenDirHierarchy: boolean = false);
 var
   Filename: string;
   EnumA: TSimpleDirEnumerator;
@@ -1351,18 +1368,27 @@
   EnumA := TSimpleDirEnumerator.Create(SrcDirBS + '*.*');
   try
     while EnumA.FindNext(Filename) do begin
+      FCurrentSource := SrcDirBS + Filename;
       if (EnumA.Sr.Attr and SysUtils.faDirectory) <> 0 then begin
-        if not DirectoryExists(DstDirBS + Filename) then
-          TFileSystem.CreateDir(DstDirBS + Filename);
-        SyncOneWay(SrcDirBS + Filename, DstDirBS + Filename);
-      end else if FileExists(DstDirBS + Filename) then begin
-        if doOnFileExists(SrcDirBS, DstDirBS, Filename) = feaOverwrite then begin
-          doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename);
-          TFileSystem.CopyFile(SrcDirBS + Filename, DstDirBS + Filename, false, true);
+        if _FlattenDirHierarchy then
+          FCurrentDest := _DstDir
+        else begin
+          FCurrentDest := DstDirBS + Filename;
+          if not DirectoryExists(FCurrentDest) then
+            TFileSystem.CreateDir(FCurrentDest);
         end;
+        SyncOneWay(FCurrentSource, FCurrentDest, _FlattenDirHierarchy);
       end else begin
-        doOnSyncingFile(SrcDirBS + Filename, DstDirBS + Filename);
-        TFileSystem.CopyFile(SrcDirBS + Filename, DstDirBS + Filename, true, true);
+        FCurrentDest := DstDirBS + Filename;
+        if FileExists(FCurrentDest) then begin
+          if doOnFileExists(SrcDirBS, DstDirBS, Filename) = feaOverwrite then begin
+            if cfwOK <> TFileSystem.CopyFileWithProgress(FCurrentSource, FCurrentDest, ProgressStatusCallback, [cfwRaiseException]) then
+              SysUtils.Abort;
+          end;
+        end else begin
+          if cfwOK <> TFileSystem.CopyFileWithProgress(FCurrentSource, FCurrentDest, ProgressStatusCallback, [cfwRaiseException, cfwFailIfExists]) then
+            SysUtils.Abort;
+        end;
       end;
     end;
   finally

Modified: utilities/dzLib/trunk/src/u_dzTranslator.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzTranslator.pas	2007-11-01 14:30:01 UTC (rev 235)
+++ utilities/dzLib/trunk/src/u_dzTranslator.pas	2007-11-01 14:54:04 UTC (rev 236)
@@ -7,8 +7,10 @@
 // for now uses gnugettext
 {$DEFINE gnugettext}
 {$ELSE}
+{$IFNDEF NO_TRANSLATION_HINT}
 {$MESSAGE HINT 'translation is turned off, remove NO_TRANSLATION define to turn it on'}
 {$ENDIF}
+{$ENDIF}
 
 interface
 
@@ -139,7 +141,21 @@
 {$IFDEF gnugettext}
 initialization
   // translate runtime library
-  AddDomainForResourceString('delphi');
+{$IFDEF DELPHI6}
+  AddDomainForResourceString('delphi6');
+{$ELSE}{$IFDEF DELPHI7}
+  AddDomainForResourceString('delphi7');
+{$ELSE}{$IFDEF DELPHI10}
+  AddDomainForResourceString('delphi2006');
+{$ELSE}{$IFDEF DELPHI11}
+  // currently we don't have translations for Delphi2007, so we use the ones from Delphi2006 and pray... ;-)
+  AddDomainForResourceString('delphi2006');
+{$ELSE}
+  'unknown Delphi version!'
+{$ENDIF}
+{$ENDIF}
+{$ENDIF}
+{$ENDIF}
 
   // ignore these VCL properties / classes
   TP_GlobalIgnoreClassProperty(TControl, 'ImeName');

Modified: utilities/dzLib/trunk/src/u_dzVclUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzVclUtils.pas	2007-11-01 14:30:01 UTC (rev 235)
+++ utilities/dzLib/trunk/src/u_dzVclUtils.pas	2007-11-01 14:54:04 UTC (rev 236)
@@ -242,13 +242,22 @@
 function TComboBox_Select(_cmb: TCustomComboBox; const _Item: string; _DefaultIdx: integer = -1): integer;
 
 {: Gets the object pointer of the selected listbox item
-   @param cmb is the TCustomListbox (descendant) to read from
+   @param lst is the TCustomListbox (descendant) to read from
    @param Idx is the listbox's ItemIndex, only valid if the function returns true
    @param Obj is the value of the object pointer of the selected item, only valid
           if the function returns true
    @returns true, if these values are valid }
 function TListBox_GetSelectedObject(_lst: TCustomListbox; out _Idx: integer; out _Obj: pointer): boolean;
 
+{: Deletes the selected listbox item
+   @param lst is the TCustomListbox (descendant) to read from
+   @param Idx is the listbox's ItemIndex, only valid if the function returns true
+          if the function returns true
+   @returns true, if these values are valid }
+function TListBox_DeleteSelected(_lst: TCustomListbox; out _Idx: integer): boolean; overload;
+function TListBox_DeleteSelected(_lst: TCustomListbox): boolean; overload;
+function TListBox_DeleteSelected(_lst: TCustomListBox; out _s: string): boolean; overload;
+
 {: Gets the caption of the given or selected item in the RadioGroup
    @param rg is the TCustomRadioGroup descendant to read
    @param Caption returns a string with the requested caption with
@@ -839,6 +848,33 @@
     _Obj := _lst.Items.Objects[_Idx];
 end;
 
+function TListBox_DeleteSelected(_lst: TCustomListbox; out _Idx: integer): boolean;
+begin
+  _Idx := _lst.ItemIndex;
+  Result := _Idx <> -1;
+  if Result then
+    _lst.Items.Delete(_Idx);
+end;
+
+function TListBox_DeleteSelected(_lst: TCustomListBox; out _s: string): boolean; overload;
+var
+  Idx: Integer;
+begin
+  Idx := _lst.ItemIndex;
+  Result := Idx <> -1;
+  if Result then begin
+    _s := _lst.Items[Idx];
+    _lst.Items.Delete(Idx);
+  end;
+end;
+
+function TListBox_DeleteSelected(_lst: TCustomListbox): boolean;
+var
+  Idx: integer;
+begin
+  Result := TListBox_DeleteSelected(_lst, Idx);
+end;
+
 function TComboBox_Select(_cmb: TCustomComboBox; const _Item: string; _DefaultIdx: integer = -1): integer;
 begin
   Result := _Cmb.Items.IndexOf(_Item);

Modified: utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr	2007-11-01 14:30:01 UTC (rev 235)
+++ utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dpr	2007-11-01 14:54:04 UTC (rev 236)
@@ -25,7 +25,9 @@
   u_dzStringUtils in '..\..\src\u_dzStringUtils.pas',
   u_dzConvertUtils in '..\..\src\u_dzConvertUtils.pas',
   u_dzTranslator in '..\..\src\u_dzTranslator.pas',
-  u_dzDateUtils in '..\..\src\u_dzDateUtils.pas';
+  u_dzDateUtils in '..\..\src\u_dzDateUtils.pas',
+  u_dzUnitTestUtils in '..\..\src\u_dzUnitTestUtils.pas',
+  u_dzVariantUtils in '..\..\src\u_dzVariantUtils.pas';
 
 {$R *.RES}
 

Modified: utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj	2007-11-01 14:30:01 UTC (rev 235)
+++ utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj	2007-11-01 14:54:04 UTC (rev 236)
@@ -34,45 +34,7 @@
     <Borland.Personality>Delphi.Personality</Borland.Personality>
     <Borland.ProjectType />
     <BorlandProject>
-<BorlandProject xmlns=""> <Delphi.Personality>   <Parameters>
-      <Parameters Name="UseLauncher">False</Parameters>
-      <Parameters Name="LoadAllSymbols">True</Parameters>
-      <Parameters Name="LoadUnspecifiedSymbols">False</Parameters>
-    </Parameters>
-    <VersionInfo>
-      <VersionInfo Name="IncludeVerInfo">False</VersionInfo>
-      <VersionInfo Name="AutoIncBuild">False</VersionInfo>
-      <VersionInfo Name="MajorVer">1</VersionInfo>
-      <VersionInfo Name="MinorVer">0</VersionInfo>
-      <VersionInfo Name="Release">0</VersionInfo>
-      <VersionInfo Name="Build">0</VersionInfo>
-      <VersionInfo Name="Debug">False</VersionInfo>
-      <VersionInfo Name="PreRelease">False</VersionInfo>
-      <VersionInfo Name="Special">False</VersionInfo>
-      <VersionInfo Name="Private">False</VersionInfo>
-      <VersionInfo Name="DLL">False</VersionInfo>
-      <VersionInfo Name="Locale">1033</VersionInfo>
-      <VersionInfo Name="CodePage">1252</VersionInfo>
-    </VersionInfo>
-    <VersionInfoKeys>
-      <VersionInfoKeys Name="CompanyName"></VersionInfoKeys>
-      <VersionInfoKeys Name="FileDescription"></VersionInfoKeys>
-      <VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys>
-      <VersionInfoKeys Name="InternalName"></VersionInfoKeys>
-      <VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys>
-      <VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys>
-      <VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys>
-      <VersionInfoKeys Name="ProductName"></VersionInfoKeys>
-      <VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys>
-      <VersionInfoKeys Name="Comments"></VersionInfoKeys>
-    </VersionInfoKeys>
-    <Source>
-      <Source Name="MainSource">DUnitTest_dzFileUtils.dpr</Source>
-    </Source>
-  </Delphi.Personality>   <UnitTesting>   <TestFramework>DUnit / Delphi Win32</TestFramework>
-    <TestRunner>GUI</TestRunner>
-  </UnitTesting>
-</BorlandProject></BorlandProject>
+<BorlandProject><Delphi.Personality><Parameters><Parameters Name="UseLauncher">False</Parameters><Parameters Name="LoadAllSymbols">True</Parameters><Parameters Name="LoadUnspecifiedSymbols">False</Parameters></Parameters><VersionInfo><VersionInfo Name="IncludeVerInfo">False</VersionInfo><VersionInfo Name="AutoIncBuild">False</VersionInfo><VersionInfo Name="MajorVer">1</VersionInfo><VersionInfo Name="MinorVer">0</VersionInfo><VersionInfo Name="Release">0</VersionInfo><VersionInfo Name="Build">0</VersionInfo><VersionInfo Name="Debug">False</VersionInfo><VersionInfo Name="PreRelease">False</VersionInfo><VersionInfo Name="Special">False</VersionInfo><VersionInfo Name="Private">False</VersionInfo><VersionInfo Name="DLL">False</VersionInfo><VersionInfo Name="Locale">1033</VersionInfo><VersionInfo Name="CodePage">1252</VersionInfo></VersionInfo><VersionInfoKeys><VersionInfoKeys Name="CompanyName"></VersionInfoKeys><VersionInfoKeys Name="FileDescription"></VersionInfoKeys><VersionI!
 nfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="InternalName"></VersionInfoKeys><VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys><VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys><VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys><VersionInfoKeys Name="ProductName"></VersionInfoKeys><VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="Comments"></VersionInfoKeys></VersionInfoKeys><Source><Source Name="MainSource">DUnitTest_dzFileUtils.dpr</Source></Source></Delphi.Personality><UnitTesting><TestFramework>DUnit / Delphi Win32</TestFramework><TestRunner>GUI</TestRunner></UnitTesting></BorlandProject></BorlandProject>
   </ProjectExtensions>
   <Import Project="$(MSBuildBinPath)\Borland.Delphi.Targets" />
   <ItemGroup>
@@ -80,10 +42,13 @@
       <MainSource>MainSource</MainSource>
     </DelphiCompile>
     <DCCReference Include="..\..\src\u_dzConvertUtils.pas" />
+    <DCCReference Include="..\..\src\u_dzDateUtils.pas" />
     <DCCReference Include="..\..\src\u_dzFileUtils.pas" />
     <DCCReference Include="..\..\src\u_dzMiscUtils.pas" />
     <DCCReference Include="..\..\src\u_dzStringUtils.pas" />
     <DCCReference Include="..\..\src\u_dzTranslator.pas" />
+    <DCCReference Include="..\..\src\u_dzUnitTestUtils.pas" />
+    <DCCReference Include="..\..\src\u_dzVariantUtils.pas" />
     <DCCReference Include="Testu_dzFileUtils.pas" />
   </ItemGroup>
 </Project>
\ No newline at end of file

Modified: utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas	2007-11-01 14:30:01 UTC (rev 235)
+++ utilities/dzLib/trunk/tests/dzfileutils/Testu_dzFileUtils.pas	2007-11-01 14:54:04 UTC (rev 236)
@@ -7,10 +7,11 @@
   Classes,
   SysUtils,
   TestFramework,
-  u_dzFileUtils;
+  u_dzFileUtils,
+  u_dzUnitTestUtils;
 
 type
-  TFileSystemTestCase = class(TTestCase)
+  TFileSystemTestCase = class(TdzTestCase)
   protected
     FTestDir: string;
     procedure SetUp; override;
@@ -41,6 +42,7 @@
 
   TestTDirectorySync = class(TFileSystemTestCase)
   private
+    FLargeContent: string;
     FDirA: string;
     FDirB: string;
     FSync: TDirectorySync;
@@ -55,8 +57,9 @@
     FCallbacks: TStringList;
     FExistingFiles: TStringList;
     procedure OnSyncDirAbort(_Sender: TObject; const _Src, _Dst: string);
-    procedure OnSyncCallback(_Sender: TObject; const _Src, _Dst: string);
-    procedure OnFileExistsCallback(_Sender: TObject; const _Src, _Dst: TFileInfoRec);
+    procedure OnDirSyncCallback(_Sender: TObject; const _Src, _Dst: string);
+    procedure OnFileSyncCallback(_Sender: TObject; const _Src, _Dst: string; _Total, _Done: Int64);
+    procedure OnFileExistsCallback(_Sender: TObject; const _SrcFile, _DstFile: TFileInfoRec; var _Action: TFileExistsAction);
     procedure CheckSameText(const _Expected, _Actual, _Msg: string);
   protected
     procedure SetUp; override;
@@ -572,9 +575,11 @@
   TFileSystem.CreateDir(FDirA);
   TFileSystem.CreateDir(FDirB);
 
+  FLargeContent := StringOfChar('a', 5 * 1024 * 1024);
+
   FFile1 := CreateTestfile('a\file1.txt', 'File1');
   FFile2 := CreateTestfile('a\.txt', 'File2');
-  FFile3 := CreateTestfile('a\file3', 'File3');
+  FFile3 := CreateTestfile('a\file3', FLargeContent);
   TFileSystem.CreateDir(FDirA + '\Sub1');
   TFileSystem.CreateDir(FDirA + '\Sub2');
   FFile4 := CreateTestfile('a\Sub2\file4.txt', 'File4');
@@ -622,7 +627,7 @@
   CheckEquals(10, cnt, 'number of files and subdirs');
   CheckTestfile('b\' + ExtractFileName(FFile1), 'File1');
   CheckTestfile('b\' + ExtractFileName(FFile2), 'File2');
-  CheckTestfile('b\' + ExtractFileName(FFile3), 'File3');
+  CheckTestfile('b\' + ExtractFileName(FFile3), FLargeContent);
   CheckSubdirExists('b\Sub1');
   CheckSubdirExists('b\Sub2');
   CheckTestfile('b\Sub2\' + ExtractFileName(FFile4), 'File4');
@@ -637,27 +642,46 @@
 end;
 
 procedure TestTDirectorySync.TestSyncOneWayCallback;
+var
+  Expected: TStringList;
+  i: Integer;
 begin
-  FSync.OnSyncingDir := OnSyncCallback;
-  FSync.OnSyncingFile := OnSyncCallback;
+  FSync.OnSyncingDir := OnDirSyncCallback;
+  FSync.OnSyncingFile := OnFileSyncCallback;
   FSync.SyncOneWay(FDirA, FDirB);
-  CheckEquals(9, FCallbacks.Count, 'callback count');
-  CheckEquals(FDirA + ' -> ' + FDirB, FCallbacks[0], 'callback 0');
-  CheckEquals(FDirA + '.txt -> ' + FDirB + '.txt', FCallbacks[1], 'callback 1');
-  CheckEquals(FDirA + 'file1.txt -> ' + FDirB + 'file1.txt', FCallbacks[2], 'callback 2');
-  CheckEquals(FDirA + 'file3 -> ' + FDirB + 'file3', FCallbacks[3], 'callback 3');
-  CheckEquals(FDirA + 'Sub1 -> ' + FDirB + 'Sub1', FCallbacks[4], 'callback 4');
-  CheckEquals(FDirA + 'Sub2 -> ' + FDirB + 'Sub2', FCallbacks[5], 'callback 5');
-  CheckEquals(FDirA + 'Sub2\file4.txt -> ' + FDirB + 'Sub2\file4.txt', FCallbacks[6], 'callback 6');
-  CheckEquals(FDirA + 'Sub5 -> ' + FDirB + 'Sub5', FCallbacks[7], 'callback 7');
-  CheckEquals(FDirA + 'Sub6 -> ' + FDirB + 'Sub6', FCallbacks[8], 'callback 8');
+
+  Expected := TStringList.Create;
+  try
+    Expected.Add(FDirA + ' -> ' + FDirB);
+    Expected.Add(FDirA + '.txt -> ' + FDirB + '.txt (0 of 7)');
+    Expected.Add(FDirA + '.txt -> ' + FDirB + '.txt (7 of 7)');
+    Expected.Add(FDirA + 'file1.txt -> ' + FDirB + 'file1.txt (0 of 7)');
+    Expected.Add(FDirA + 'file1.txt -> ' + FDirB + 'file1.txt (7 of 7)');
+    for i := 0 to 80 do
+      Expected.Add(FDirA + 'file3 -> ' + FDirB + Format('file3 (%d of 5242882)', [i * 65536]));
+    Expected.Add(FDirA + 'file3 -> ' + FDirB + 'file3 (5242882 of 5242882)');
+    Expected.Add(FDirA + 'Sub1 -> ' + FDirB + 'Sub1');
+    Expected.Add(FDirA + 'Sub2 -> ' + FDirB + 'Sub2');
+    Expected.Add(FDirA + 'Sub2\file4.txt -> ' + FDirB + 'Sub2\file4.txt (0 of 7)');
+    Expected.Add(FDirA + 'Sub2\file4.txt -> ' + FDirB + 'Sub2\file4.txt (7 of 7)');
+    Expected.Add(FDirA + 'Sub5 -> ' + FDirB + 'Sub5');
+    Expected.Add(FDirA + 'Sub6 -> ' + FDirB + 'Sub6');
+    CheckEqualsMultiline(Expected.Text, FCallbacks.Text);
+  finally
+    Expected.Free;
+  end;
 end;
 
-procedure TestTDirectorySync.OnSyncCallback(_Sender: TObject; const _Src, _Dst: string);
+procedure TestTDirectorySync.OnDirSyncCallback(_Sender: TObject; const _Src, _Dst: string);
 begin
   FCallbacks.Add(_Src + ' -> ' + _Dst);
 end;
 
+procedure TestTDirectorySync.OnFileSyncCallback(_Sender: TObject; const _Src, _Dst: string; _Total, _Done: Int64);
+begin
+  FCallbacks.Add(_Src + ' -> ' + _Dst + ' (' + IntToStr(_Done) + ' of ' + IntToStr(_Total) + ')');
+end;
+
 procedure TestTDirectorySync.OnSyncDirAbort(_Sender: TObject; const _Src, _Dst: string);
 begin
   SysUtils.Abort;
@@ -669,11 +693,11 @@
     FailNotEquals(_Expected, _Actual, _Msg);
 end;
 
-procedure TestTDirectorySync.OnFileExistsCallback(_Sender: TObject; const _Src, _Dst: TFileInfoRec);
+procedure TestTDirectorySync.OnFileExistsCallback(_Sender: TObject; const _SrcFile, _DstFile: TFileInfoRec; var _Action: TFileExistsAction);
 begin
-  FExistingFiles.Add(_Src.Filename + ' <> ' + _Dst.Filename);
-  CheckEquals(_Src.Size, _Dst.Size, 'Size');
-  CheckEquals(_Src.Timestamp, _Dst.Timestamp, 'Timestamp');
+  FExistingFiles.Add(_SrcFile.Filename + ' <> ' + _DstFile.Filename);
+  CheckEquals(_SrcFile.Size, _DstFile.Size, 'Size');
+  CheckEquals(_SrcFile.Timestamp, _DstFile.Timestamp, 'Timestamp');
 end;
 
 procedure TestTDirectorySync.TestCheckOneWay;
@@ -731,7 +755,7 @@
   CheckEquals(10, cnt, 'number of files and subdirs');
   CheckTestfile('b\' + ExtractFileName(FFile1), 'File1');
   CheckTestfile('b\' + ExtractFileName(FFile2), 'File2');
-  CheckTestfile('b\' + ExtractFileName(FFile3), 'File3');
+  CheckTestfile('b\' + ExtractFileName(FFile3), FLargeContent);
   CheckSubdirExists('b\Sub1');
   CheckSubdirExists('b\Sub2');
   CheckTestfile('b\Sub2\' + ExtractFileName(FFile4), 'File4');
@@ -755,7 +779,7 @@
   CheckEquals(10, cnt, 'number of files and subdirs');
   CheckTestfile('a\' + ExtractFileName(FFile1), 'File1');
   CheckTestfile('a\' + ExtractFileName(FFile2), 'File2');
-  CheckTestfile('a\' + ExtractFileName(FFile3), 'File3');
+  CheckTestfile('a\' + ExtractFileName(FFile3), FLargeContent);
   CheckSubdirExists('a\Sub1');
   CheckSubdirExists('a\Sub2');
   CheckTestfile('a\Sub2\' + ExtractFileName(FFile4), 'File4');



From twm at mail.berlios.de  Thu Nov  1 15:59:18 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 15:59:18 +0100
Subject: [Dzchart-svncheckins] r237 - utilities/dzCmdLineParser/trunk/src
Message-ID: <200711011459.lA1ExIGl016993@sheep.berlios.de>

Author: twm
Date: 2007-11-01 15:59:16 +0100 (Thu, 01 Nov 2007)
New Revision: 237

Added:
   utilities/dzCmdLineParser/trunk/src/u_dzDefaultMain.pas
Log:
added u_dzDefaultMain from dzlib because it fits better here

Copied: utilities/dzCmdLineParser/trunk/src/u_dzDefaultMain.pas (from rev 236, utilities/dzLib/trunk/src/u_dzDefaultMain.pas)



From twm at mail.berlios.de  Thu Nov  1 15:59:48 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 15:59:48 +0100
Subject: [Dzchart-svncheckins] r238 - utilities/dzLib/trunk/src
Message-ID: <200711011459.lA1ExmU6017033@sheep.berlios.de>

Author: twm
Date: 2007-11-01 15:59:47 +0100 (Thu, 01 Nov 2007)
New Revision: 238

Removed:
   utilities/dzLib/trunk/src/u_dzDefaultMain.pas
Log:
moved u_dzDefaultMain dzCmdLineParser because it fits better there

Deleted: utilities/dzLib/trunk/src/u_dzDefaultMain.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzDefaultMain.pas	2007-11-01 14:59:16 UTC (rev 237)
+++ utilities/dzLib/trunk/src/u_dzDefaultMain.pas	2007-11-01 14:59:47 UTC (rev 238)
@@ -1,196 +0,0 @@
-{GXFormatter.config=twm}
-unit u_dzDefaultMain;
-
-{$I jedi.inc}
-
-interface
-
-uses
-  u_dzTranslator,
-  u_dzGetOpt;
-
-type
-  {: An "application" class for console programs.
-     To use this class, assign a descendant of TDefaultMain to the MainClass variable and
-     call Main in the project's project file like this:
-     @longcode(
-     begin
-       Application.Initialize;
-       Application.Title := '<your application's title here>';
-       MainClass := <your TDefaultMain descendant class>;
-       System.ExitCode := Main;
-     end.
-     )
-     Your descendant should override at least the following methods
-     * InitCmdLineParser
-     * doExecute }
-  TDefaultMain = class
-  protected
-    {: stores the exit code }
-    FExitCode: integer;
-    {: Created in InitCmdLineParser, allows reading the parameters }
-    FGetOpt: TGetOpt;
-    {: Initializes FGetOptr with a Parser, should be overridden, but make
-       sure you call inherited }
-    procedure InitCmdLineParser; virtual;
-    {: Shows a short help generated by the TGetOpt and exits the program by calling
-       SysUtils.Abort.
-       @param Error is an optional error message, which is displayed if not empty }
-    procedure Usage(const _Error: string = ''); virtual;
-    {: Calls the Parse method of the commandline parser. Afterwards the parameters
-       and options can be accessed using the perser's methods and properties.
-       If there is an error during parsing it automatically calls Usage with
-       the error message. If a help option (-?, -h or -Help) is found, usage
-       will be called without an error message. }
-    procedure ParseCmdLine; virtual;
-    {: This method should be overridden to implement the actual program functionality.
-       It is called after the commandline has ben parsed so you can be sure that
-       the parameters are OK.
-       @returns the exit code for the program }
-    function doExecute: integer; virtual;
-  public
-    {: Creates a TDefaultMain instance, sets the exit code to 1 (=error) and
-       initializes logging }
-    constructor Create; virtual;
-    {: Frees a TDefaultMain instance and writes the progrem end into the log }
-    destructor Destroy; override;
-    {: This method should be called after the instance of TDefaultMain has been
-       created. It initialzies the commandline parser, executes it on the given
-       commandline and calls doExecute within a try..except block.
-       If doExecute raises an exception it will write an error message to the
-       console and set the exit code to 1 (=error). If doExecute exits normally
-       it uses the result as exit code.
-       @returns the exit code for the program }
-    function Execute: integer;
-  end;
-
-type
-  {: Class-Type for the global variable MainClass }
-  TMainClass = class of TDefaultMain;
-
-var
-  {: global variable that points to the main class. This variable is used in
-     @link(Main) to create a TDefaultMain descendant and exeute it. }
-  MainClass: TMainClass = TDefaultMain;
-
-  {: Creates an instance of MainClass, calls its execute method and returns
-     the exit code.
-     @returns the exit code for the program }
-function Main: integer;
-
-implementation
-
-uses
-  Windows,
-  SysUtils,
-  Classes,
-  Dialogs,
-  u_dzLogging;
-
-constructor TDefaultMain.Create;
-begin
-  inherited;
-  // default: error
-  FExitCode := 1;
-end;
-
-destructor TDefaultMain.Destroy;
-begin
-  FreeAndNil(FGetOpt);
-  LogInfo('Program finished.');
-  inherited;
-end;
-
-function TDefaultMain.doExecute: integer;
-begin
-  MessageDlg('This program does nothing yet.', mtInformation, [mbOK], 0);
-  Result := 0;
-end;
-
-procedure TDefaultMain.Usage(const _Error: string = '');
-var
-  s: string;
-begin
-  if _Error <> '' then begin
-    s := Format(_('Error: %s') + #13#10#13#10, [_Error]);
-    LogError(_Error);
-  end;
-  MessageDlg(s + Format(
-    _('Synopsis: %s %s') + #13#10#13#10 +
-    _('Parameters:') + #13#10 +
-    '%s'#13#10#13#10 +
-    _('Options:') + #13#10 +
-    '%s',
-    [FGetOpt.ProgName, FGetOpt.GetCmdLineDesc, FGetOpt.GetParamHelp, FGetOpt.GetOptionHelp]),
-    mtError, [mbOK], 0);
-  FExitCode := 1;
-  SysUtils.Abort;
-end;
-
-procedure TDefaultMain.InitCmdLineParser;
-begin
-  FGetOpt := TGetOpt.Create();
-  FGetOpt.RegisterHelpOptions;
-end;
-
-procedure TDefaultMain.ParseCmdLine;
-begin
-  LogDebug('Cmdline: ' + System.CmdLine);
-  try
-    FGetOpt.Parse;
-  except
-    on e: exception do
-      Usage(e.Message);
-  end;
-  if FGetOpt.HelpOptionFound then
-    Usage;
-end;
-
-function TDefaultMain.Execute: integer;
-var
-  s: string;
-begin
-  InitCmdLineParser;
-  ParseCmdLine;
-  try
-    FExitCode := DoExecute;
-  except
-    on e: Exception do begin
-      s := 'Exception ' + e.ClassName + ': ' + e.Message;
-      LogError(s);
-      if IsConsole then
-        WriteLn(s);
-      FExitCode := 1;
-    end;
-  end;
-  Result := FExitCode;
-end;
-
-function Main: integer;
-var
-  MainObj: TDefaultMain;
-begin
-  Result := 1;
-  try
-    MainObj := MainClass.Create;
-    try
-      Result := MainObj.Execute;
-    finally
-      MainObj.Free;
-    end;
-  except
-    // Exception handling is done within the MainObj. If something gets here
-    // it cannot be handled anyway.
-    // - but maybe log it? -- AS
-    on e: Exception do begin
-      LogError('Exception in function Main: ' + e.Message + ' ' + e.ClassName);
-    end;
-  end;
-  if DebugHook <> 0 then begin
-    Write('Exit Code: ', Result, ' -- press Enter');
-    Readln;
-  end;
-end;
-
-end.
-



From twm at mail.berlios.de  Thu Nov  1 16:04:10 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:04:10 +0100
Subject: [Dzchart-svncheckins] r239 - 3rd
Message-ID: <200711011504.lA1F4Agn017601@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:04:07 +0100 (Thu, 01 Nov 2007)
New Revision: 239

Added:
   3rd/jedi_inc/
Log:
Created folder remotely



From twm at mail.berlios.de  Thu Nov  1 16:04:54 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:04:54 +0100
Subject: [Dzchart-svncheckins] r240 - 3rd/jedi_inc
Message-ID: <200711011504.lA1F4sro017634@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:04:52 +0100 (Thu, 01 Nov 2007)
New Revision: 240

Added:
   3rd/jedi_inc/trunk/
Log:
Created folder remotely



From twm at mail.berlios.de  Thu Nov  1 16:05:59 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:05:59 +0100
Subject: [Dzchart-svncheckins] r241 - 3rd/jedi_inc/trunk
Message-ID: <200711011505.lA1F5x31017704@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:05:57 +0100 (Thu, 01 Nov 2007)
New Revision: 241

Added:
   3rd/jedi_inc/trunk/jedi.inc
Log:
Copied remotely

Copied: 3rd/jedi_inc/trunk/jedi.inc (from rev 240, 3rd/jcl/1.99/trunk/source/jedi.inc)



From twm at mail.berlios.de  Thu Nov  1 16:12:35 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:12:35 +0100
Subject: [Dzchart-svncheckins] r242 - utilities/dzLib/trunk
Message-ID: <200711011512.lA1FCZNN018002@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:12:34 +0100 (Thu, 01 Nov 2007)
New Revision: 242

Removed:
   utilities/dzLib/trunk/inc/
Log:
removed jed.inc subdir, will be replaced by external



From twm at mail.berlios.de  Thu Nov  1 16:15:53 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:15:53 +0100
Subject: [Dzchart-svncheckins] r243 - in utilities/dzLib/trunk: .
	tests/dzfileutils
Message-ID: <200711011515.lA1FFrTd018164@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:15:50 +0100 (Thu, 01 Nov 2007)
New Revision: 243

Removed:
   utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.bdsproj
Modified:
   utilities/dzLib/trunk/
   utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj
Log:
* added external for jedi.inc
* changed searhc path from inc to jedi_inc


Property changes on: utilities/dzLib/trunk
___________________________________________________________________
Name: svn:externals
   + jedi_inc https://svn.berlios.de/svnroot/repos/dzchart/3rd/jedi_inc/trunk


Deleted: utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.bdsproj
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.bdsproj	2007-11-01 15:12:34 UTC (rev 242)
+++ utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.bdsproj	2007-11-01 15:15:50 UTC (rev 243)
@@ -1,175 +0,0 @@
-?<?xml version="1.0" encoding="utf-8"?>
-<BorlandProject>
-	<PersonalityInfo>
-		<Option>
-			<Option Name="Personality">Delphi.Personality</Option>
-			<Option Name="ProjectType">VCLApplication</Option>
-			<Option Name="Version">1.0</Option>
-			<Option Name="GUID">{A2F53790-FB5A-413F-884F-44D82047A365}</Option>
-		</Option>
-	</PersonalityInfo>
-	<Delphi.Personality>
-		<Source>
-			<Source Name="MainSource">DUnitTest_dzFileUtils.dpr</Source>
-		</Source>
-		<FileVersion>
-			<FileVersion Name="Version">7.0</FileVersion>
-		</FileVersion>
-		<Compiler>
-			<Compiler Name="A">8</Compiler>
-			<Compiler Name="B">0</Compiler>
-			<Compiler Name="C">1</Compiler>
-			<Compiler Name="D">1</Compiler>
-			<Compiler Name="E">0</Compiler>
-			<Compiler Name="F">0</Compiler>
-			<Compiler Name="G">1</Compiler>
-			<Compiler Name="H">1</Compiler>
-			<Compiler Name="I">1</Compiler>
-			<Compiler Name="J">0</Compiler>
-			<Compiler Name="K">0</Compiler>
-			<Compiler Name="L">1</Compiler>
-			<Compiler Name="M">0</Compiler>
-			<Compiler Name="N">1</Compiler>
-			<Compiler Name="O">1</Compiler>
-			<Compiler Name="P">1</Compiler>
-			<Compiler Name="Q">0</Compiler>
-			<Compiler Name="R">0</Compiler>
-			<Compiler Name="S">0</Compiler>
-			<Compiler Name="T">0</Compiler>
-			<Compiler Name="U">0</Compiler>
-			<Compiler Name="V">1</Compiler>
-			<Compiler Name="W">0</Compiler>
-			<Compiler Name="X">1</Compiler>
-			<Compiler Name="Y">1</Compiler>
-			<Compiler Name="Z">1</Compiler>
-			<Compiler Name="ShowHints">True</Compiler>
-			<Compiler Name="ShowWarnings">True</Compiler>
-			<Compiler Name="UnitAliases">WinTypes=Windows;WinProcs=Windows;DbiTypes=BDE;DbiProcs=BDE;DbiErrs=BDE;</Compiler>
-			<Compiler Name="NamespacePrefix"></Compiler>
-			<Compiler Name="GenerateDocumentation">False</Compiler>
-			<Compiler Name="DefaultNamespace"></Compiler>
-			<Compiler Name="SymbolDeprecated">True</Compiler>
-			<Compiler Name="SymbolLibrary">True</Compiler>
-			<Compiler Name="SymbolPlatform">False</Compiler>
-			<Compiler Name="SymbolExperimental">True</Compiler>
-			<Compiler Name="UnitLibrary">True</Compiler>
-			<Compiler Name="UnitPlatform">False</Compiler>
-			<Compiler Name="UnitDeprecated">True</Compiler>
-			<Compiler Name="UnitExperimental">True</Compiler>
-			<Compiler Name="HResultCompat">True</Compiler>
-			<Compiler Name="HidingMember">True</Compiler>
-			<Compiler Name="HiddenVirtual">True</Compiler>
-			<Compiler Name="Garbage">True</Compiler>
-			<Compiler Name="BoundsError">True</Compiler>
-			<Compiler Name="ZeroNilCompat">True</Compiler>
-			<Compiler Name="StringConstTruncated">True</Compiler>
-			<Compiler Name="ForLoopVarVarPar">True</Compiler>
-			<Compiler Name="TypedConstVarPar">True</Compiler>
-			<Compiler Name="AsgToTypedConst">True</Compiler>
-			<Compiler Name="CaseLabelRange">True</Compiler>
-			<Compiler Name="ForVariable">True</Compiler>
-			<Compiler Name="ConstructingAbstract">True</Compiler>
-			<Compiler Name="ComparisonFalse">True</Compiler>
-			<Compiler Name="ComparisonTrue">True</Compiler>
-			<Compiler Name="ComparingSignedUnsigned">True</Compiler>
-			<Compiler Name="CombiningSignedUnsigned">True</Compiler>
-			<Compiler Name="UnsupportedConstruct">True</Compiler>
-			<Compiler Name="FileOpen">True</Compiler>
-			<Compiler Name="FileOpenUnitSrc">True</Compiler>
-			<Compiler Name="BadGlobalSymbol">True</Compiler>
-			<Compiler Name="DuplicateConstructorDestructor">True</Compiler>
-			<Compiler Name="InvalidDirective">True</Compiler>
-			<Compiler Name="PackageNoLink">True</Compiler>
-			<Compiler Name="PackageThreadVar">True</Compiler>
-			<Compiler Name="ImplicitImport">True</Compiler>
-			<Compiler Name="HPPEMITIgnored">True</Compiler>
-			<Compiler Name="NoRetVal">True</Compiler>
-			<Compiler Name="UseBeforeDef">True</Compiler>
-			<Compiler Name="ForLoopVarUndef">True</Compiler>
-			<Compiler Name="UnitNameMismatch">True</Compiler>
-			<Compiler Name="NoCFGFileFound">True</Compiler>
-			<Compiler Name="ImplicitVariants">True</Compiler>
-			<Compiler Name="UnicodeToLocale">True</Compiler>
-			<Compiler Name="LocaleToUnicode">True</Compiler>
-			<Compiler Name="ImagebaseMultiple">True</Compiler>
-			<Compiler Name="SuspiciousTypecast">True</Compiler>
-			<Compiler Name="PrivatePropAccessor">True</Compiler>
-			<Compiler Name="UnsafeType">False</Compiler>
-			<Compiler Name="UnsafeCode">False</Compiler>
-			<Compiler Name="UnsafeCast">False</Compiler>
-			<Compiler Name="OptionTruncated">True</Compiler>
-			<Compiler Name="WideCharReduced">True</Compiler>
-			<Compiler Name="DuplicatesIgnored">True</Compiler>
-			<Compiler Name="UnitInitSeq">True</Compiler>
-			<Compiler Name="LocalPInvoke">True</Compiler>
-			<Compiler Name="MessageDirective">True</Compiler>
-			<Compiler Name="CodePage"></Compiler>
-		</Compiler>
-		<Linker>
-			<Linker Name="MapFile">0</Linker>
-			<Linker Name="OutputObjs">0</Linker>
-			<Linker Name="GenerateHpps">False</Linker>
-			<Linker Name="ConsoleApp">1</Linker>
-			<Linker Name="DebugInfo">False</Linker>
-			<Linker Name="RemoteSymbols">False</Linker>
-			<Linker Name="GenerateDRC">False</Linker>
-			<Linker Name="MinStackSize">16384</Linker>
-			<Linker Name="MaxStackSize">1048576</Linker>
-			<Linker Name="ImageBase">4194304</Linker>
-			<Linker Name="ExeDescription"></Linker>
-		</Linker>
-		<Directories>
-			<Directories Name="OutputDir"></Directories>
-			<Directories Name="UnitOutputDir"></Directories>
-			<Directories Name="PackageDLLOutputDir"></Directories>
-			<Directories Name="PackageDCPOutputDir"></Directories>
-			<Directories Name="SearchPath">..\..\inc</Directories>
-			<Directories Name="Packages"></Directories>
-			<Directories Name="Conditionals">no_translation</Directories>
-			<Directories Name="DebugSourceDirs"></Directories>
-			<Directories Name="UsePackages">False</Directories>
-		</Directories>
-		<Parameters>
-			<Parameters Name="RunParams"></Parameters>
-			<Parameters Name="HostApplication"></Parameters>
-			<Parameters Name="Launcher"></Parameters>
-			<Parameters Name="UseLauncher">False</Parameters>
-			<Parameters Name="DebugCWD"></Parameters>
-			<Parameters Name="Debug Symbols Search Path"></Parameters>
-			<Parameters Name="LoadAllSymbols">True</Parameters>
-			<Parameters Name="LoadUnspecifiedSymbols">False</Parameters>
-		</Parameters>
-		<Language>
-			<Language Name="ActiveLang"></Language>
-			<Language Name="ProjectLang">$00000000</Language>
-			<Language Name="RootDir"></Language>
-		</Language>
-		<VersionInfo>
-			<VersionInfo Name="IncludeVerInfo">False</VersionInfo>
-			<VersionInfo Name="AutoIncBuild">False</VersionInfo>
-			<VersionInfo Name="MajorVer">1</VersionInfo>
-			<VersionInfo Name="MinorVer">0</VersionInfo>
-			<VersionInfo Name="Release">0</VersionInfo>
-			<VersionInfo Name="Build">0</VersionInfo>
-			<VersionInfo Name="Debug">False</VersionInfo>
-			<VersionInfo Name="PreRelease">False</VersionInfo>
-			<VersionInfo Name="Special">False</VersionInfo>
-			<VersionInfo Name="Private">False</VersionInfo>
-			<VersionInfo Name="DLL">False</VersionInfo>
-			<VersionInfo Name="Locale">2057</VersionInfo>
-			<VersionInfo Name="CodePage">1252</VersionInfo>
-		</VersionInfo>
-		<VersionInfoKeys>
-			<VersionInfoKeys Name="CompanyName"></VersionInfoKeys>
-			<VersionInfoKeys Name="FileDescription"></VersionInfoKeys>
-			<VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys>
-			<VersionInfoKeys Name="InternalName"></VersionInfoKeys>
-			<VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys>
-			<VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys>
-			<VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys>
-			<VersionInfoKeys Name="ProductName"></VersionInfoKeys>
-			<VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys>
-			<VersionInfoKeys Name="Comments"></VersionInfoKeys>
-		</VersionInfoKeys>
-	</Delphi.Personality>
-</BorlandProject>

Modified: utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj
===================================================================
--- utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj	2007-11-01 15:12:34 UTC (rev 242)
+++ utilities/dzLib/trunk/tests/dzfileutils/DUnitTest_dzFileUtils.dproj	2007-11-01 15:15:50 UTC (rev 243)
@@ -17,10 +17,10 @@
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <Version>7.0</Version>
     <DCC_Define>DEBUG;_CONSOLE_TESTRUNNER;no_translation</DCC_Define>
-    <DCC_UnitSearchPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;;$(BDS)\Source\DUnit\src;..\..\inc</DCC_UnitSearchPath>
-    <DCC_ResourcePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;;$(BDS)\Source\DUnit\src;..\..\inc</DCC_ResourcePath>
-    <DCC_ObjPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;;$(BDS)\Source\DUnit\src;..\..\inc</DCC_ObjPath>
-    <DCC_IncludePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;;$(BDS)\Source\DUnit\src;..\..\inc</DCC_IncludePath>
+    <DCC_UnitSearchPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;$(BDS)\Source\DUnit\src;..\..\jedi_inc</DCC_UnitSearchPath>
+    <DCC_ResourcePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;$(BDS)\Source\DUnit\src;..\..\jedi_inc</DCC_ResourcePath>
+    <DCC_ObjPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;$(BDS)\Source\DUnit\src;..\..\jedi_inc</DCC_ObjPath>
+    <DCC_IncludePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;$(BDS)\Source\DUnit\src;..\..\jedi_inc</DCC_IncludePath>
     <DCC_DcuOutput>dcu</DCC_DcuOutput>
     <DCC_ObjOutput>dcu</DCC_ObjOutput>
     <DCC_HppOutput>dcu</DCC_HppOutput>



From twm at mail.berlios.de  Thu Nov  1 16:17:50 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:17:50 +0100
Subject: [Dzchart-svncheckins] r244 - utilities/dzCmdLineParser/trunk
Message-ID: <200711011517.lA1FHoq1018220@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:17:48 +0100 (Thu, 01 Nov 2007)
New Revision: 244

Modified:
   utilities/dzCmdLineParser/trunk/
Log:
added necessary externals (dzlib / jedi_inc)


Property changes on: utilities/dzCmdLineParser/trunk
___________________________________________________________________
Name: svn:externals
   - libs/dztemplates https://svn.berlios.de/svnroot/repos/dztemplates/trunk

   + libs/dztemplates https://svn.berlios.de/svnroot/repos/dztemplates/trunk
libs/jedi_inc https://svn.berlios.de/svnroot/repos/dzchart/3rd/jedi_inc/trunk
libs/dzlib https://svn.berlios.de/svnroot/repos/dzchart/utilities/dzLib/trunk




From twm at mail.berlios.de  Thu Nov  1 16:24:05 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:24:05 +0100
Subject: [Dzchart-svncheckins] r245 - in utilities/dzPrepBuild/trunk: .
	buildtools src
Message-ID: <200711011524.lA1FO5HB018432@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:23:45 +0100 (Thu, 01 Nov 2007)
New Revision: 245

Modified:
   utilities/dzPrepBuild/trunk/
   utilities/dzPrepBuild/trunk/buildtools/PrepBuild.exe
   utilities/dzPrepBuild/trunk/src/PrepBuild.dpr
   utilities/dzPrepBuild/trunk/src/PrepBuild.dproj
   utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini
   utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini
Log:
adapted to new search paths and moving u_dzDefaultMain from dzlib to dzCmdLineParser


Property changes on: utilities/dzPrepBuild/trunk
___________________________________________________________________
Name: svn:externals
   - libs\dzlib https://svn.berlios.de/svnroot/repos/dzchart/utilities/dzLib/trunk
libs\dzCmdLineParser https://svn.berlios.de/svnroot/repos/dzchart/utilities/dzCmdLineParser/trunk
libs\dzTemplates https://svn.berlios.de/svnroot/repos/dztemplates/trunk
libs\jcl https://svn.berlios.de/svnroot/repos/dzchart/3rd/jcl/1.99/tags/1

   + libs\dzlib https://svn.berlios.de/svnroot/repos/dzchart/utilities/dzLib/trunk
libs\dzCmdLineParser\src https://svn.berlios.de/svnroot/repos/dzchart/utilities/dzCmdLineParser/trunk/src
libs\dzTemplates https://svn.berlios.de/svnroot/repos/dztemplates/trunk
libs\jcl https://svn.berlios.de/svnroot/repos/dzchart/3rd/jcl/1.99/tags/1


Modified: utilities/dzPrepBuild/trunk/buildtools/PrepBuild.exe
===================================================================
(Binary files differ)

Modified: utilities/dzPrepBuild/trunk/src/PrepBuild.dpr
===================================================================
--- utilities/dzPrepBuild/trunk/src/PrepBuild.dpr	2007-11-01 15:17:48 UTC (rev 244)
+++ utilities/dzPrepBuild/trunk/src/PrepBuild.dpr	2007-11-01 15:23:45 UTC (rev 245)
@@ -14,10 +14,10 @@
   u_DofVersionInfo in 'u_DofVersionInfo.pas',
   u_IniVersionInfo in 'u_IniVersionInfo.pas',
   u_CentralIniVersionInfo in 'u_CentralIniVersionInfo.pas',
-  u_dzDefaultMain in '..\libs\dzlib\src\u_dzDefaultMain.pas',
   u_PrepBuildMain in 'u_PrepBuildMain.pas',
   u_DummyVersionInfo in 'u_DummyVersionInfo.pas',
-  u_AbstractVersionInfo in 'u_AbstractVersionInfo.pas';
+  u_AbstractVersionInfo in 'u_AbstractVersionInfo.pas',
+  u_dzDefaultMain in '..\libs\dzCmdLineParser\src\u_dzDefaultMain.pas';
 
 {$R *_icon.res}
 {$R *_version.res}

Modified: utilities/dzPrepBuild/trunk/src/PrepBuild.dproj
===================================================================
--- utilities/dzPrepBuild/trunk/src/PrepBuild.dproj	2007-11-01 15:17:48 UTC (rev 244)
+++ utilities/dzPrepBuild/trunk/src/PrepBuild.dproj	2007-11-01 15:23:45 UTC (rev 245)
@@ -25,10 +25,10 @@
     <DCC_HppOutput>..\dcu</DCC_HppOutput>
     <DCC_Define>DEBUG;no_translation;NO_TRANSLATION_HINT</DCC_Define>
     <DCC_ExeOutput>..</DCC_ExeOutput>
-    <DCC_UnitSearchPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_UnitSearchPath>
-    <DCC_ResourcePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_ResourcePath>
-    <DCC_ObjPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_ObjPath>
-    <DCC_IncludePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_IncludePath>
+    <DCC_UnitSearchPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser\src;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_UnitSearchPath>
+    <DCC_ResourcePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser\src;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_ResourcePath>
+    <DCC_ObjPath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser\src;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_ObjPath>
+    <DCC_IncludePath>$(BDS)\lib\Debug;$(BDS)\Lib\Debug\Indy10;..\libs\dzlib\src;..\libs\dzCmdLineParser\src;..\libs\dztemplates\templates;..\libs\dztemplates\units;..\libs\jcl\source;..\libs\jcl\source\common;..\libs\jcl\source\windows;..\libs\jcl\source\vcl</DCC_IncludePath>
     <DCC_SYMBOL_PLATFORM>False</DCC_SYMBOL_PLATFORM>
     <DCC_UNIT_PLATFORM>False</DCC_UNIT_PLATFORM>
     <DCC_Optimize>False</DCC_Optimize>
@@ -40,8 +40,6 @@
 <BorlandProject><Delphi.Personality><Parameters><Parameters Name="UseLauncher">False</Parameters><Parameters Name="LoadAllSymbols">True</Parameters><Parameters Name="LoadUnspecifiedSymbols">False</Parameters><Parameters Name="RunParams">--incbuild --readini=src\prepbuild --exec=prep.cmd</Parameters></Parameters><VersionInfo><VersionInfo Name="IncludeVerInfo">False</VersionInfo><VersionInfo Name="AutoIncBuild">False</VersionInfo><VersionInfo Name="MajorVer">1</VersionInfo><VersionInfo Name="MinorVer">0</VersionInfo><VersionInfo Name="Release">0</VersionInfo><VersionInfo Name="Build">0</VersionInfo><VersionInfo Name="Debug">False</VersionInfo><VersionInfo Name="PreRelease">False</VersionInfo><VersionInfo Name="Special">False</VersionInfo><VersionInfo Name="Private">False</VersionInfo><VersionInfo Name="DLL">False</VersionInfo><VersionInfo Name="Locale">2057</VersionInfo><VersionInfo Name="CodePage">1252</VersionInfo></VersionInfo><Excluded_Packages>
       
       
-      
-      
       <Excluded_Packages Name="$(BDS)\bin\dclofficexp100.bpl">Microsoft Office XP Sample Automation Server Wrapper Components</Excluded_Packages>
       <Excluded_Packages Name="$(BDS)\bin\dcloffice2k100.bpl">Microsoft Office 2000 Sample Automation Server Wrapper Components</Excluded_Packages>
     </Excluded_Packages><Source><Source Name="MainSource">PrepBuild.dpr</Source></Source><VersionInfoKeys><VersionInfoKeys Name="CompanyName"></VersionInfoKeys><VersionInfoKeys Name="FileDescription"></VersionInfoKeys><VersionInfoKeys Name="FileVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="InternalName"></VersionInfoKeys><VersionInfoKeys Name="LegalCopyright"></VersionInfoKeys><VersionInfoKeys Name="LegalTrademarks"></VersionInfoKeys><VersionInfoKeys Name="OriginalFilename"></VersionInfoKeys><VersionInfoKeys Name="ProductName"></VersionInfoKeys><VersionInfoKeys Name="ProductVersion">1.0.0.0</VersionInfoKeys><VersionInfoKeys Name="Comments"></VersionInfoKeys></VersionInfoKeys></Delphi.Personality><ModelSupport>False</ModelSupport></BorlandProject></BorlandProject>
@@ -54,7 +52,7 @@
     <DelphiCompile Include="PrepBuild.dpr">
       <MainSource>MainSource</MainSource>
     </DelphiCompile>
-    <DCCReference Include="..\libs\dzlib\src\u_dzDefaultMain.pas" />
+    <DCCReference Include="..\libs\dzCmdLineParser\src\u_dzDefaultMain.pas" />
     <DCCReference Include="d_BdsProjVersionInfo.pas">
       <Form>dm_BdsProjVersionInfo</Form>
       <DesignClass>TDataModule</DesignClass>

Modified: utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini
===================================================================
--- utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini	2007-11-01 15:17:48 UTC (rev 244)
+++ utilities/dzPrepBuild/trunk/src/PrepBuild_BuildNo.ini	2007-11-01 15:23:45 UTC (rev 245)
@@ -1,3 +1,3 @@
 [Version Info]
-Build=104
+Build=109
 

Modified: utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini
===================================================================
--- utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini	2007-11-01 15:17:48 UTC (rev 244)
+++ utilities/dzPrepBuild/trunk/src/PrepBuild_Version.ini	2007-11-01 15:23:45 UTC (rev 245)
@@ -16,7 +16,7 @@
 [Version Info Keys]
 CompanyName=dummzeuch.de
 FileDescription=commandline and IDE prebuild tool
-FileVersion=1.1.0.104
+FileVersion=1.1.0.109
 InternalName=PrepBuild
 LegalCopyright=Copyright 2002-2007 by Thomas Mueller
 LegalTrademarks=



From twm at mail.berlios.de  Thu Nov  1 16:26:47 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 1 Nov 2007 16:26:47 +0100
Subject: [Dzchart-svncheckins] r246 - utilities/dzPrepBuild/trunk
Message-ID: <200711011526.lA1FQlJk018567@sheep.berlios.de>

Author: twm
Date: 2007-11-01 16:26:43 +0100 (Thu, 01 Nov 2007)
New Revision: 246

Added:
   utilities/dzPrepBuild/trunk/dcu/
Log:
added dcu output dir



From twm at mail.berlios.de  Sat Nov  3 11:45:08 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Sat, 3 Nov 2007 11:45:08 +0100
Subject: [Dzchart-svncheckins] r247 - utilities/dzCmdLineParser/trunk/src
Message-ID: <200711031045.lA3Aj8j9004624@sheep.berlios.de>

Author: twm
Date: 2007-11-03 11:45:06 +0100 (Sat, 03 Nov 2007)
New Revision: 247

Modified:
   utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser.pas
Log:
corrected typo in comment

Modified: utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser.pas
===================================================================
--- utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser.pas	2007-11-01 15:26:43 UTC (rev 246)
+++ utilities/dzCmdLineParser/trunk/src/u_dzCmdLineParser.pas	2007-11-03 10:45:06 UTC (rev 247)
@@ -140,7 +140,7 @@
 type
   TCmdLineParser = class
   public
-    {: parses the CmdLine string and returns the options and paramteters
+    {: parses the CmdLine string and returns the options and parameters
        @param CmdLine is a string with the commandline to parse
        @param Options is a TStrings instance which returns all options found as
               name=value pairs,



From twm at mail.berlios.de  Thu Nov 15 10:53:56 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 15 Nov 2007 10:53:56 +0100
Subject: [Dzchart-svncheckins] r248 - in utilities/dzLib/trunk: forms src
Message-ID: <200711150953.lAF9rudq023928@sheep.berlios.de>

Author: twm
Date: 2007-11-15 10:53:50 +0100 (Thu, 15 Nov 2007)
New Revision: 248

Added:
   utilities/dzLib/trunk/src/u_dzRingBuffer.pas
Modified:
   utilities/dzLib/trunk/forms/w_dzDialog.pas
   utilities/dzLib/trunk/src/u_dzConvertUtils.pas
   utilities/dzLib/trunk/src/u_dzFileUtils.pas
   utilities/dzLib/trunk/src/u_dzMiscUtils.pas
   utilities/dzLib/trunk/src/u_dzNamedThread.pas
   utilities/dzLib/trunk/src/u_dzStringUtils.pas
   utilities/dzLib/trunk/src/u_dzVclUtils.pas
Log:
some incompatible changes

Modified: utilities/dzLib/trunk/forms/w_dzDialog.pas
===================================================================
--- utilities/dzLib/trunk/forms/w_dzDialog.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/forms/w_dzDialog.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -221,6 +221,8 @@
     class function ShowException(_e: Exception; const _Message: string;
       const _Buttons: array of TDialogButtonEnum; const _OptionDesc: string = '';
       _Parent: TComponent = nil): integer; overload;
+    class function ShowError(const _ErrorMsg, _Details: string; const _Buttons: array of TDialogButtonEnum;
+      const _OptionDesc: string = ''; _Parent: TComponent = nil): integer;
     {: Simple function to display a message.
        This will display a dialog with the icon indicated by DialogType, the
        Message given, containing the Buttons specified and optionally an
@@ -229,14 +231,14 @@
        @param Message is the message text to display
        @param Buttons is an array of buttons to show (Note: This is an array of
                       buttons, not a set, so the order is important!)
+       @param Owner is the owner component to be used in the constructor, defaults
+                     to nil
        @param OptionDesc gives the description for the Buttons, if not given,
                          defaults to an empty string
-       @param Parent is the parent component to be used in the constructor, defaults
-                     to nil
        @returns one of the mrXxxx values }
     class function ShowMessage(_DialogType: TMsgDlgType; const _Message: string;
-      const _Buttons: array of TDialogButtonEnum; const _OptionDesc: string = '';
-      _Parent: TComponent = nil): integer; overload;
+      const _Buttons: array of TDialogButtonEnum; _Owner: TComponent = nil;
+      const _OptionDesc: string = ''): integer; overload;
     {: Complex function to display a message.
        This will display a dialog with the icon indicated by DialogType, the
        Message given, containing the Buttons specified and optionally an
@@ -252,15 +254,16 @@
                            the custom buttons, the number of entries must
                            correspond to the number of dbeCustom entries in the
                            Buttons array
+       @param Owner is the owner component to be used in the constructor, defaults
+                     to nil
        @param OptionDesc gives the description for the Buttons, if not given,
                          defaults to an empty string
-       @param Parent is the parent component to be used in the constructor, defaults
-                     to nil
        @returns one of the mrXxxx values }
     class function ShowMessage(_DialogType: TMsgDlgType; const _Message: string;
       const _Buttons: array of TDialogButtonEnum; const _CustomButtons: array of string;
       const _CustomResults: array of integer;
-      const _OptionDesc: string = ''; _Parent: TComponent = nil): integer; overload;
+      _Owner: TComponent = nil;
+      const _OptionDesc: string = ''): integer; overload;
     {: Creates a Tf_dzDialog instance, shows it and returns it. The created
        dialog instance must be freed by the caller
        @param DialogType gives the icon to display
@@ -313,12 +316,12 @@
 class function Tf_dzDialog.ShowMessage(_DialogType: TMsgDlgType;
   const _Message: string; const _Buttons: array of TDialogButtonEnum;
   const _CustomButtons: array of string; const _CustomResults: array of integer;
-  const _OptionDesc: string; _Parent: TComponent): integer;
+  _Owner: TComponent = nil;  const _OptionDesc: string=''): integer;
 var
   frm: Tf_dzDialog;
   i: Integer;
 begin
-  frm := Tf_dzDialog.Create(_Parent);
+  frm := Tf_dzDialog.Create(_Owner);
   try
     frm.ShowDetailButton := false;
     frm.SetVisibleButtons(_Buttons);
@@ -338,11 +341,11 @@
 end;
 
 class function Tf_dzDialog.ShowMessage(_DialogType: TMsgDlgType; const _Message: string;
-  const _Buttons: array of TDialogButtonEnum; const _OptionDesc: string = ''; _Parent: TComponent = nil): integer;
+  const _Buttons: array of TDialogButtonEnum; _Owner: TComponent = nil; const _OptionDesc: string = ''): integer;
 var
   frm: Tf_dzDialog;
 begin
-  frm := Tf_dzDialog.Create(_Parent);
+  frm := Tf_dzDialog.Create(_Owner);
   try
     frm.ShowDetailButton := false;
     frm.SetVisibleButtons(_Buttons);
@@ -417,6 +420,24 @@
   Result := ShowException(_e, '', [dbeOk], '', _Parent);
 end;
 
+class function Tf_dzDialog.ShowError(const _ErrorMsg, _Details: string; const _Buttons: array of TDialogButtonEnum;
+  const _OptionDesc: string = ''; _Parent: TComponent = nil): integer;
+var
+  frm: Tf_dzDialog;
+begin
+  frm := Tf_dzDialog.Create(_Parent);
+  try
+    frm.UserMessage := _ErrorMsg;
+    frm.Details := _Details;
+    frm.ShowDetailButton := true;
+    frm.SetVisibleButtons(_Buttons);
+    frm.OptionDescription := _OptionDesc;
+    Result := frm.ShowModal;
+  finally
+    frm.Free;
+  end;
+end;
+
 { Copied from Dialogs.pas }
 
 function GetAveCharSize(Canvas: TCanvas): TPoint;

Modified: utilities/dzLib/trunk/src/u_dzConvertUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzConvertUtils.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/src/u_dzConvertUtils.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -185,6 +185,8 @@
    @returns a string representation of the floating point value }
 function Float2Str(_flt: extended; _Decimals: integer): string; overload;
 
+function TryRound(_flt: extended; out _wrd: word): boolean;
+
 // these contants refer to the "Xx binary byte" units as defined by the
 // International Electronical Commission (IEC) and endorsed by the
 // IEE and CiPM
@@ -449,6 +451,17 @@
   Str(_Flt: 0: _Decimals, Result);
 end;
 
+function TryRound(_flt: extended; out _wrd: word): boolean;
+begin
+  Result := (_flt >= 0) and (_flt <= $FFFF);
+  if Result then
+    try
+      _wrd := Round(_flt);
+    except
+      Result := false;
+    end;
+end;
+
 function Str2Int(_s: string; _Default: integer): integer;
 var
   e: integer;

Modified: utilities/dzLib/trunk/src/u_dzFileUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzFileUtils.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/src/u_dzFileUtils.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -1,5 +1,5 @@
 {GXFormatter.config=twm}
-{: implements utility functions for file accesss }
+{! implements utility functions for file accesss }
 unit u_dzFileUtils;
 
 {$I jedi.inc}
@@ -14,7 +14,7 @@
 type
   EFileUtils = class(Exception);
   ECreateUniqueDir = class(EFileUtils);
-  {: raised by DelTree if the DirName parameter is not a valid directory name }
+  {! raised by DelTree if the DirName parameter is not a valid directory name }
   EDirNotFound = class(EFileUtils);
   EPathTooLong = class(EFileUtils);
   EInvalidPropertyCombination = class(EFileUtils);
@@ -40,86 +40,86 @@
   end;
 
 type
-  {: a simple wrapper around FindFirst/FindNext which allows to search for
+  {! a simple wrapper around FindFirst/FindNext which allows to search for
      specified attributes only (e.g. only directories), it automatically
      ignores the special '.' and '..' directories. }
   TSimpleDirEnumerator = class
   protected
-    {: stores the search mask ('c:\windows\*.exe') }
+    {! stores the search mask ('c:\windows\*.exe') }
     FMask: string;
-    {: set of attributes a file must match }
+    {! set of attributes a file must match }
     FMustHaveAttr: TFileAttributeSet;
-    {: set of attributes a file may have }
+    {! set of attributes a file may have }
     FMayHaveAttr: TFileAttributeSet;
-    {: internally used TSearchRec structure }
+    {! internally used TSearchRec structure }
     FSr: TSearchRec;
-    {: true if FindFirst was called and returned no error code }
+    {! true if FindFirst was called and returned no error code }
     FActive: boolean;
-    {: number of matching files found }
+    {! number of matching files found }
     FMatchCount: integer;
   public
-    {: creates a TSimpleDirEnumerator, sets the Mask, MustHaveAttr and MayHaveAttr
+    {! creates a TSimpleDirEnumerator, sets the Mask, MustHaveAttr and MayHaveAttr
        properties.
        MustHaveAttr is set to [] and MayHaveAttr is set to include all possible
        attributes, so calling FindNext will find any files or subdirectories,
        but the special '.' and '..' directories
        @param(Mask is the file search mask) }
     constructor Create(const _Mask: string);
-    {: Destructor, will call FindClose if necessary }
+    {! Destructor, will call FindClose if necessary }
     destructor Destroy; override;
-    {: creates a TSimpleDirEnumerator, calls its FindAll method and frees it }
+    {! creates a TSimpleDirEnumerator, calls its FindAll method and frees it }
     class function Execute(const _Mask: string; _List: TStrings): integer;
-    {: Calls SysUtils.FindFirst on first call and SysUtls.FindNext in later
+    {! Calls SysUtils.FindFirst on first call and SysUtls.FindNext in later
        calls.
        @param Filename is the name of the file found, if result is true, if you need
               more information about it, use the SR property
        @Returns true, if a matching file was found, false otherwise }
     function FindNext(out _Filename: string): boolean; overload;
-    {: Calls SysUtils.FindFirst on first call and SysUtls.FindNext in later
+    {! Calls SysUtils.FindFirst on first call and SysUtls.FindNext in later
        calls. If it returns true, use the SR property to get information about
        the file. See the overloaded @link(FindNext) version if you need only
        the filename.
        @Returns(true, if a matching file was found, false otherwise) }
     function FindNext: boolean; overload;
-    {: Calls FindNext until it returns false, stores all filenames in List and
+    {! Calls FindNext until it returns false, stores all filenames in List and
        returns the number of files found.
        @param List is a TStrings object which will be filled with the filenames
               of matching files, may be nil.
        @returns the number of mathing files }
     function FindAll(_List: TStrings = nil): integer;
-    {: Calls FindClose so FindNext will start again. Reset does not change any
+    {! Calls FindClose so FindNext will start again. Reset does not change any
        properties (e.g. Mask, MustHaveAttr, MayHaveAttr) }
     procedure Reset;
-    {: Returns the number of matches so far, that is the number of successful
+    {! Returns the number of matches so far, that is the number of successful
        calls to FindNext }
     property MatchCount: integer read FMatchCount;
-    {: Returns the search mask }
+    {! Returns the search mask }
     property Mask: string read FMask; // write fMask;
-    {: the set of attributes a file must have to be found by FindNext }
+    {! the set of attributes a file must have to be found by FindNext }
     property MustHaveAttr: TFileAttributeSet read FMustHaveAttr write FMustHaveAttr;
-    {: the set of allowed attributes for a file to be found by FindNext }
+    {! the set of allowed attributes for a file to be found by FindNext }
     property MayHaveAttr: TFileAttributeSet read FMayHaveAttr write FMayHaveAttr;
-    {: the search rec containing additional information about the file }
+    {! the search rec containing additional information about the file }
     property Sr: TSearchRec read FSr;
   end;
 
 type
-  {: represents the status of a CopyFile/MoveFileWithProgress operation, passed
+  {! represents the status of a CopyFile/MoveFileWithProgress operation, passed
      as parameter to the callback function. }
   TCopyProgressStatus = class
   public
   {(*}
   type
-    {: possible return values for the callback function }
+    {! possible return values for the callback function }
     TProgressResult = (
-      prContinue, {:< continue with the copy/move operation }
-      prCancel,   {:< cancel the operation, cannot be resumed }
-      prStop,     {:< stop the operation, can be resumed, if cfwRestartable was passed }
-      prQuiet);   {:< continue the operation, do not call the callback }
-    {: reason for calling the callback function }
+      prContinue, {!< continue with the copy/move operation }
+      prCancel,   {!< cancel the operation, cannot be resumed }
+      prStop,     {!< stop the operation, can be resumed, if cfwRestartable was passed }
+      prQuiet);   {!< continue the operation, do not call the callback }
+    {! reason for calling the callback function }
     TProgressReason = (
-      prChunkFinished, {:< a chunk of the file has been copied }
-      prStreamSwitch); {:< started to copy a new stream (set in the first callback) }
+      prChunkFinished, {!< a chunk of the file has been copied }
+      prStreamSwitch); {!< started to copy a new stream (set in the first callback) }
   {*)}
   protected
     FTotalFileSize: LARGE_INTEGER;
@@ -131,34 +131,34 @@
     FSourceFile: THandle;
     FDestinationFile: THandle;
   public
-    {: total size of the file }
+    {! total size of the file }
     property TotalFileSize: LARGE_INTEGER read FTotalFileSize;
-    {: total bytes that have been transferred so far }
+    {! total bytes that have been transferred so far }
     property TotalBytesTransferred: LARGE_INTEGER read FTotalBytesTransferred;
-    {: size of the stream that is currently being transferred }
+    {! size of the stream that is currently being transferred }
     property StreamSize: LARGE_INTEGER read FStreamSize;
-    {: bytes of the current stream taht have been transferred so far }
+    {! bytes of the current stream taht have been transferred so far }
     property StreamBytesTransferred: LARGE_INTEGER read FStreamBytesTransferred;
-    {: Number of the current stream, starts with 1 (usually always 1) }
+    {! Number of the current stream, starts with 1 (usually always 1) }
     property StreamNumber: LongWord read FStreamNumber;
-    {: reason for callback }
+    {! reason for callback }
     property CallbackReason: TProgressReason read FCallbackReason;
-    {: Handle of source file }
+    {! Handle of source file }
     property SourceFile: THandle read FSourceFile;
-    {: Handle of destination file }
+    {! Handle of destination file }
     property DestinationFile: THandle read FDestinationFile;
   end;
   TCopyFileProgressEvt = procedure(_Status: TCopyProgressStatus;
     var _Continue: TCopyProgressStatus.TProgressResult) of object;
 
-  {: defines the action to take if a file already exists but has a different content }
+  {! defines the action to take if a file already exists but has a different content }
   TFileExistsAction = (feaIgnore, feaOverwrite);
   TOnSyncing = procedure(_Sender: TObject; const _SrcDir, _DstDir: string) of object;
   TOnSyncingFile = procedure(_Sender: TObject; const _SrcDir, _DstDir: string; _Total, _Done: Int64) of object;
-  {: called if a destination file already exists
+  {! called if a destination file already exists
      @param Action is the action to take, default is feaIgnore }
   TOnFileExists = procedure(_Sender: TObject; const _SrcFile, _DstFile: TFileInfoRec; var _Action: TFileExistsAction) of object;
-  {: Synchronizes two directories }
+  {! Synchronizes two directories }
   TDirectorySync = class
   private
     FCurrentSource: string;
@@ -174,36 +174,36 @@
     function doOnFileExists(const _SrcDir, _DstDir, _Filename: string): TFileExistsAction;
     procedure ProgressStatusCallback(_Status: TCopyProgressStatus; var _Continue: TCopyProgressStatus.TProgressResult);
   public
-    {: Checks if there are files in the source directory that are already in
+    {! Checks if there are files in the source directory that are already in
        the destination directory, for each file that exists, the OnFileExists
        event is called. }
     procedure CheckOneWay(const _SrcDir, _DstDir: string);
-    {: copies all files from DirA to DirB if they don't already exists
+    {! copies all files from DirA to DirB if they don't already exists
        (not implemented: if CheckContent=true, the content existing files will be checked and if
                          it doesn't match, OnDifferentFileExists is called )
        @param FlattenDirHierarchy determines whether all files should be copied
                                   directly DstDir or if subdirectories should
                                   be created, default is false }
     procedure SyncOneWay(const _SrcDir, _DstDir: string; _FlattenDirHierarchy: boolean = false);
-    {: calls SyncOneWay(DirA, DirB) and SyncOneWay(DirB, DirA)
+    {! calls SyncOneWay(DirA, DirB) and SyncOneWay(DirB, DirA)
        (not implemented: if CheckContent=true, the content existing files will be checked and if
                          it doesn't match, OnDifferentFileExists is called ) }
     procedure SyncBothWays(const _DirA, _DirB: string);
-//    {: Not implemented: Called, if the content of an existing file is different }
+//    {! Not implemented: Called, if the content of an existing file is different }
 //    property OnDifferentFileExists: TOnDifferentFileExists read FOnDifferentFileExists write FOnDifferentFileExists;
-//    {: Not implemented: if true, OnDifferentFileExists will be called }
+//    {! Not implemented: if true, OnDifferentFileExists will be called }
 //    property CheckContent: boolean read FCheckContent write FCheckContent default false;
-    {: called when a new directory is entered, to abort synchronization,
+    {! called when a new directory is entered, to abort synchronization,
        raise an exception (e.g. SysUtils.Abort), and catch it in the calling method }
     property OnSyncingDir: TOnSyncing read FOnSyncingDir write FOnSyncingDir;
-    {: called when a file is being copied, to abort synchronization,
+    {! called when a file is being copied, to abort synchronization,
       raise an exception (e.g. SysUtils.Abort), and catch it in the calling method }
     property OnSyncingFile: TOnSyncingFile read FOnSyncingFile write FOnSyncingFile;
-    {: called from CheckOneWay if a destination file already exists }
+    {! called from CheckOneWay if a destination file already exists }
     property OnFileExists: TOnFileExists read FOnFileExists write FOnFileExists;
   end;
 
-  {: This class owns all utility functions as class methods so they don't pollute the name space }
+  {! This class owns all utility functions as class methods so they don't pollute the name space }
   TFileSystem = class
   public
   {(*}
@@ -215,18 +215,18 @@
     TCopyFileWithProgressFlagSet = set of TCopyFileWithProgressFlags;
     TCopyFileWithProgressResult = (cfwOK, cfwAborted, cfwError);
     TMoveFileWithProgressFlags = (
-      mfwFailIfExists, {:< fail if the destination file already exists }
-      mfwAllowCopy,    {:< allow using copy and delete if necessary }
-      mfwDelayUntilReboot, {:< wait until next reboot for moving the file }
-      mfwWriteThrough, {:< Setting this value guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns. }
-      mfwFailIfNotTrackable, {:< The function fails if the source file is a link source, but the file cannot be tracked after the move. }
-      mfwRaiseException); {:< raise an exception if there is an error }
+      mfwFailIfExists, {!< fail if the destination file already exists }
+      mfwAllowCopy,    {!< allow using copy and delete if necessary }
+      mfwDelayUntilReboot, {!< wait until next reboot for moving the file }
+      mfwWriteThrough, {!< Setting this value guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns. }
+      mfwFailIfNotTrackable, {!< The function fails if the source file is a link source, but the file cannot be tracked after the move. }
+      mfwRaiseException); {!< raise an exception if there is an error }
     TMoveFileWithProgressFlagSet = set of TMoveFileWithProgressFlags;
   const
-  {: set of char constant containing all characters that are invalid in a filename }
+  {! set of char constant containing all characters that are invalid in a filename }
     INVALID_FILENAME_CHARS: set of Char = ['\', '/', ':', '*', '?', '"', '<', '>', '|'];
   {*)}
-    {: Returns a temporary filename.
+    {! Returns a temporary filename.
        @param Directory is a string with the directory to create the file in, defaults
                         to the TEMP directory.
        @param Prefix is a string with a prefix for the filename, defaults to 'dz'.)
@@ -242,24 +242,24 @@
              values until it finds a unique filename, and then it creates the file
              in the <b>Directory</b>.</li>
        </ul>
-       @returns(a filename to use for a temporary file.)}
+       @returns a filename to use for a temporary file. }
     class function GetTempFileName(_Directory: string = ''; const _Prefix: string = 'dz';
       _Unique: word = 0): string;
 
-    {: Calls the corresponding Windows function and returns the short path name
+    {! Calls the corresponding Windows function and returns the short path name
        for an *existing* file or directory. }
     class function GetShortPathname(const _LongName: string): string;
 
-    {: Creates a unique subdirectory under BaseDir with the given Prefix
+    {! Creates a unique subdirectory under BaseDir with the given Prefix
        if Basedir is an empty string the system's %TEMP% directory is used.
        @returns the name of the created directory }
     class function CreateUniqueDirectory(_BaseDir: string = ''; const _Prefix: string = 'dz'): string;
 
-    {: Calls the Win32Api function GetTempPath but returns a string rather than
+    {! Calls the Win32Api function GetTempPath but returns a string rather than
        a PChar.
        @returns(a string with the TEMP directory) }
     class function GetTempPath: string;
-    {: Moves the file Source to Dest using the Windows MoveFile function.
+    {! Moves the file Source to Dest using the Windows MoveFile function.
        @param Source is a string containing the name of the existing file
        @param Dest is a string containing the destination file name
        @param RaiseException is a boolean which controls whether the function
@@ -268,7 +268,7 @@
               but just return false if moving the file fails.
        @returns true, if the file could be moved, false otherwise. }
     class function MoveFile(const _Source, _Dest: string; _RaiseException: boolean = true): boolean;
-    {: Copies the file Source to Dest using the Windows CopyFile function.
+    {! Copies the file Source to Dest using the Windows CopyFile function.
        @param Source is a string containing the name of the existing file
        @param Dest is a string containing the destination file name
        @param FailIfExists is a boolean specifying whether the copy operation
@@ -282,7 +282,7 @@
        @returns true, if the file could be copied, false otherwise. }
     class function CopyFile(const _Source, _Dest: string; _FailIfExists: boolean = true;
       _RaiseException: boolean = true; _ForceOverwrite: boolean = false): boolean; overload;
-    {: Copies the file Source to Dest using the Windows CopyFile function.
+    {! Copies the file Source to Dest using the Windows CopyFile function.
        @param(Source is a string containing the name of the existing file)
        @param(Dest is a string containing the destination file name)
        @param(Flags is a set of TCopyFileFlags specifying whether the copy operation
@@ -294,7 +294,7 @@
        @returns(true, if the file could be copied, false otherwise.) }
     class function CopyFile(const _Source, _Dest: string;
       _Flags: TCopyFileFlagSet = [cfRaiseException]): boolean; overload;
-    {: Copies the file Source to Dest using the Windows CopyFileEx function which
+    {! Copies the file Source to Dest using the Windows CopyFileEx function which
        allows for a progress callback
        @param(Source is a string containing the name of the existing file)
        @param(Dest is a string containing the destination file name)
@@ -310,7 +310,7 @@
        @raises  EOSError if an error occurs and cfwRaiseException was passed }
     class function CopyFileWithProgress(const _Source, _Dest: string; _Progress: TCopyFileProgressEvt;
       _Flags: TCopyFileWithProgressFlagSet = [cfwRaiseException]): TCopyFileWithProgressResult;
-    {: Copies the file Source to Dest using the Windows MoveFileWithProgress function which
+    {! Copies the file Source to Dest using the Windows MoveFileWithProgress function which
        allows for a progress callback
        NOTE: If the file can be moved rather than copied, no call to the callback
              function will occur!
@@ -328,23 +328,23 @@
        @raises  EOSError if an error occurs and cfwRaiseException was passed }
     class function MoveFileWithProgress(const _Source, _Dest: string; _Progress: TCopyFileProgressEvt;
       _Flags: TMoveFileWithProgressFlagSet = [mfwRaiseException]): TCopyFileWithProgressResult;
-    {: Creates a directory (parent directories must already exist)
+    {! Creates a directory (parent directories must already exist)
        @param DirectoryName is the name for the new directory
        @param RaiseException determines whether an exception is raised on error, default = true
        @returns true, if the directory was created
        @raises EOSError if there was an error and RaiseException was true }
     class function CreateDir(const _DirectoryName: string; _RaiseException: boolean = true): boolean;
-    {: Creates a new directory, including the creation of parent directories as needed.
+    {! Creates a new directory, including the creation of parent directories as needed.
        @param DirectoryPath is the name for the new directory
        @param RaiseException determines whether an exception is raised on error, default = true
        @returns true, if the directory was created
        @raises EOSError if there was an error and RaiseException was true }
     class function ForceDir(const _DirectoryPath: string; _RaiseException: boolean = true): boolean;
-    {: Sets a file's readonly flag
+    {! Sets a file's readonly flag
        @param Filename is the file to change
        @param Set determines whether to set or clear the flag }
     class function SetReadonly(const _Filename: string; _Set: boolean; _RaiseException: boolean = true): boolean;
-    {: Deletes the file using the SysUtils.DeleteFile function.
+    {! Deletes the file using the SysUtils.DeleteFile function.
        @param(Filename is a string containing the name of the file)
        @param(RaiseException is a boolean which controls whether the function
               retrieves the Windows error and raises an exception
@@ -355,7 +355,7 @@
               readonly attribut and try to delete the file again.)
        @returns(true, if the file could be deleted, false otherwise.) }
     class function DeleteFile(const _Filename: string; _RaiseException: boolean = true; _Force: boolean = false): boolean;
-    {: Deletes all files in a directory matching a given filemask (non-recursive)
+    {! Deletes all files in a directory matching a given filemask (non-recursive)
        @param Dir is a string containting the directory in which the files are to be
                   deleted, must NOT be empty
        @param Mask is a string containting the file search mask, all files matching
@@ -370,7 +370,7 @@
        @returns the number of files that could not be deleted. }
     class function DeleteMatchingFiles(const _Dir, _Mask: string;
       _RaiseException: boolean = true; _Force: boolean = false): integer;
-    {: tries to find a matching file
+    {! tries to find a matching file
        @param Mask is the filename mask to match
        @param Filename is the name of the file which has been found, only valid if result <> mfNotFound
        @returns mfNotFound, if no file was found, or mfDirectory, mfFile or mfSpecial
@@ -378,40 +378,40 @@
     class function FindMatchingFile(const _Mask: string; out _Filename: string): TMatchingFileResult;
     class function RemoveDir(const _Dirname: string; _RaiseException: boolean = true;
       _Force: boolean = false): boolean;
-    {: Deletes a directory with all files and subdirectories.
+    {! Deletes a directory with all files and subdirectories.
        @param(Dirname is the name of the directory to delete)
        @param(Force specifies whether it should also delete readonly files) }
     class function DelTree(const _Dirname: string; _Force: boolean = false; _RaiseException: boolean = true): boolean;
-    {: reads a text file and returns its content as a string
+    {! reads a text file and returns its content as a string
        @param Filename is the name of the file to read
        @returns the file's content as a string }
     class function ReadTextFile(const _Filename: string): string;
 
-    {: checks whether the given string is a valid filename (without path), that is
+    {! checks whether the given string is a valid filename (without path), that is
        does not contain one of the characters defined in INVALID_FILENAME_CHARS
        @param s is the string to check
        @returns true, if the string is a valid filename, false otherwise }
     class function IsValidFilename(const _s: string): boolean; overload;
-    {: checks whether the given string is a valid filename (without path), that is
+    {! checks whether the given string is a valid filename (without path), that is
        does not contain one of the characters defined in INVALID_FILENAME_CHARS and
        returns the first error position.
        @param s is the string to check
        @param ErrPos is the first error position, only valid it result = false
        @returns true, if the string is a valid filename, false otherwise }
     class function IsValidFilename(const _s: string; out _ErrPos: integer): boolean; overload;
-    {: creates a backup of the file appending the current date and time to the base
+    {! creates a backup of the file appending the current date and time to the base
        file name.
        @param Filename is the name of the file to back up
        @param BackupDir is a directory in which to create the backup file, if empty
                         the same directory as the original file is used }
     class procedure BackupFile(const _Filename: string; _BackupDir: string = '');
     class function GetFileInfo(const _Filename: string): TFileInfoRec;
-    {: Returns the free space (in bytes) on the disk with the given drive letter }
+    {! Returns the free space (in bytes) on the disk with the given drive letter }
     class function DiskFree(_DriveLetter: char): Int64;
   end;
 
 type
-  {: callback event for generating a filename for the given generation }
+  {! callback event for generating a filename for the given generation }
   TOnGenerateFilename = procedure(_Sender: TObject; _Generation: integer; var _Filename: string) of object;
 type
   TFileGenerationHandler = class
@@ -425,28 +425,28 @@
     FPrependZeros: integer;
     function GenerateFilename(_Generation: integer): string;
   public
-    {: @param BaseName is the base filename to which by default _<n> followed by
+    {! @param BaseName is the base filename to which by default _<n> followed by
                        the Suffix will be appended
        @param Suffix is the suffix for the filename, usually an extension which
                      must include the dot (.) }
     constructor Create(const _BaseName, _Suffix: string);
-    {: generates the filename and returns it }
+    {! generates the filename and returns it }
     function Execute(_KeepOriginal: boolean): string;
-    {: the maximum of file generations that should be kept }
+    {! the maximum of file generations that should be kept }
     property MaxGenerations: integer read FMaxGenerations write FMaxGenerations default 5;
-    {: should the resulting filename contain a number? }
+    {! should the resulting filename contain a number? }
     property ResultContainsNumber: boolean read FResultContainsNumber write FResultContainsNumber default false;
-    {: does the oldest file have the highest number? }
+    {! does the oldest file have the highest number? }
     property OldestIsHighest: boolean read FOldestIsHighest write FOldestIsHighest default true;
     property PrependZeros: integer read FPrependZeros write FPrependZeros default 0;
-    {: allows read access to the file's base name as passed to the constructor }
+    {! allows read access to the file's base name as passed to the constructor }
     property BaseName: string read FBaseName;
     property Suffix: string read FSuffix;
-    {: callback event for generating a filename for the given generation }
+    {! callback event for generating a filename for the given generation }
     property OnGenerateFilename: TOnGenerateFilename read FOnGenerateFilename write FOnGenerateFilename;
   end;
 
-{: This is an abbreviation for IncludeTrailingPathDelimiter }
+{! This is an abbreviation for IncludeTrailingPathDelimiter }
 function itpd(const _Dirname: string): string; inline;
 
 implementation

Modified: utilities/dzLib/trunk/src/u_dzMiscUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzMiscUtils.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/src/u_dzMiscUtils.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -57,47 +57,47 @@
 
 {: Emulates this infamous Visual Basic function of which nobody actually knows
    what it does.}
-
 function TwipsPerPixelX(_Handle: hdc): Extended;
 
 {: Emulates this infamous Visual Basic function of which nobody actually knows
    what it does.}
-
 function TwipsPerPixelY(_Handle: hdc): Extended;
 
 {: Returns the name for the HKey constant. }
-
 function HKeyToString(_HKey: HKey): string;
 
 {: Returns the name for the TRegDataType Value. }
-
 function RegDataTypeToString(_DataType: TRegDataType): string;
 
 {: returns a hex dump of the buffer (no spaces added)
    @param(Buffer is the memory block to dump)
    @param(Len is the length of the block)
    @returns(a string containing the hex dump of the buffer) }
-
 function HexDump(const _Buffer; _Len: integer): string;
 
+{: hex dumps a double value }
+function HexDumpDouble(const _dbl: Double): string;
+
+{: hex dumps an extended value }
+function HexDumpExtended(const _ext: Extended): string;
+
 {: returns a hex dump of the zero terminated string s }
-
 function HexDumpString(const _s: string): string;
 
 {: converts a hexdump of a double back to a double value }
-
 procedure HexDumpToDbl(const _s: string; var _Value: double);
 
+{: converts a hexdump of an extended back to an extended value }
+procedure HexDumpToExtended(const _s: string; var _Value: Extended);
+
 {: Converts an integer to a boolean.
    @param(Int is the integer to convert)
    @returns(false, if the integer is 0, true otherwise) }
-
 function IntToBool(_Int: integer): boolean;
 
 {: Converts a boolean to an integer.
    @param(B is the boolean to convert)
    @returns(0 if the boolean is false, 1 if it is true) }
-
 function BoolToInt(_B: boolean): integer;
 
 // Variant to other type conversion functions
@@ -114,7 +114,6 @@
    @param(Value is the variants integer value, only valid if the function
           returns true.)
    @returns(true, if the variant could be converted to integer, false if not.) }
-
 function Var2IntConditional(const _v: variant; out _Value: integer): boolean;
 
 {: Converts a variant to an integer.
@@ -122,7 +121,6 @@
    @param(v Variant value to convert)
    @param(Default Value to return if v is empty or null)
    @returns(the integer value of v or the Default if v can not be converted) }
-
 function Var2Int(const _v: variant; _Default: integer): integer;
 
 {: Converts a variant to an integer.
@@ -133,7 +131,6 @@
    @raises(EVarIsNull if v is null)
    @raises(EVarIsEmpty if v is empty)
    @raises(EVariantConvertError if there is some other conversion error) }
-
 function Var2IntEx(const _v: variant; const _Source: string): integer;
 
 {: Converts a variant to the string representation of an integer.
@@ -142,7 +139,6 @@
    @param(NullValue String value to return if v is empty or null)
    @returns(the string representation of the integer value of v or the
             NullValue if v can not be converted) }
-
 function Var2IntStr(const _v: variant; const _NullValue: string = '*NULL*'): string;
 
 {: Converts a variant to a double.
@@ -151,7 +147,6 @@
    @param(Value is the variant's double value, only valid if the function
                 returns true.)
    @returns(true, if the varian could be converted to double, false if not) }
-
 function TryVar2Dbl(const _v: variant; out _Value: double): boolean;
 function Var2DblConditional(const _v: variant; out _Value: double): boolean; deprecated; // use TryVar2Dbl
 
@@ -160,7 +155,6 @@
    @param(v Variant value to convert)
    @param(Default Value to return if v is empty or null)
    @returns(the double value of v or the Default if v can not be converted) }
-
 function Var2Dbl(const _v: variant; const _Default: double): double;
 
 {: Converts a variant to a double.
@@ -171,7 +165,6 @@
    @raises(EVarIsNull if v is null)
    @raises(EVarIsEmpty if v is empty)
    @raises(EVariantConvertError if there is some other conversion error) }
-
 function Var2DblEx(const _v: variant; const _Source: string): double;
 
 {: Converts a variant to the string representation of a double.
@@ -181,7 +174,6 @@
    @param(NullValue String value to return if v is empty or null)
    @returns(the string representation of the double value of v or the
             NullValue if v can not be converted) }
-
 function Var2DblStr(const _v: variant; const _NullValue: string = '*NULL*'): string;
 
 {: Converts a variant to a TDateTime.
@@ -192,14 +184,12 @@
    @raises(EVarIsNull if v is null)
    @raises(EVarIsEmpty if v is empty)
    @raises(EVariantConvertError if there is some other conversion error) }
-
 function Var2DateTimeEx(const _v: variant; const _Source: string): TDateTime;
 
 {: Converts a variant to an ISO format DateTime string (yyyy-mm-dd hh:mm:ss)
    @param(v Variant value to convert)
    @param(NullValue String value to return if v is empty or null)
    @returns(an ISO format DateTime string of v or NullValue if v can not be converted) }
-
 function Var2DateTimeStr(const _v: variant; const _NullValue: string = '*NULL*'): string;
 
 {: Converts a variant to a string.
@@ -207,7 +197,6 @@
    @param(v Variant value to convert)
    @param(Default Value to return if v is empty or null)
    @returns(the string value of v or the Default if v can not be converted) }
-
 function Var2Str(const _v: variant; const _Default: string = '*NULL*'): string;
 
 {: Converts a variant to a string.
@@ -218,7 +207,6 @@
    @raises(EVarIsNull if v is null)
    @raises(EVarIsEmpty if v is empty)
    @raises(EVariantConvertError if there is some other conversion error) }
-
 function Var2StrEx(_v: variant; const _Source: string): string;
 
 {: Uses GetLastError to get the last WinAPI error code, then
@@ -775,23 +763,49 @@
   end;
 end;
 
+function HexDumpDouble(const _dbl: Double): string;
+begin
+  Result := HexDump(_dbl, SizeOf(Double));
+end;
+
+function HexDumpExtended(const _ext: Extended): string;
+begin
+  Result := HexDump(_Ext, SizeOf(Extended));
+end;
+
 procedure HexDumpToDbl(const _s: string; var _Value: double);
 type
-  TDblMem = array[0..SizeOf(double)] of byte;
+  TBuffer = array[0..SizeOf(_Value)] of byte;
 var
   i: integer;
   dec: LongWord;
-  p: ^TDblMem;
+  p: ^TBuffer;
 begin
-  Assert(Length(_s) = SizeOf(double) * 2);
+  Assert(Length(_s) = SizeOf(_Value) * 2);
   p := @_Value;
-  for i := 0 to SizeOf(Double) - 1 do begin
+  for i := 0 to SizeOf(_Value) - 1 do begin
     Dec := Hex2Long(Copy(_s, i * 2 + 1, 2));
     p^[i] := Dec;
   end;
 end;
 
+procedure HexDumpToExtended(const _s: string; var _Value: Extended);
 type
+  TBuffer = array[0..SizeOf(_Value)] of byte;
+var
+  i: integer;
+  dec: LongWord;
+  p: ^TBuffer;
+begin
+  Assert(Length(_s) = SizeOf(_Value) * 2);
+  p := @_Value;
+  for i := 0 to SizeOf(_Value) - 1 do begin
+    Dec := Hex2Long(Copy(_s, i * 2 + 1, 2));
+    p^[i] := Dec;
+  end;
+end;
+
+type
   PStringDescriptor = ^TStringDescriptor;
   TStringDescriptor = record
     RefCount: integer;

Modified: utilities/dzLib/trunk/src/u_dzNamedThread.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzNamedThread.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/src/u_dzNamedThread.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -16,10 +16,10 @@
 type
   {: This record must be filled to set the name of a thread }
   TThreadNameInfo = record
-    FType: LongWord;     // must be 0x1000
-    FName: PChar;        // pointer to name (in user address space)
+    FType: LongWord; // must be 0x1000
+    FName: PChar; // pointer to name (in user address space)
     FThreadID: LongWord; // thread ID (-1 indicates caller thread)
-    FFlags: LongWord;    // reserved for future use, must be zero
+    FFlags: LongWord; // reserved for future use, must be zero
   end;
 
 {: Set the name for the current thread to
@@ -31,11 +31,13 @@
      inherited Execute in descendants! }
   TNamedThread = class(TThread)
   protected
+    FThreadName: string;
     {: Calls SetThreadName with the given name or the class name if empty
        @param Name is the name to use, if empty, the class name will be used }
-    procedure SetName(_Name: string = ''); virtual;
+    procedure SetName(const _Name: string = ''); virtual;
     {: Calls SetName }
     procedure Execute; override;
+    function GetThreadName: string;
   end;
 
 implementation
@@ -44,12 +46,12 @@
 var
   ThreadNameInfo: TThreadNameInfo;
 begin
-  ThreadNameInfo.FType:= $1000;
-  ThreadNameInfo.FName:= PChar(_Name);
-  ThreadNameInfo.FThreadID:= $FFFFFFFF;
-  ThreadNameInfo.FFlags:= 0;
+  ThreadNameInfo.FType := $1000;
+  ThreadNameInfo.FName := PChar(_Name);
+  ThreadNameInfo.FThreadID := $FFFFFFFF;
+  ThreadNameInfo.FFlags := 0;
   try
-    RaiseException($406D1388, 0, SizeOf(ThreadNameInfo) div SizeOf(LongWord), @ThreadNameInfo );
+    RaiseException($406D1388, 0, SizeOf(ThreadNameInfo) div SizeOf(LongWord), @ThreadNameInfo);
   except
     // ignore
   end;
@@ -62,11 +64,18 @@
   SetName();
 end;
 
-procedure TNamedThread.SetName(_Name: string = '');
+function TNamedThread.GetThreadName: string;
 begin
+  Result := FThreadName;
+end;
+
+procedure TNamedThread.SetName(const _Name: string = '');
+begin
   if _Name = '' then
-    _Name := ClassName;
-  SetThreadName(_Name);
+    FThreadName := ClassName
+  else
+    FThreadName := _Name;
+  SetThreadName(FThreadName);
 end;
 
 initialization

Added: utilities/dzLib/trunk/src/u_dzRingBuffer.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzRingBuffer.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/src/u_dzRingBuffer.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -0,0 +1,468 @@
+unit u_dzRingBuffer;
+
+{$I globaldef.inc}
+
+interface
+
+uses
+  Windows;
+
+type
+  EdzRingBuffer = class(Exception);
+  EBufferFull = class(EdzRingBuffer);
+  EBufferEmpty = class(EdzRingBuffer);
+  EIndexOutOfBounds = class(EdzRingBuffer);
+
+type
+  TdzCustomRingBuffer = class
+  protected
+    {: size of one element stored in this buffer }
+    fElementSize: integer;
+    {: length of the buffer }
+    fLength: integer;
+    {: pointer to a memory block that stores the buffer }
+    fBuffer: PByte;
+    {: position of the first element stored in the buffer,
+       if fFirstUsed = fFirstFree the buffer is empty }
+    fFirstUsed: integer;
+    {: position of the next element bo be stored in the buffer
+       if fFirstUsed = fFirstFree the buffer is empty }
+    fFirstFree: integer;
+    {: number of elements stored in the buffer }
+    fElementCount: integer;
+    {: is called by the destructor to do any finalization that might be
+       necessary for the elements stored in the buffer. Does nothing here. }
+    procedure FinalizeElements; virtual;
+    {: inserts the given Element in front of the buffer }
+    procedure InsertFront(const _Element); virtual;
+    {: inserts the given Element at the end of the buffer }
+    procedure InsertEnd(const _Element); virtual;
+    {: extracts the first Element from the buffer }
+    procedure ExtractFront(var _Element); virtual;
+    {: extracts the last Element from the buffer }
+    procedure ExtractEnd(var _Element); virtual;
+    {: gets the Element with the index Idx }
+    procedure GetElement(_Idx: integer; var _Element); virtual;
+    {: sets the Element with the index Idx, note: No finalization is done
+       for the element previously stored at Idx. }
+    procedure SetElement(_Idx: integer; const _Element); virtual;
+    {: gets the first Element from the buffer }
+    procedure GetFirst(var _Element); virtual;
+    {: gets the last Element from the buffer }
+    procedure GetLast(var _Element); virtual;
+    {: checks whether there is enough space for another element in the buffer }
+    procedure CheckFull; virtual;
+    {: checks whether there are any elements in the buffer }
+    procedure CheckEmpty; virtual;
+    {: returns true, if the buffer is full }
+    function IsFull: boolean; virtual;
+    {: returns true, if the buffer is empty }
+    function IsEmpty: boolean; virtual;
+    {: returns the number of elements stored in the buffer }
+    function GetCount: integer; virtual;
+    {: deletes all elements from the buffer }
+    procedure Clear; virtual;
+  public
+    {: creates a ringbuffer with enough space to store Length elements of
+       ElementSize bytes size }
+    constructor Create(_ElementSize: integer; _Length: integer);
+    {: calls FinalizeElements and frees the memory allocated for the buffer }
+    destructor Destroy; override;
+  end;
+
+type
+  {: publishes all methods of TdzCustomRingBuffer }
+  TdzRingBuffer = class(TdzCustomRingbuffer)
+  public
+    {: inserts the given Element in front of the buffer }
+    procedure InsertFront(const _Element); override;
+    {: inserts the given Element at the end of the buffer }
+    procedure InsertEnd(const _Element); override;
+    {: extracts the first Element from the buffer }
+    procedure ExtractFront(var _Element); override;
+    {: extracts the last Element from the buffer }
+    procedure ExtractEnd(var _Element); override;
+    {: gets the Element with the index Idx }
+    procedure GetElement(_Idx: integer; var _Element); override;
+    {: sets the Element with the index Idx, note: No finalization is done
+       for the element previously stored at Idx. }
+    procedure SetElement(_Idx: integer; const _Element); override;
+    {: gets the first Element from the buffer }
+    procedure GetFirst(var _Element); override;
+    {: gets the last Element from the buffer }
+    procedure GetLast(var _Element); override;
+    {: checks whether there is enough space for another element in the buffer }
+    procedure CheckFull; override;
+    {: checks whether there are any elements in the buffer }
+    procedure CheckEmpty; override;
+    {: returns true, if the buffer is full }
+    function IsFull: boolean; override;
+    {: returns true, if the buffer is empty }
+    function IsEmpty: boolean; override;
+    {: returns the number of elements stored in the buffer }
+    function GetCount: integer; override;
+    {: deletes all elements from the buffer }
+    procedure Clear; override;
+  end;
+
+type
+  {: makes only those methods public that are useful for a stack }
+  TdzRingStack = class(TdzCustomRingbuffer)
+  public
+    {: inserts the given Element at the end of the buffer }
+    procedure InsertEnd(const _Element); override;
+    {: extracts the last Element from the buffer }
+    procedure ExtractEnd(var _Element); override;
+    {: gets the Element with the index Idx }
+    procedure GetElement(_Idx: integer; var _Element); override;
+    {: sets the Element with the index Idx, note: No finalization is done
+       for the element previously stored at Idx. }
+    procedure SetElement(_Idx: integer; const _Element); override;
+    {: gets the last Element from the buffer }
+    procedure GetLast(var _Element); override;
+    {: returns true, if the buffer is full }
+    function IsFull: boolean; override;
+    {: returns true, if the buffer is empty }
+    function IsEmpty: boolean; override;
+    {: returns the number of elements stored in the buffer }
+    function GetCount: integer; override;
+    {: deletes all elements from the buffer }
+    procedure Clear; override;
+  end;
+
+type
+  {: makes only those methods public that are usefull for a queue }
+  TdzRingQueue = class(TdzCustomRingbuffer)
+    {: inserts the given Element at the end of the buffer }
+    procedure InsertEnd(const _Element); override;
+    {: extracts the first Element from the buffer }
+    procedure ExtractFront(var _Element); override;
+    {: gets the Element with the index Idx }
+    procedure GetElement(_Idx: integer; var _Element); override;
+    {: sets the Element with the index Idx, note: No finalization is done
+       for the element previously stored at Idx. }
+    procedure SetElement(_Idx: integer; const _Element); override;
+    {: gets the first Element from the buffer }
+    procedure GetFirst(var _Element); override;
+    {: returns true, if the buffer is full }
+    function IsFull: boolean; override;
+    {: returns true, if the buffer is empty }
+    function IsEmpty: boolean; override;
+    {: returns the number of elements stored in the buffer }
+    function GetCount: integer; override;
+    {: deletes all elements from the buffer }
+    procedure Clear; override;
+  end;
+
+implementation
+
+{ TdzCustomRingBuffer }
+
+constructor TdzCustomRingBuffer.Create(_ElementSize, _Length: integer);
+begin
+  inherited Create;
+  fLength := _Length;
+  fElementSize := _ElementSize;
+  fFirstUsed := 0;
+  fFirstFree := 0;
+  GetMem(fBuffer, fLength * fElementSize);
+end;
+
+destructor TdzCustomRingBuffer.Destroy;
+begin
+  if Assigned(fBuffer) and (fLength > 0) then
+    begin
+      FinalizeElements;
+      FreeMem(fBuffer);
+    end;
+  inherited;
+end;
+
+procedure TdzCustomRingBuffer.FinalizeElements;
+begin
+  // does nothing, override if elements need finalization
+end;
+
+procedure TdzCustomRingBuffer.InsertFront(const _Element);
+var
+  p: PByte;
+begin
+  CheckFull;
+  fFirstUsed := (fFirstUsed - 1) mod fLength;
+  p := fBuffer;
+  Inc(p, fFirstUsed * fElementSize);
+  Move(_Element, p^, fElementSize);
+  Inc(fElementCount);
+end;
+
+procedure TdzCustomRingBuffer.InsertEnd(const _Element);
+var
+  p: PByte;
+begin
+  CheckFull;
+  p := fBuffer;
+  Inc(p, fFirstFree * fElementSize);
+  Move(_Element, p^, fElementSize);
+  fFirstFree := (fFirstFree + 1) mod fLength;
+  Inc(fElementCount);
+end;
+
+procedure TdzCustomRingBuffer.ExtractFront(var _Element);
+var
+  p: PByte;
+begin
+  CheckEmpty;
+  p := fBuffer;
+  Inc(p, fFirstUsed * fElementSize);
+  Move(p^, _Element, fElementSize);
+  fFirstUsed := (fFirstUsed + 1) mod fLength;
+  Dec(fElementCount);
+end;
+
+procedure TdzCustomRingBuffer.ExtractEnd(var _Element);
+var
+  p: PByte;
+begin
+  CheckEmpty;
+  fFirstFree := (fFirstFree - 1) mod fLength;
+  p := fBuffer;
+  Inc(p, fFirstFree * fElementSize);
+  Move(p^, _Element, fElementSize);
+  Dec(fElementCount);
+end;
+
+procedure TdzCustomRingBuffer.GetElement(_Idx: integer; var _Element);
+var
+  p: PByte;
+begin
+  if (fFirstUsed + _Idx) mod fLength >= fFirstFree then
+    raise EIndexOutOfBounds.CreateFmt('Index %d out of bounds.', [_Idx]);
+  p := fBuffer;
+  Inc(p, (fFirstUsed + _Idx) * fElementSize);
+  Move(p^, _Element, fElementSize);
+end;
+
+procedure TdzCustomRingBuffer.SetElement(_Idx: integer; const _Element);
+var
+  p: PByte;
+begin
+  if (fFirstUsed + _Idx) mod fLength >= fFirstFree then
+    raise EIndexOutOfBounds.CreateFmt('Index %d out of bounds.', [_Idx]);
+  p := fBuffer;
+  Inc(p, (fFirstUsed + _Idx) * fElementSize);
+  Move(_Element, p^, fElementSize);
+end;
+
+procedure TdzCustomRingBuffer.GetFirst(var _Element);
+begin
+  GetElement(0, _Element);
+end;
+
+procedure TdzCustomRingBuffer.GetLast(var _Element);
+begin
+  GetElement(GetCount - 1, _Element);
+end;
+
+function TdzCustomRingBuffer.IsFull: boolean;
+begin
+  Result := fElementCount >= fLength;
+end;
+
+procedure TdzCustomRingBuffer.CheckFull;
+begin
+  if IsFull then
+    raise EBufferFull.Create('Buffer is full');
+end;
+
+function TdzCustomRingBuffer.IsEmpty: boolean;
+begin
+  Result := fElementCount = 0;
+end;
+
+procedure TdzCustomRingBuffer.CheckEmpty;
+begin
+  if IsEmpty then
+    raise EBufferEmpty.Create('Buffer is empty');
+end;
+
+function TdzCustomRingBuffer.GetCount: integer;
+begin
+  Result := fElementCount;
+end;
+
+procedure TdzCustomRingBuffer.Clear;
+begin
+  FinalizeElements;
+  fFirstUsed := 0;
+  fFirstFree := 0;
+  fElementCount := 0;
+end;
+
+{ TdzRingBuffer }
+
+procedure TdzRingBuffer.CheckEmpty;
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.CheckFull;
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.Clear;
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.ExtractEnd(var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.ExtractFront(var _Element);
+begin
+  inherited;
+end;
+
+function TdzRingBuffer.GetCount: integer;
+begin
+  Result := inherited GetCount;
+end;
+
+procedure TdzRingBuffer.GetElement(_Idx: integer; var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.GetFirst(var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.GetLast(var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.InsertEnd(const _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingBuffer.InsertFront(const _Element);
+begin
+  inherited;
+end;
+
+function TdzRingBuffer.IsEmpty: boolean;
+begin
+  Result := inherited IsEmpty;
+end;
+
+function TdzRingBuffer.IsFull: boolean;
+begin
+  Result := inherited IsFull;
+end;
+
+procedure TdzRingBuffer.SetElement(_Idx: integer; const _Element);
+begin
+  inherited;
+end;
+
+{ TdzRingStack }
+
+procedure TdzRingStack.Clear;
+begin
+  inherited;
+end;
+
+procedure TdzRingStack.ExtractEnd(var _Element);
+begin
+  inherited;
+end;
+
+function TdzRingStack.GetCount: integer;
+begin
+  Result := inherited GetCount;
+end;
+
+procedure TdzRingStack.GetElement(_Idx: integer; var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingStack.GetLast(var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingStack.InsertEnd(const _Element);
+begin
+  inherited;
+end;
+
+function TdzRingStack.IsEmpty: boolean;
+begin
+  Result := inherited IsEmpty;
+end;
+
+function TdzRingStack.IsFull: boolean;
+begin
+  Result := inherited IsFull;
+end;
+
+procedure TdzRingStack.SetElement(_Idx: integer; const _Element);
+begin
+  inherited;
+end;
+
+{ TdzRingQueue }
+
+procedure TdzRingQueue.Clear;
+begin
+  inherited;
+end;
+
+procedure TdzRingQueue.ExtractFront(var _Element);
+begin
+  inherited;
+end;
+
+function TdzRingQueue.GetCount: integer;
+begin
+  Result := inherited GetCount;
+end;
+
+procedure TdzRingQueue.GetElement(_Idx: integer; var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingQueue.GetFirst(var _Element);
+begin
+  inherited;
+end;
+
+procedure TdzRingQueue.InsertEnd(const _Element);
+begin
+  inherited;
+end;
+
+function TdzRingQueue.IsEmpty: boolean;
+begin
+  Result := inherited IsEmpty;
+end;
+
+function TdzRingQueue.IsFull: boolean;
+begin
+  Result := inherited IsFull;
+end;
+
+procedure TdzRingQueue.SetElement(_Idx: integer; const _Element);
+begin
+  inherited;
+end;
+
+end.
+

Modified: utilities/dzLib/trunk/src/u_dzStringUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzStringUtils.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/src/u_dzStringUtils.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -255,6 +255,40 @@
 function GetUserDefaultLocaleSettings: TFormatSettings;
 function GetSystemDefaultLocaleSettings: TFormatSettings;
 
+type
+  {: Helper class for building a text line }
+  TLineBuilder = class
+  private
+    FSeparator: string;
+    FContent: string;
+  public
+    {: Creates a TLineBuilder instance with the given separator
+       @param Separator is the separator string to use, defaults to TAB (#9) }
+    constructor Create(const _Separator: string = #9);
+    {: Assigns the contents of another TLineBuilder instance }
+    procedure Assign(_Source: TLineBuilder);
+    {: Adds a string column }
+    procedure Add(const _Column: string); overload;
+    {: Adds an integer value column }
+    procedure Add(_IntValue: integer); overload;
+    {: Adds a floating point value column with the given number of decimals }
+    procedure Add(_FloatValue: extended; _Decimals: integer); overload;
+    {: Adds a column with a time in hh:mm:ss format }
+    procedure Add(_Hours, _Minutes, _Seconds: integer); overload;
+    {: Adds a boolean column, with 'Y' for true and 'N' for false }
+    procedure Add(_b: Boolean); overload;
+    {: Clears the line }
+    procedure Clear;
+    {: Appends the contents of the given line }
+    procedure Append(_Line: TLineBuilder);
+    {: Prepends the contents of the given line }
+    procedure Prepend(_Line: TLineBuilder);
+    {: Extracts the first column from the line, returns false when empty }
+    function ExtractFirst(out _Column: string): boolean;
+    {: allows read access to the content that has been built }
+    property Content: string read FContent;
+  end;
+
 implementation
 
 uses
@@ -952,5 +986,96 @@
   GetLocaleFormatSettings(GetUserDefaultLCID, Result);
 end;
 
+{ TLineBuilder }
+
+constructor TLineBuilder.Create(const _Separator: string);
+begin
+  inherited Create;
+  FSeparator := _Separator;
+end;
+
+procedure TLineBuilder.Add(_IntValue: integer);
+begin
+  Add(IntToStr(_IntValue));
+end;
+
+procedure TLineBuilder.Add(_FloatValue: extended; _Decimals: integer);
+begin
+  Add(Float2Str(_FloatValue, _Decimals));
+end;
+
+procedure TLineBuilder.Add(const _Column: string);
+begin
+  if FContent <> '' then
+    FContent := FContent + FSeparator;
+  FContent := FContent + _Column;
+end;
+
+procedure TLineBuilder.Add(_Hours, _Minutes, _Seconds: integer);
+
+  function ZeroPadLeft(_Value: Integer; _Len: Integer): string;
+  begin
+    Str(_Value, Result);
+    while Length(Result) < _Len do
+      Result := '0' + Result;
+  end;
+
+begin
+  Add(ZeroPadLeft(_Hours, 2) + ':' + ZeroPadLeft(_Minutes, 2) + ':' + ZeroPadLeft(_Seconds, 2));
+end;
+
+procedure TLineBuilder.Add(_b: Boolean);
+begin
+  Add(IfThen(_B, 'Y', 'N'));
+end;
+
+procedure TLineBuilder.Append(_Line: TLineBuilder);
+var
+  s: string;
+begin
+  s := _Line.Content;
+  if s = '' then
+    exit;
+  if FContent <> '' then
+    FContent := FContent + FSeparator + s
+  else
+    FContent := s;
+end;
+
+procedure TLineBuilder.Assign(_Source: TLineBuilder);
+begin
+  FContent := _Source.Content;
+end;
+
+procedure TLineBuilder.Clear;
+begin
+  FContent := '';
+end;
+
+function TLineBuilder.ExtractFirst(out _Column: string): boolean;
+var
+  p: Integer;
+begin
+  p := Pos(FSeparator, FContent);
+  Result := p <> 0;
+  if Result then begin
+    _Column := LeftStr(FContent, p - 1);
+    FContent := Copy(FContent, p + 1);
+  end;
+end;
+
+procedure TLineBuilder.Prepend(_Line: TLineBuilder);
+var
+  s: string;
+begin
+  s := _Line.Content;
+  if s = '' then
+    exit;
+  if FContent <> '' then
+    FContent := s + FSeparator + FContent
+  else
+    FContent := s;
+end;
+
 end.
 

Modified: utilities/dzLib/trunk/src/u_dzVclUtils.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzVclUtils.pas	2007-11-03 10:45:06 UTC (rev 247)
+++ utilities/dzLib/trunk/src/u_dzVclUtils.pas	2007-11-15 09:53:50 UTC (rev 248)
@@ -90,6 +90,19 @@
 {: sets the row count to FixedRows + 1 and clears all non-fixed cells }
 procedure TStringGrid_Clear(_Grid: TStringGrid);
 
+function TStringGrid_AddColumn(_Grid: TStringGrid; const _Caption: string): integer;
+
+{: exports the contents of the string grid to a tab separated text file
+   @param Grid is the string grid to export
+   @param Filename is the name of the text file to create }
+procedure TStringGrid_ExportToFile(_Grid: TStringGrid; const _Filename: string);
+
+{: scrolls up the lines of a string grid
+   @param Grid is the TStringGrid to scroll
+   @param Top is the topmost row to scroll, if passed as -1 defaults to the first non-fixed row
+   @param Bottom is the bottommost row to scroll, if passed as -1 defaults to RowCount-1 }
+procedure TStringGrid_ScrollUp(_Grid: TStringGrid; _Top: integer = -1; _Bottom: integer = -1);
+
 {: sets the row count, taking the fixed rows into account }
 procedure TStringGrid_SetRowCount(_Grid: TStringGrid; _RowCount: integer);
 
@@ -399,6 +412,67 @@
     _Grid.Cells[c, _Grid.FixedRows] := '';
 end;
 
+function TStringGrid_AddColumn(_Grid: TStringGrid; const _Caption: string): integer;
+var
+  i: Integer;
+begin
+  Result := _Grid.ColCount;
+  for i := _Grid.ColCount - 1 downto 0 do begin
+    if _Grid.Cells[i, 0] = '' then begin
+      Result := i;
+    end;
+  end;
+
+  if Result >= _Grid.ColCount then
+    TStringGrid_SetColCount(_Grid, Result + 1);
+  _Grid.Cells[Result, 0] := _Caption;
+end;
+
+procedure TStringGrid_ExportToFile(_Grid: TStringGrid; const _Filename: string);
+var
+  Line: TLineBuilder;
+  r: Integer;
+  t: Text;
+  c: Integer;
+begin
+  AssignFile(t, _FileName);
+  Rewrite(t);
+  try
+    Line := TLineBuilder.Create;
+    try
+      for r := 0 to _Grid.RowCount - 1 do begin
+        Line.Clear;
+        for c := 0 to _Grid.ColCount - 1 do begin
+          Line.Add(_Grid.Cells[c, r]);
+        end;
+        WriteLn(t, Line.Content);
+      end;
+    finally
+      Line.Free;
+    end;
+  finally
+    CloseFile(t);
+  end;
+end;
+
+procedure TStringGrid_ScrollUp(_Grid: TStringGrid; _Top: integer = -1; _Bottom: integer = -1);
+var
+  r: Integer;
+  c: Integer;
+begin
+  if _Top = -1 then
+    _Top := _Grid.FixedRows;
+  if _Bottom = -1 then
+    _Bottom := _Grid.RowCount - 1;
+  for r := _Top to _Bottom - 1 do begin
+    for c := _Grid.FixedCols to _Grid.ColCount - 1 do
+      _Grid.Cells[c, r] := _Grid.Cells[c, r + 1];
+  end;
+  if _Bottom > _Top then
+    for c := _Grid.FixedCols to _Grid.ColCount - 1 do
+      _Grid.Cells[c, _Bottom] := '';
+end;
+
 function TStringGrid_DeleteRow(_Grid: TStringGrid; _Row: integer): boolean;
 var
   r: integer;



From twm at mail.berlios.de  Thu Nov 15 11:43:07 2007
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Thu, 15 Nov 2007 11:43:07 +0100
Subject: [Dzchart-svncheckins] r249 - utilities/dzCmdLineParser/trunk/src
Message-ID: <200711151043.lAFAh7YK027044@sheep.berlios.de>

Author: twm
Date: 2007-11-15 11:43:04 +0100 (Thu, 15 Nov 2007)
New Revision: 249

Modified:
   utilities/dzCmdLineParser/trunk/src/u_dzDefaultMain.pas
   utilities/dzCmdLineParser/trunk/src/u_dzOptionNameList.pas
Log:
* Bugfix: Comparison of commandline options was wrong resulting in unkonwn option errors even though the option was registered
* Bugfix: do not write to the console if this is not a console program
* Bugfix: call SysUtils.ShowException in a GUI program

Modified: utilities/dzCmdLineParser/trunk/src/u_dzDefaultMain.pas
===================================================================
--- utilities/dzCmdLineParser/trunk/src/u_dzDefaultMain.pas	2007-11-15 09:53:50 UTC (rev 248)
+++ utilities/dzCmdLineParser/trunk/src/u_dzDefaultMain.pas	2007-11-15 10:43:04 UTC (rev 249)
@@ -159,7 +159,9 @@
       s := 'Exception ' + e.ClassName + ': ' + e.Message;
       LogError(s);
       if IsConsole then
-        WriteLn(s);
+        WriteLn(s)
+      else
+        ShowException(e, nil);
       FExitCode := 1;
     end;
   end;
@@ -186,7 +188,7 @@
       LogError('Exception in function Main: ' + e.Message + ' ' + e.ClassName);
     end;
   end;
-  if DebugHook <> 0 then begin
+  if (DebugHook <> 0) and IsConsole then begin
     Write('Exit Code: ', Result, ' -- press Enter');
     Readln;
   end;

Modified: utilities/dzCmdLineParser/trunk/src/u_dzOptionNameList.pas
===================================================================
--- utilities/dzCmdLineParser/trunk/src/u_dzOptionNameList.pas	2007-11-15 09:53:50 UTC (rev 248)
+++ utilities/dzCmdLineParser/trunk/src/u_dzOptionNameList.pas	2007-11-15 10:43:04 UTC (rev 249)
@@ -53,9 +53,8 @@
 begin
   // Note: This compares 1 character options case sensitively ( eg. -A <> -a )
   //       but long options case insensitively (e.g. --hallo = --Hallo )
-  if (Length(_Key1) <> 1) or (Length(_Key2) <> 1) then
-    Result := CompareText(_Key1, _Key2)
-  else
+  Result := CompareText(_Key1, _Key2);
+  if (Result = 0) and (Length(_Key1) = 1) then
     Result := CompareStr(_Key1, _Key2);
 end;
 



