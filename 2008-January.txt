From twm at mail.berlios.de  Tue Jan  8 16:15:22 2008
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Tue, 8 Jan 2008 16:15:22 +0100
Subject: [Dzchart-svncheckins] r263 - utilities/dzLib/trunk/src
Message-ID: <200801081515.m08FFM2n023955@sheep.berlios.de>

Author: twm
Date: 2008-01-08 16:15:19 +0100 (Tue, 08 Jan 2008)
New Revision: 263

Added:
   utilities/dzLib/trunk/src/u_dzSpinLock.pas
Log:
new TSpinlock class (untested) for lightweight synchronization

Added: utilities/dzLib/trunk/src/u_dzSpinLock.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzSpinLock.pas	2007-12-23 14:28:01 UTC (rev 262)
+++ utilities/dzLib/trunk/src/u_dzSpinLock.pas	2008-01-08 15:15:19 UTC (rev 263)
@@ -0,0 +1,63 @@
+unit u_dzSpinLock;
+
+interface
+
+uses
+  Windows;
+
+type
+  /// This is a very simple thread synchronisation class that allows to limit
+  /// access to a resource. It uses InterlockedIncrement/Decrement and busy
+  /// waiting, so only use it for very small sections of code e.g.:
+  ///
+  /// Lock.Acquire;
+  /// try
+  ///   SharedVariable := NewValue;
+  /// finally
+  ///   Lock.Release;
+  /// end;
+  ///
+  /// For more complex code, use a Mutex or
+  TSpinLock = class
+  private
+    FLock: integer;
+  public
+    constructor Create;
+    /// try to acquire the lock and sleep (spin) until successfull
+    procedure Acquire;
+    /// try to aquire the lock and return false if it could not be acquired
+    function TryAcquire: boolean;
+    /// release the lock
+    procedure Release;
+  end;
+
+implementation
+
+{ TSimpleSyncRec }
+
+constructor TSpinLock.Create;
+begin
+  inherited Create;
+  FLock := -1;
+end;
+
+procedure TSpinLock.Acquire;
+begin
+  while not TryAcquire do
+    Sleep(1);
+end;
+
+function TSpinLock.TryAcquire: boolean;
+begin
+  Result := (InterlockedIncrement(FLock) = 0);
+  if not Result then
+    InterlockedDecrement(FLock);
+end;
+
+procedure TSpinLock.Release;
+begin
+  InterlockedDecrement(FLock);
+end;
+
+end.
+



From twm at mail.berlios.de  Mon Jan 14 12:27:16 2008
From: twm at mail.berlios.de (twm at mail.berlios.de)
Date: Mon, 14 Jan 2008 12:27:16 +0100
Subject: [Dzchart-svncheckins] r264 - utilities/dzLib/trunk/src
Message-ID: <200801141127.m0EBRGmT017222@sheep.berlios.de>

Author: twm
Date: 2008-01-14 12:27:14 +0100 (Mon, 14 Jan 2008)
New Revision: 264

Added:
   utilities/dzLib/trunk/src/u_dzTextFile.pas
Log:
OO wrapper for TextFile that allows reading and writing strings (for now)

Added: utilities/dzLib/trunk/src/u_dzTextFile.pas
===================================================================
--- utilities/dzLib/trunk/src/u_dzTextFile.pas	2008-01-08 15:15:19 UTC (rev 263)
+++ utilities/dzLib/trunk/src/u_dzTextFile.pas	2008-01-14 11:27:14 UTC (rev 264)
@@ -0,0 +1,86 @@
+unit u_dzTextFile;
+
+interface
+
+uses
+  SysUtils;
+
+type
+  ///<summary> defined the file access for TTextFile</summary>
+  TTextFileAccess = (tfaRead, tfaWrite, tfaAppend);
+  ///<summary> a wrapper class for System.TextFile</summary>
+  TTextFile = class
+  private
+    FFile: TextFile;
+    FIsFileOpen: boolean;
+    FFilename: string;
+  public
+    ///<summary> Creates a new TTextFile instance with the given filename and file access </summary>
+    constructor Create(const _Filename: string; _Access: TTextFileAccess); overload;
+    ///<summary> Destroys the TTextFile instance and closes the file </summary>
+    destructor Destroy; override;
+    ///<summary> Writes a string to the file </summary>
+    procedure Write(const _s: string);
+    ///<summary> Writes a string followed by CR/LF to the file </summary>
+    procedure WriteLn(const _s: string);
+    ///<summary> Reads from the file up to the next CR/LF and returns the string </summary>
+    function ReadLn: string;
+    property Filename: string read FFilename;
+  end;
+
+implementation
+
+uses
+  u_dzTranslator;
+
+{ TTextFile }
+
+constructor TTextFile.Create(const _Filename: string; _Access: TTextFileAccess);
+var
+  EInOut: EInOutError;
+begin
+{$I+}
+  inherited Create;
+  AssignFile(FFile, _Filename);
+  try
+    case _Access of
+      tfaRead: Reset(FFile);
+      tfaWrite: Rewrite(FFile);
+      tfaAppend: Append(FFile);
+    else
+      raise Exception.CreateFmt(_('Invalid file access value (%d)'), [Ord(_Access)]);
+    end;
+  except
+    on e: EInOutError do begin
+      EInOut := EInOutError.Create(e.Message + ' Accessing file ' + _Filename);
+      EInOut.ErrorCode := e.ErrorCode;
+      raise EInOut;
+    end;
+  end;
+  FIsFileOpen := true;
+end;
+
+destructor TTextFile.Destroy;
+begin
+  if FIsFileOpen then
+    Close(FFile);
+  inherited;
+end;
+
+function TTextFile.ReadLn: string;
+begin
+  System.ReadLn(FFile, Result);
+end;
+
+procedure TTextFile.Write(const _s: string);
+begin
+  System.Write(FFile, _s);
+end;
+
+procedure TTextFile.WriteLn(const _s: string);
+begin
+  System.WriteLn(FFile, _s);
+end;
+
+end.
+



